/// shlauncher Start of App.config ///
﻿<?xml version="1.0" encoding="utf-8" ?>
<configuration>
    <configSections>
        <sectionGroup name="userSettings" type="System.Configuration.UserSettingsGroup, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" >
            <section name="shlauncher.Properties.Settings" type="System.Configuration.ClientSettingsSection, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" allowExeDefinition="MachineToLocalUser" requirePermission="false" />
        </sectionGroup>
    </configSections>
    <userSettings>
        <shlauncher.Properties.Settings>
            <setting name="RememberedToken" serializeAs="String">
                <value />
            </setting>
            <setting name="RememberedUsername" serializeAs="String">
                <value />
            </setting>
        </shlauncher.Properties.Settings>
    </userSettings>
</configuration>
/// shlauncher End of App.config ///

/// shlauncher Start of app.manifest ///
﻿<?xml version="1.0" encoding="utf-8"?>
<assembly manifestVersion="1.0" xmlns="urn:schemas-microsoft-com:asm.v1">
  <assemblyIdentity version="1.0.0.0" name="shlauncher.app"/>
  <trustInfo xmlns="urn:schemas-microsoft-com:asm.v2">
    <security>
      <requestedPrivileges xmlns="urn:schemas-microsoft-com:asm.v3">
        <!-- UAC Manifest Options
             If you want to change the Windows User Account Control level replace the 
             requestedExecutionLevel node with one of the following.

        <requestedExecutionLevel  level="asInvoker" uiAccess="false" />
        <requestedExecutionLevel  level="requireAdministrator" uiAccess="false" />
        <requestedExecutionLevel  level="highestAvailable" uiAccess="false" />

            Specifying requestedExecutionLevel element will disable file and registry virtualization. 
            Remove this element if your application requires this virtualization for backwards
            compatibility.
        -->
        <requestedExecutionLevel level="asInvoker" uiAccess="false" />
      </requestedPrivileges>
    </security>
  </trustInfo>

  <compatibility xmlns="urn:schemas-microsoft-com:compatibility.v1">
    <application>
      <!-- A list of the Windows versions that this application has been tested on
           and is designed to work with. Uncomment the appropriate elements
           and Windows will automatically select the most compatible environment. -->

      <!-- Windows Vista -->
      <!--<supportedOS Id="{e2011457-1546-43c5-a5fe-008deee3d3f0}" />-->

      <!-- Windows 7 -->
      <!--<supportedOS Id="{35138b9a-5d96-4fbd-8e2d-a2440225f93a}" />-->

      <!-- Windows 8 -->
      <!--<supportedOS Id="{4a2f28e3-53b9-4441-ba9c-d69d4a4a6e38}" />-->

      <!-- Windows 8.1 -->
      <!--<supportedOS Id="{1f676c76-80e1-4239-95bb-83d0f6d0da78}" />-->

      <!-- Windows 10 -->
      <supportedOS Id="{8e0f7a12-bfb3-4fe8-b9a5-48fd50a15a9a}" />

    </application>
  </compatibility>

  <!-- Indicates that the application is DPI-aware and will not be automatically scaled by Windows at higher
       DPIs. Windows Presentation Foundation (WPF) applications are automatically DPI-aware and do not need 
       to opt in. Windows Forms applications targeting .NET Framework 4.6 that opt into this setting, should 
       also set the 'EnableWindowsFormsHighDpiAutoResizing' setting to 'true' in their app.config. 
       
       Makes the application long-path aware. See https://docs.microsoft.com/windows/win32/fileio/maximum-file-path-limitation -->

  <application xmlns="urn:schemas-microsoft-com:asm.v3">
      <windowsSettings>
          <dpiAwareness xmlns="http://schemas.microsoft.com/SMI/2016/WindowsSettings">PerMonitor</dpiAwareness>
          <dpiAware xmlns="http://schemas.microsoft.com/SMI/2005/WindowsSettings">true/PM</dpiAware>
          <longPathAware xmlns="http://schemas.microsoft.com/SMI/2016/WindowsSettings">true</longPathAware>
      </windowsSettings>
  </application>

  <!-- Enable themes for Windows common controls and dialogs (Windows XP and later) -->
  <dependency>
      <dependentAssembly>
          <assemblyIdentity
              type="win32"
              name="Microsoft.Windows.Common-Controls"
              version="6.0.0.0"
              processorArchitecture="*"
              publicKeyToken="6595b64144ccf1df"
              language="*" />
      </dependentAssembly>
  </dependency>
</assembly>

/// shlauncher End of app.manifest ///

/// shlauncher Start of App.xaml ///
﻿<Application
    x:Class="shlauncher.App"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:ui="http://schemas.lepo.co/wpfui/2022/xaml"
    DispatcherUnhandledException="OnDispatcherUnhandledException"
    Exit="OnExit"
    Startup="OnStartup">
    <Application.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ui:ThemesDictionary Theme="Dark" />
                <ui:ControlsDictionary />
                <ResourceDictionary Source="Resources/LauncherSpecificStyles.xaml"/>
            </ResourceDictionary.MergedDictionaries>
        </ResourceDictionary>
    </Application.Resources>
</Application>
/// shlauncher End of App.xaml ///

/// shlauncher Start of App.xaml.cs ///
﻿using System.IO;
using System.Windows.Threading;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Hosting;
using System.Diagnostics;

namespace shlauncher
{
    public partial class App
    {
        private static readonly IHost _host = Host
            .CreateDefaultBuilder()
            .ConfigureAppConfiguration(c => {
                string? basePath = Path.GetDirectoryName(AppContext.BaseDirectory);
                if (!string.IsNullOrEmpty(basePath))
                {
                    c.SetBasePath(basePath);
                }
            })
            .ConfigureServices((context, services) =>
            {
                services.AddNavigationViewPageProvider();

                services.AddHostedService<ApplicationHostService>();

                services.AddSingleton<IThemeService, ThemeService>();
                services.AddSingleton<ITaskBarService, TaskBarService>();
                services.AddSingleton<INavigationService, NavigationService>();

                services.AddSingleton<INavigationWindow, MainWindow>();
                services.AddSingleton<MainWindowViewModel>();

                services.AddSingleton<SupabaseService>();
                services.AddSingleton<AuthService>();
                services.AddSingleton<CurrentUserSessionService>();

                services.AddTransient<WelcomeViewModel>();
                services.AddTransient<SignInViewModel>();
                services.AddTransient<LoadingViewModel>();
                services.AddTransient<MainLauncherViewModel>();
                services.AddSingleton<SettingsViewModel>();

                services.AddTransient<WelcomePage>();
                services.AddTransient<SignInPage>();
                services.AddTransient<LoadingPage>();
                services.AddTransient<MainLauncherPage>();
                services.AddSingleton<SettingsPage>();
            }).Build();

        public static IServiceProvider Services => _host.Services;

        private async void OnStartup(object sender, StartupEventArgs e)
        {
            await _host.StartAsync();

            var supabaseService = Services.GetRequiredService<SupabaseService>();
            await supabaseService.InitializeAsync();

            var authService = Services.GetRequiredService<AuthService>();
            var sessionService = Services.GetRequiredService<CurrentUserSessionService>();
            var (token, username) = authService.GetRememberedUser();

            if (!string.IsNullOrEmpty(token) && !string.IsNullOrEmpty(username))
            {
                var principal = authService.ValidateToken(token);
                if (principal?.Identity?.IsAuthenticated == true)
                {
                    Models.User? rememberedUser = await supabaseService.GetUserByLogin(username);
                    if (rememberedUser != null)
                    {
                        sessionService.SetCurrentUser(rememberedUser, token);
                        Debug.WriteLine($"User {rememberedUser.Login} session restored from remembered token.");
                    }
                    else
                    {
                        authService.ClearRememberedUser();
                    }
                }
                else
                {
                    authService.ClearRememberedUser();
                }
            }
        }

        private async void OnExit(object sender, ExitEventArgs e)
        {
            await _host.StopAsync();
            _host.Dispose();
        }

        private void OnDispatcherUnhandledException(object sender, DispatcherUnhandledExceptionEventArgs e)
        {
            Debug.WriteLine($"Unhandled exception: {e.Exception}");
        }
    }
}
/// shlauncher End of App.xaml.cs ///

/// shlauncher Start of AssemblyInfo.cs ///
using System.Windows;

[assembly: ThemeInfo(
    ResourceDictionaryLocation.None,
    ResourceDictionaryLocation.SourceAssembly
)]
/// shlauncher End of AssemblyInfo.cs ///

/// shlauncher Start of shlauncher.csproj ///
<Project Sdk="Microsoft.NET.Sdk">

	<PropertyGroup>
		<OutputType>WinExe</OutputType>
		<TargetFramework>net9.0-windows</TargetFramework>
		<ApplicationManifest>app.manifest</ApplicationManifest>
		<ApplicationIcon>Assets/icon.ico</ApplicationIcon>
		<!-- Changed from wpfui-icon.ico -->
		<UseWPF>true</UseWPF>
		<Nullable>enable</Nullable>
		<ImplicitUsings>enable</ImplicitUsings>
		<RootNamespace>shlauncher</RootNamespace>
		<AssemblyName>shlauncher</AssemblyName>
	</PropertyGroup>

	<ItemGroup>
		<Content Include="Assets\icon.ico">
		  <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
		</Content>
		<!-- Make sure this icon file exists -->
	</ItemGroup>

	<ItemGroup>
		<PackageReference Include="WPF-UI" Version="4.0.2" />
		<PackageReference Include="WPF-UI.DependencyInjection" Version="4.0.2" />
		<PackageReference Include="Microsoft.Extensions.Hosting" Version="9.0.1" />
		<!-- Original was 9.0.0, template has 9.0.1 -->
		<PackageReference Include="CommunityToolkit.Mvvm" Version="8.4.0" />
		<!-- Original was 8.2.2, template has 8.4.0 -->
		<PackageReference Include="supabase-csharp" Version="0.16.2" />
		<PackageReference Include="BCrypt.Net-Next" Version="4.0.3" />
		<PackageReference Include="System.IdentityModel.Tokens.Jwt" Version="7.5.1" />
		<PackageReference Include="Microsoft.IdentityModel.Tokens" Version="7.5.1" />
	</ItemGroup>

	<ItemGroup>
		<None Remove="Assets\wpfui-icon-256.png" />
		<None Remove="Assets\wpfui-icon-1024.png" />
		<None Remove="Assets\Dongle-Regular.ttf" />
		<None Remove="Assets\launcher_banner.png" />
	</ItemGroup>

	<ItemGroup>
		<Resource Include="Assets\Dongle-Regular.ttf">
			<CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
		</Resource>
		<Resource Include="Assets\launcher_banner.png">
			<CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
		</Resource>
	</ItemGroup>

	<ItemGroup>
		<None Update="Properties\Settings.settings">
			<Generator>SettingsSingleFileGenerator</Generator>
			<LastGenOutput>Settings.Designer.cs</LastGenOutput>
		</None>
	</ItemGroup>

</Project>
/// shlauncher End of shlauncher.csproj ///

/// shlauncher Start of shlauncher.csproj.user ///
﻿<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="Current" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup />
</Project>
/// shlauncher End of shlauncher.csproj.user ///

/// shlauncher Start of shlauncher.sln ///
﻿
Microsoft Visual Studio Solution File, Format Version 12.00
# Visual Studio Version 17
VisualStudioVersion = 17.13.35931.197 d17.13
MinimumVisualStudioVersion = 10.0.40219.1
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "shlauncher", "shlauncher.csproj", "{E9095BB5-C864-466A-95A1-1066F73F884D}"
EndProject
Global
	GlobalSection(SolutionConfigurationPlatforms) = preSolution
		Debug|Any CPU = Debug|Any CPU
		Release|Any CPU = Release|Any CPU
	EndGlobalSection
	GlobalSection(ProjectConfigurationPlatforms) = postSolution
		{E9095BB5-C864-466A-95A1-1066F73F884D}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{E9095BB5-C864-466A-95A1-1066F73F884D}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{E9095BB5-C864-466A-95A1-1066F73F884D}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{E9095BB5-C864-466A-95A1-1066F73F884D}.Release|Any CPU.Build.0 = Release|Any CPU
	EndGlobalSection
	GlobalSection(SolutionProperties) = preSolution
		HideSolutionNode = FALSE
	EndGlobalSection
	GlobalSection(ExtensibilityGlobals) = postSolution
		SolutionGuid = {C5888962-A937-4788-BC27-B5CEEF00A374}
	EndGlobalSection
EndGlobal

/// shlauncher End of shlauncher.sln ///

/// shlauncher Start of Usings.cs ///
﻿global using System;
global using System.Windows;
global using CommunityToolkit.Mvvm.ComponentModel;
global using CommunityToolkit.Mvvm.Input;
global using Microsoft.Extensions.DependencyInjection;
global using shlauncher.Services; // Corrected
global using shlauncher.Models;   // Corrected
global using shlauncher.ViewModels; // Corrected (base for viewmodels)
global using shlauncher.ViewModels.Pages; // Corrected
global using shlauncher.ViewModels.Windows; // Corrected
global using shlauncher.Views.Pages;    // Corrected
global using shlauncher.Views.Windows;  // Corrected
global using Wpf.Ui;
global using Wpf.Ui.Abstractions;
global using Wpf.Ui.Abstractions.Controls;
global using Wpf.Ui.Controls;
global using Wpf.Ui.DependencyInjection;
global using Wpf.Ui.Appearance;
/// shlauncher End of Usings.cs ///

/// Pages Start of LoadingPage.xaml ///
<Page
    x:Class="shlauncher.Views.Pages.LoadingPage"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:ui="http://schemas.lepo.co/wpfui/2022/xaml"
    xmlns:vms="clr-namespace:shlauncher.ViewModels.Pages"
    mc:Ignorable="d"
    d:DataContext="{d:DesignInstance Type=vms:LoadingViewModel, IsDesignTimeCreatable=False}"
    ui:Design.Background="{DynamicResource ApplicationBackgroundBrush}">
    <Grid>
        <ui:ProgressRing IsIndeterminate="True" VerticalAlignment="Center" HorizontalAlignment="Center"/>
    </Grid>
</Page>
/// Pages End of LoadingPage.xaml ///

/// Pages Start of LoadingPage.xaml.cs ///
﻿namespace shlauncher.Views.Pages
{
    public partial class LoadingPage : INavigableView<ViewModels.Pages.LoadingViewModel>
    {
        public ViewModels.Pages.LoadingViewModel ViewModel { get; }

        public LoadingPage(ViewModels.Pages.LoadingViewModel viewModel)
        {
            ViewModel = viewModel;
            DataContext = this;
            InitializeComponent();
        }
    }
}
/// Pages End of LoadingPage.xaml.cs ///

/// Pages Start of MainLauncherPage.xaml ///
<Page
    x:Class="shlauncher.Views.Pages.MainLauncherPage"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:ui="http://schemas.lepo.co/wpfui/2022/xaml"
    xmlns:vms="clr-namespace:shlauncher.ViewModels.Pages"
    xmlns:models="clr-namespace:shlauncher.Models"
    mc:Ignorable="d"
    d:DataContext="{d:DesignInstance Type=vms:MainLauncherViewModel, IsDesignTimeCreatable=False}"
    ui:Design.Background="{DynamicResource ApplicationBackgroundBrush}"
    Foreground="{DynamicResource TextFillColorPrimaryBrush}"
    ScrollViewer.CanContentScroll="False">
    <Grid Margin="0">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>

        <Border Grid.Row="0" Padding="24,16,24,12" BorderBrush="{DynamicResource ControlStrokeColorDefaultBrush}" BorderThickness="0,0,0,1">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>

                <StackPanel Grid.Column="0" Orientation="Horizontal" VerticalAlignment="Center">
                    <Border Width="32" Height="32" CornerRadius="16" Background="{DynamicResource AccentFillColorDefaultBrush}" Margin="0,0,10,0">
                        <TextBlock Text="{Binding ViewModel.UserAvatarFallback}" FontSize="16" FontWeight="SemiBold"
                                   HorizontalAlignment="Center" VerticalAlignment="Center"
                                   Foreground="{DynamicResource TextOnAccentFillColorPrimaryBrush}"/>
                    </Border>
                    <TextBlock Text="{Binding ViewModel.UserLogin}" FontSize="15" FontWeight="SemiBold"
                               VerticalAlignment="Center" Foreground="{DynamicResource TextFillColorPrimaryBrush}"/>
                </StackPanel>

                <StackPanel Grid.Column="2" Orientation="Horizontal" VerticalAlignment="Center">
                    <ui:Button Command="{Binding ViewModel.NavigateToSettingsCommand}" Appearance="Transparent" Padding="6">
                        <ui:SymbolIcon Symbol="Settings24" FontSize="16"/>
                    </ui:Button>
                    <ui:Button Content="Logout" 
                        Command="{Binding ViewModel.LogoutCommand}"
                        Appearance="Transparent" Margin="8,0,0,0" FontSize="14" FontWeight="Medium"
                        Foreground="{DynamicResource TextFillColorSecondaryBrush}"/>
                </StackPanel>
            </Grid>
        </Border>

        <Grid Grid.Row="1" Margin="24,16,24,24">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="280" MinWidth="250"/>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="*" MinWidth="300"/>
            </Grid.ColumnDefinitions>

            <ScrollViewer Grid.Column="0" VerticalScrollBarVisibility="Auto" Margin="0,0,20,0" Padding="0,0,10,0">
                <ItemsControl ItemsSource="{Binding ViewModel.UpdateLogs}">
                    <ItemsControl.ItemTemplate>
                        <DataTemplate DataType="{x:Type models:SupabaseUpdateLogEntry}">
                            <StackPanel Margin="0,0,0,24">
                                <TextBlock Text="{Binding Title}" FontSize="16" FontWeight="SemiBold" Foreground="{DynamicResource SystemAccentColorPrimaryBrush}" Margin="0,0,0,6"/>
                                <ItemsControl ItemsSource="{Binding Changes}">
                                    <ItemsControl.ItemTemplate>
                                        <DataTemplate>
                                            <DockPanel LastChildFill="True" Margin="8,0,0,3">
                                                <TextBlock DockPanel.Dock="Left" Text="• " Foreground="{DynamicResource TextFillColorSecondaryBrush}" FontSize="14" Margin="0,0,4,0"/>
                                                <TextBlock Text="{Binding}" Foreground="{DynamicResource TextFillColorSecondaryBrush}" FontSize="14" TextWrapping="Wrap"/>
                                            </DockPanel>
                                        </DataTemplate>
                                    </ItemsControl.ItemTemplate>
                                </ItemsControl>
                            </StackPanel>
                        </DataTemplate>
                    </ItemsControl.ItemTemplate>
                </ItemsControl>
            </ScrollViewer>

            <Border Grid.Column="1" Width="1" Background="{DynamicResource DividerStrokeColorDefaultBrush}" VerticalAlignment="Stretch" Margin="0,0,20,0"/>

            <Grid Grid.Column="2">
                <Grid.RowDefinitions>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>

                <StackPanel Grid.Row="0">
                    <Border Height="180" CornerRadius="4" Margin="0,0,0,20" Background="{DynamicResource ControlFillColorSecondaryBrush}" ClipToBounds="True">
                        <Image Source="pack://application:,,,/Assets/launcher_banner.png" Stretch="Uniform" />
                    </Border>

                    <ui:Card Padding="16">
                        <StackPanel>
                            <Grid Margin="0,0,0,8">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="*"/>
                                </Grid.ColumnDefinitions>
                                <TextBlock Grid.Column="0" Text="Patch" Foreground="{DynamicResource TextFillColorSecondaryBrush}" FontSize="14"/>
                                <TextBlock Grid.Column="1" Text="{Binding ViewModel.PatchVersion}" FontSize="14" FontWeight="SemiBold" HorizontalAlignment="Right"/>
                            </Grid>
                            <Grid Margin="0,0,0,8">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="*"/>
                                </Grid.ColumnDefinitions>
                                <TextBlock Grid.Column="0" Text="Status" Foreground="{DynamicResource TextFillColorSecondaryBrush}" FontSize="14"/>
                                <TextBlock Grid.Column="1" Text="{Binding ViewModel.VersionStatus}" Foreground="{Binding ViewModel.VersionStatus, Converter={StaticResource VersionStatusToColorConverter}}" FontSize="14" FontWeight="SemiBold" HorizontalAlignment="Right"/>
                            </Grid>
                            <Grid Margin="0,0,0,20">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="*"/>
                                </Grid.ColumnDefinitions>
                                <TextBlock Grid.Column="0" Text="License" Foreground="{DynamicResource TextFillColorSecondaryBrush}" FontSize="14"/>
                                <TextBlock Grid.Column="1" Text="{Binding ViewModel.LicenseType}" Foreground="{DynamicResource SystemAccentColorPrimaryBrush}" FontSize="14" FontWeight="SemiBold" HorizontalAlignment="Right"/>
                            </Grid>

                            <ui:Button Content="▶ PLAY" 
                                       Icon="{ui:SymbolIcon Play24}"
                                       Command="{Binding ViewModel.PlayCommand}" 
                                       Appearance="Primary"
                                       HorizontalAlignment="Stretch"
                                       Height="40"
                                       FontSize="16"
                                       FontWeight="SemiBold"/>
                        </StackPanel>
                    </ui:Card>
                </StackPanel>
            </Grid>
        </Grid>
    </Grid>
</Page>
/// Pages End of MainLauncherPage.xaml ///

/// Pages Start of MainLauncherPage.xaml.cs ///
﻿namespace shlauncher.Views.Pages
{
    public partial class MainLauncherPage : INavigableView<ViewModels.Pages.MainLauncherViewModel>
    {
        public ViewModels.Pages.MainLauncherViewModel ViewModel { get; }

        public MainLauncherPage(ViewModels.Pages.MainLauncherViewModel viewModel)
        {
            ViewModel = viewModel;
            DataContext = this;
            InitializeComponent();
        }
    }
}
/// Pages End of MainLauncherPage.xaml.cs ///

/// Pages Start of SettingsPage.xaml ///
﻿<Page
    x:Class="shlauncher.Views.Pages.SettingsPage"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:ui="http://schemas.lepo.co/wpfui/2022/xaml"
    xmlns:helpers="clr-namespace:shlauncher.Helpers"
    xmlns:vms="clr-namespace:shlauncher.ViewModels.Pages"
    mc:Ignorable="d"
    d:DataContext="{d:DesignInstance Type=vms:SettingsViewModel, IsDesignTimeCreatable=False}"
    ui:Design.Background="{DynamicResource ApplicationBackgroundBrush}"
    Foreground="{DynamicResource TextFillColorPrimaryBrush}">
    <Page.Resources>
        <helpers:EnumToBooleanConverter x:Key="EnumToBooleanConverter" />
    </Page.Resources>

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>

        <Grid Grid.Row="0" Margin="24,16,24,0">
            <ui:Button Command="{Binding ViewModel.GoBackCommand}" Appearance="Transparent" HorizontalAlignment="Left" VerticalAlignment="Center">
                <ui:SymbolIcon Symbol="ArrowLeft24" FontSize="20" />
            </ui:Button>
            <TextBlock Text="Settings" FontSize="24" FontWeight="SemiBold" HorizontalAlignment="Center" VerticalAlignment="Center"/>
        </Grid>

        <ScrollViewer Grid.Row="1" VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Disabled" Margin="0,10,0,0">
            <StackPanel Margin="24,16,24,24">
                <TextBlock
                    FontSize="20" 
                    FontWeight="SemiBold"
                    Text="Personalization" Margin="0,0,0,16"/>
                <TextBlock Text="Theme" Margin="0,0,0,8" Foreground="{DynamicResource TextFillColorSecondaryBrush}"/>

                <RadioButton
                    Margin="0,6,0,0"
                    Command="{Binding ViewModel.ChangeThemeCommand, Mode=OneWay}"
                    CommandParameter="theme_light"
                    Content="Light"
                    GroupName="themeSelect"
                    IsChecked="{Binding ViewModel.CurrentTheme, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter=Light, Mode=OneWay}" />
                <RadioButton
                    Margin="0,8,0,0"
                    Command="{Binding ViewModel.ChangeThemeCommand, Mode=OneWay}"
                    CommandParameter="theme_dark"
                    Content="Dark"
                    GroupName="themeSelect"
                    IsChecked="{Binding ViewModel.CurrentTheme, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter=Dark, Mode=OneWay}" />

                <ui:HyperlinkButton NavigateUri="https://wpfui.lepo.co/" Content="WPF UI Documentation" Margin="0,20,0,0"/>

                <TextBlock
                    Margin="0,32,0,0"
                    FontSize="20"
                    FontWeight="SemiBold"
                    Text="Account" />
                <TextBlock Text="{Binding ViewModel.AppVersion, Mode=OneWay}" Margin="0,12,0,16" Foreground="{DynamicResource TextFillColorTertiaryBrush}"/>

                <ui:Button Content="Logout" 
                           Command="{Binding ViewModel.LogoutCommand}" 
                           Appearance="Secondary" 
                           HorizontalAlignment="Left" 
                           Width="120"
                           Margin="0,8,0,0"/>
            </StackPanel>
        </ScrollViewer>
    </Grid>
</Page>
/// Pages End of SettingsPage.xaml ///

/// Pages Start of SettingsPage.xaml.cs ///
﻿namespace shlauncher.Views.Pages
{
    public partial class SettingsPage : INavigableView<ViewModels.Pages.SettingsViewModel>
    {
        public ViewModels.Pages.SettingsViewModel ViewModel { get; }

        public SettingsPage(ViewModels.Pages.SettingsViewModel viewModel)
        {
            ViewModel = viewModel;
            DataContext = this;
            InitializeComponent();
        }
    }
}
/// Pages End of SettingsPage.xaml.cs ///

/// Pages Start of SignInPage.xaml ///
<Page
    x:Class="shlauncher.Views.Pages.SignInPage"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:ui="http://schemas.lepo.co/wpfui/2022/xaml"
    xmlns:vms="clr-namespace:shlauncher.ViewModels.Pages"
    mc:Ignorable="d"
    d:DataContext="{d:DesignInstance Type=vms:SignInViewModel, IsDesignTimeCreatable=False}"
    ui:Design.Background="{DynamicResource ApplicationBackgroundBrush}"
    Foreground="{DynamicResource TextFillColorPrimaryBrush}">
    <Grid VerticalAlignment="Center" HorizontalAlignment="Center">
        <StackPanel Width="320" Margin="20">
            <TextBlock Text="Sign in" FontSize="28" FontWeight="SemiBold" Margin="0,0,0,5"/>
            <TextBlock Text="To log in, enter your credentials." Foreground="{DynamicResource TextFillColorSecondaryBrush}" FontSize="14" Margin="0,0,0,25"/>

            <TextBlock Text="Username or Email" FontSize="14" FontWeight="Medium" Margin="0,0,0,5"/>
            <ui:TextBox PlaceholderText="Enter your username or email"
                        Text="{Binding ViewModel.Username, UpdateSourceTrigger=PropertyChanged}" 
                        Margin="0,0,0,15"
                        Icon="{ui:SymbolIcon Person24}"/>

            <TextBlock Text="Password" FontSize="14" FontWeight="Medium" Margin="0,0,0,5"/>
            <ui:PasswordBox PlaceholderText="Enter your password"
                            Password="{Binding ViewModel.Password, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                            Margin="0,0,0,20"
                            Icon="{ui:SymbolIcon Password24}"/>

            <CheckBox Content="Remember me" IsChecked="{Binding ViewModel.RememberMe}" Margin="0,0,0,25"/>

            <ui:Button Content="LOGIN"
                       Command="{Binding ViewModel.LoginCommand}"
                       Appearance="Primary"
                       HorizontalAlignment="Stretch"
                       Height="36"
                       Margin="0,0,0,15"/>

            <ui:Button Content="Don't have an account?" 
                       Command="{Binding ViewModel.RegisterCommand}"
                       Appearance="Transparent"
                       HorizontalAlignment="Center"
                       FontSize="13"
                       Foreground="{DynamicResource TextFillColorSecondaryBrush}"/>
        </StackPanel>
    </Grid>
</Page>
/// Pages End of SignInPage.xaml ///

/// Pages Start of SignInPage.xaml.cs ///
﻿namespace shlauncher.Views.Pages
{
    public partial class SignInPage : INavigableView<ViewModels.Pages.SignInViewModel>
    {
        public ViewModels.Pages.SignInViewModel ViewModel { get; }

        public SignInPage(ViewModels.Pages.SignInViewModel viewModel)
        {
            ViewModel = viewModel;
            DataContext = this;
            InitializeComponent();
        }

        private void PasswordBox_PasswordChanged(object sender, System.Windows.RoutedEventArgs e)
        {
            if (sender is PasswordBox passwordBox)
            {
                ViewModel.Password = passwordBox.Password;
            }
        }
    }
}
/// Pages End of SignInPage.xaml.cs ///

/// Pages Start of WelcomePage.xaml ///
<Page
    x:Class="shlauncher.Views.Pages.WelcomePage"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:ui="http://schemas.lepo.co/wpfui/2022/xaml"
    xmlns:vms="clr-namespace:shlauncher.ViewModels.Pages"
    mc:Ignorable="d"
    d:DataContext="{d:DesignInstance Type=vms:WelcomeViewModel, IsDesignTimeCreatable=False}"
    ui:Design.Background="{DynamicResource ApplicationBackgroundBrush}"
    Foreground="{DynamicResource TextFillColorPrimaryBrush}">
    <Grid VerticalAlignment="Center" HorizontalAlignment="Center">
        <StackPanel Width="300" HorizontalAlignment="Center">
            <TextBlock Text="Welcome!" FontSize="32" FontWeight="SemiBold" HorizontalAlignment="Center" Margin="0,0,0,10"/>
            <TextBlock Text="Choose what you want to do" FontSize="16" Foreground="{DynamicResource TextFillColorSecondaryBrush}" HorizontalAlignment="Center" Margin="0,0,0,30" TextAlignment="Center"/>
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>
                <ui:Button Grid.Column="0" Content="SIGN IN" 
                           Command="{Binding ViewModel.NavigateToSignInCommand}" 
                           Appearance="Primary"
                           HorizontalAlignment="Stretch" 
                           Height="36"
                           Margin="0,0,5,0"/>
                <ui:Button Grid.Column="2" Content="BUY" 
                           Command="{Binding ViewModel.BuyCommand}" 
                           Appearance="Secondary"
                           HorizontalAlignment="Stretch"
                           Height="36"
                           Margin="5,0,0,0"/>
            </Grid>
        </StackPanel>
    </Grid>
</Page>
/// Pages End of WelcomePage.xaml ///

/// Pages Start of WelcomePage.xaml.cs ///
﻿namespace shlauncher.Views.Pages
{
    public partial class WelcomePage : INavigableView<ViewModels.Pages.WelcomeViewModel>
    {
        public ViewModels.Pages.WelcomeViewModel ViewModel { get; }

        public WelcomePage(ViewModels.Pages.WelcomeViewModel viewModel)
        {
            ViewModel = viewModel;
            DataContext = this;
            InitializeComponent();
        }
    }
}
/// Pages End of WelcomePage.xaml.cs ///

/// Windows Start of MainWindow.xaml ///
﻿<ui:FluentWindow
    x:Class="shlauncher.Views.Windows.MainWindow"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:ui="http://schemas.lepo.co/wpfui/2022/xaml"
    xmlns:local="clr-namespace:shlauncher.Views.Windows"
    xmlns:vmsWin="clr-namespace:shlauncher.ViewModels.Windows"
    mc:Ignorable="d"
    Title="{Binding ViewModel.ApplicationTitle, Mode=OneWay}"
    Width="860"
    Height="600"
    MinWidth="700"
    MinHeight="500"
    d:DataContext="{d:DesignInstance Type=vmsWin:MainWindowViewModel, IsDesignTimeCreatable=True}"
    ui:Design.Background="{DynamicResource ApplicationBackgroundBrush}"
    ui:Design.Foreground="{DynamicResource TextFillColorPrimaryBrush}"
    ExtendsContentIntoTitleBar="True"
    Foreground="{DynamicResource TextFillColorPrimaryBrush}"
    WindowBackdropType="Mica"
    WindowCornerPreference="Round"
    WindowStartupLocation="CenterScreen">

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
        </Grid.RowDefinitions>

        <ui:TitleBar Grid.Row="0" Title="{Binding ViewModel.ApplicationTitle}" CloseWindowByDoubleClickOnIcon="True">
            <ui:TitleBar.Icon>
                <ui:ImageIcon Source="pack://application:,,,/Assets/icon.ico" />
            </ui:TitleBar.Icon>
        </ui:TitleBar>

        <ui:NavigationView
            x:Name="RootNavigation"
            Grid.Row="1"
            Padding="0"
            IsBackButtonVisible="Collapsed"
            IsPaneOpen="False"
            MenuItemsSource="{Binding ViewModel.MenuItems, Mode=OneWay}"
            FooterMenuItemsSource="{Binding ViewModel.FooterMenuItems, Mode=OneWay}"
            PaneDisplayMode="Top">
            <ui:NavigationView.ContentOverlay>
                <Grid x:Name="ContentOverlayGrid">
                    <ui:ProgressRing IsIndeterminate="True" VerticalAlignment="Center" HorizontalAlignment="Center"
                                 Visibility="{Binding ViewModel.IsGlobalLoading, Converter={StaticResource BooleanToVisibilityConverter}, FallbackValue=Collapsed}"/>
                </Grid>
            </ui:NavigationView.ContentOverlay>
        </ui:NavigationView>

        <ContentPresenter x:Name="RootContentDialog" Grid.RowSpan="2" />

    </Grid>
</ui:FluentWindow>
/// Windows End of MainWindow.xaml ///

/// Windows Start of MainWindow.xaml.cs ///
﻿using Wpf.Ui.Appearance;

namespace shlauncher.Views.Windows
{
    public partial class MainWindow : INavigationWindow
    {
        public MainWindowViewModel ViewModel { get; }

        public MainWindow(
            MainWindowViewModel viewModel,
            INavigationViewPageProvider navigationViewPageProvider,
            INavigationService navigationService,
            IThemeService themeService)
        {
            ViewModel = viewModel;
            DataContext = this;

            themeService.SetTheme(ApplicationTheme.Dark);

            InitializeComponent();
            SetPageService(navigationViewPageProvider);
            navigationService.SetNavigationControl(RootNavigation);
        }

        public INavigationView GetNavigation() => RootNavigation;

        public bool Navigate(Type pageType) => RootNavigation.Navigate(pageType);

        public void SetPageService(INavigationViewPageProvider navigationViewPageProvider) =>
            RootNavigation.SetPageProviderService(navigationViewPageProvider);

        public void ShowWindow() => Show();

        public void CloseWindow() => Close();

        public void SetServiceProvider(IServiceProvider serviceProvider)
        {
            // This method is part of the interface.
            // WPF UI's default NavigationWindow implementation might use this
            // internally if needed, or it's for extensibility.
            // For now, a basic implementation or even throwing NotImplementedException
            // if you don't directly use it. However, to satisfy the interface:
            // RootNavigation.SetServiceProvider(serviceProvider); // This line might not be needed if SetPageProviderService is used
        }

        protected override void OnClosed(EventArgs e)
        {
            base.OnClosed(e);
            System.Windows.Application.Current.Shutdown();
        }
    }
}
/// Windows End of MainWindow.xaml.cs ///

/// Windows Start of MainWindow.xaml ///
﻿<ui:FluentWindow
    x:Class="shlauncher.Views.Windows.MainWindow"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:ui="http://schemas.lepo.co/wpfui/2022/xaml"
    xmlns:local="clr-namespace:shlauncher.Views.Windows"
    xmlns:vmsWin="clr-namespace:shlauncher.ViewModels.Windows"
    mc:Ignorable="d"
    Title="{Binding ViewModel.ApplicationTitle, Mode=OneWay}"
    Width="860"
    Height="600"
    MinWidth="700"
    MinHeight="500"
    d:DataContext="{d:DesignInstance Type=vmsWin:MainWindowViewModel, IsDesignTimeCreatable=True}"
    ui:Design.Background="{DynamicResource ApplicationBackgroundBrush}"
    ui:Design.Foreground="{DynamicResource TextFillColorPrimaryBrush}"
    ExtendsContentIntoTitleBar="True"
    Foreground="{DynamicResource TextFillColorPrimaryBrush}"
    WindowBackdropType="Mica"
    WindowCornerPreference="Round"
    WindowStartupLocation="CenterScreen">

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
        </Grid.RowDefinitions>

        <ui:TitleBar Grid.Row="0" Title="{Binding ViewModel.ApplicationTitle}" CloseWindowByDoubleClickOnIcon="True">
            <ui:TitleBar.Icon>
                <ui:ImageIcon Source="pack://application:,,,/Assets/icon.ico" />
            </ui:TitleBar.Icon>
        </ui:TitleBar>

        <ui:NavigationView
            x:Name="RootNavigation"
            Grid.Row="1"
            Padding="0"
            IsBackButtonVisible="Collapsed"
            IsPaneOpen="False"
            MenuItemsSource="{Binding ViewModel.MenuItems, Mode=OneWay}"
            FooterMenuItemsSource="{Binding ViewModel.FooterMenuItems, Mode=OneWay}"
            PaneDisplayMode="Top">
            <ui:NavigationView.ContentOverlay>
                <Grid x:Name="ContentOverlayGrid">
                    <ui:ProgressRing IsIndeterminate="True" VerticalAlignment="Center" HorizontalAlignment="Center"
                                 Visibility="{Binding ViewModel.IsGlobalLoading, Converter={StaticResource BooleanToVisibilityConverter}, FallbackValue=Collapsed}"/>
                </Grid>
            </ui:NavigationView.ContentOverlay>
        </ui:NavigationView>

        <ContentPresenter x:Name="RootContentDialog" Grid.RowSpan="2" />

    </Grid>
</ui:FluentWindow>
/// Windows End of MainWindow.xaml ///

/// Windows Start of MainWindow.xaml.cs ///
﻿using Wpf.Ui.Appearance;

namespace shlauncher.Views.Windows
{
    public partial class MainWindow : INavigationWindow
    {
        public MainWindowViewModel ViewModel { get; }

        public MainWindow(
            MainWindowViewModel viewModel,
            INavigationViewPageProvider navigationViewPageProvider,
            INavigationService navigationService,
            IThemeService themeService)
        {
            ViewModel = viewModel;
            DataContext = this;

            themeService.SetTheme(ApplicationTheme.Dark);

            InitializeComponent();
            SetPageService(navigationViewPageProvider);
            navigationService.SetNavigationControl(RootNavigation);
        }

        public INavigationView GetNavigation() => RootNavigation;

        public bool Navigate(Type pageType) => RootNavigation.Navigate(pageType);

        public void SetPageService(INavigationViewPageProvider navigationViewPageProvider) =>
            RootNavigation.SetPageProviderService(navigationViewPageProvider);

        public void ShowWindow() => Show();

        public void CloseWindow() => Close();

        public void SetServiceProvider(IServiceProvider serviceProvider)
        {
            // This method is part of the interface.
            // WPF UI's default NavigationWindow implementation might use this
            // internally if needed, or it's for extensibility.
            // For now, a basic implementation or even throwing NotImplementedException
            // if you don't directly use it. However, to satisfy the interface:
            // RootNavigation.SetServiceProvider(serviceProvider); // This line might not be needed if SetPageProviderService is used
        }

        protected override void OnClosed(EventArgs e)
        {
            base.OnClosed(e);
            System.Windows.Application.Current.Shutdown();
        }
    }
}
/// Windows End of MainWindow.xaml.cs ///

/// Pages Start of LoadingPage.xaml ///
<Page
    x:Class="shlauncher.Views.Pages.LoadingPage"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:ui="http://schemas.lepo.co/wpfui/2022/xaml"
    xmlns:vms="clr-namespace:shlauncher.ViewModels.Pages"
    mc:Ignorable="d"
    d:DataContext="{d:DesignInstance Type=vms:LoadingViewModel, IsDesignTimeCreatable=False}"
    ui:Design.Background="{DynamicResource ApplicationBackgroundBrush}">
    <Grid>
        <ui:ProgressRing IsIndeterminate="True" VerticalAlignment="Center" HorizontalAlignment="Center"/>
    </Grid>
</Page>
/// Pages End of LoadingPage.xaml ///

/// Pages Start of LoadingPage.xaml.cs ///
﻿namespace shlauncher.Views.Pages
{
    public partial class LoadingPage : INavigableView<ViewModels.Pages.LoadingViewModel>
    {
        public ViewModels.Pages.LoadingViewModel ViewModel { get; }

        public LoadingPage(ViewModels.Pages.LoadingViewModel viewModel)
        {
            ViewModel = viewModel;
            DataContext = this;
            InitializeComponent();
        }
    }
}
/// Pages End of LoadingPage.xaml.cs ///

/// Pages Start of MainLauncherPage.xaml ///
<Page
    x:Class="shlauncher.Views.Pages.MainLauncherPage"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:ui="http://schemas.lepo.co/wpfui/2022/xaml"
    xmlns:vms="clr-namespace:shlauncher.ViewModels.Pages"
    xmlns:models="clr-namespace:shlauncher.Models"
    mc:Ignorable="d"
    d:DataContext="{d:DesignInstance Type=vms:MainLauncherViewModel, IsDesignTimeCreatable=False}"
    ui:Design.Background="{DynamicResource ApplicationBackgroundBrush}"
    Foreground="{DynamicResource TextFillColorPrimaryBrush}"
    ScrollViewer.CanContentScroll="False">
    <Grid Margin="0">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>

        <Border Grid.Row="0" Padding="24,16,24,12" BorderBrush="{DynamicResource ControlStrokeColorDefaultBrush}" BorderThickness="0,0,0,1">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>

                <StackPanel Grid.Column="0" Orientation="Horizontal" VerticalAlignment="Center">
                    <Border Width="32" Height="32" CornerRadius="16" Background="{DynamicResource AccentFillColorDefaultBrush}" Margin="0,0,10,0">
                        <TextBlock Text="{Binding ViewModel.UserAvatarFallback}" FontSize="16" FontWeight="SemiBold"
                                   HorizontalAlignment="Center" VerticalAlignment="Center"
                                   Foreground="{DynamicResource TextOnAccentFillColorPrimaryBrush}"/>
                    </Border>
                    <TextBlock Text="{Binding ViewModel.UserLogin}" FontSize="15" FontWeight="SemiBold"
                               VerticalAlignment="Center" Foreground="{DynamicResource TextFillColorPrimaryBrush}"/>
                </StackPanel>

                <StackPanel Grid.Column="2" Orientation="Horizontal" VerticalAlignment="Center">
                    <ui:Button Command="{Binding ViewModel.NavigateToSettingsCommand}" Appearance="Transparent" Padding="6">
                        <ui:SymbolIcon Symbol="Settings24" FontSize="16"/>
                    </ui:Button>
                    <ui:Button Content="Logout" 
                        Command="{Binding ViewModel.LogoutCommand}"
                        Appearance="Transparent" Margin="8,0,0,0" FontSize="14" FontWeight="Medium"
                        Foreground="{DynamicResource TextFillColorSecondaryBrush}"/>
                </StackPanel>
            </Grid>
        </Border>

        <Grid Grid.Row="1" Margin="24,16,24,24">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="280" MinWidth="250"/>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="*" MinWidth="300"/>
            </Grid.ColumnDefinitions>

            <ScrollViewer Grid.Column="0" VerticalScrollBarVisibility="Auto" Margin="0,0,20,0" Padding="0,0,10,0">
                <ItemsControl ItemsSource="{Binding ViewModel.UpdateLogs}">
                    <ItemsControl.ItemTemplate>
                        <DataTemplate DataType="{x:Type models:SupabaseUpdateLogEntry}">
                            <StackPanel Margin="0,0,0,24">
                                <TextBlock Text="{Binding Title}" FontSize="16" FontWeight="SemiBold" Foreground="{DynamicResource SystemAccentColorPrimaryBrush}" Margin="0,0,0,6"/>
                                <ItemsControl ItemsSource="{Binding Changes}">
                                    <ItemsControl.ItemTemplate>
                                        <DataTemplate>
                                            <DockPanel LastChildFill="True" Margin="8,0,0,3">
                                                <TextBlock DockPanel.Dock="Left" Text="• " Foreground="{DynamicResource TextFillColorSecondaryBrush}" FontSize="14" Margin="0,0,4,0"/>
                                                <TextBlock Text="{Binding}" Foreground="{DynamicResource TextFillColorSecondaryBrush}" FontSize="14" TextWrapping="Wrap"/>
                                            </DockPanel>
                                        </DataTemplate>
                                    </ItemsControl.ItemTemplate>
                                </ItemsControl>
                            </StackPanel>
                        </DataTemplate>
                    </ItemsControl.ItemTemplate>
                </ItemsControl>
            </ScrollViewer>

            <Border Grid.Column="1" Width="1" Background="{DynamicResource DividerStrokeColorDefaultBrush}" VerticalAlignment="Stretch" Margin="0,0,20,0"/>

            <Grid Grid.Column="2">
                <Grid.RowDefinitions>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>

                <StackPanel Grid.Row="0">
                    <Border Height="180" CornerRadius="4" Margin="0,0,0,20" Background="{DynamicResource ControlFillColorSecondaryBrush}" ClipToBounds="True">
                        <Image Source="pack://application:,,,/Assets/launcher_banner.png" Stretch="Uniform" />
                    </Border>

                    <ui:Card Padding="16">
                        <StackPanel>
                            <Grid Margin="0,0,0,8">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="*"/>
                                </Grid.ColumnDefinitions>
                                <TextBlock Grid.Column="0" Text="Patch" Foreground="{DynamicResource TextFillColorSecondaryBrush}" FontSize="14"/>
                                <TextBlock Grid.Column="1" Text="{Binding ViewModel.PatchVersion}" FontSize="14" FontWeight="SemiBold" HorizontalAlignment="Right"/>
                            </Grid>
                            <Grid Margin="0,0,0,8">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="*"/>
                                </Grid.ColumnDefinitions>
                                <TextBlock Grid.Column="0" Text="Status" Foreground="{DynamicResource TextFillColorSecondaryBrush}" FontSize="14"/>
                                <TextBlock Grid.Column="1" Text="{Binding ViewModel.VersionStatus}" Foreground="{Binding ViewModel.VersionStatus, Converter={StaticResource VersionStatusToColorConverter}}" FontSize="14" FontWeight="SemiBold" HorizontalAlignment="Right"/>
                            </Grid>
                            <Grid Margin="0,0,0,20">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="*"/>
                                </Grid.ColumnDefinitions>
                                <TextBlock Grid.Column="0" Text="License" Foreground="{DynamicResource TextFillColorSecondaryBrush}" FontSize="14"/>
                                <TextBlock Grid.Column="1" Text="{Binding ViewModel.LicenseType}" Foreground="{DynamicResource SystemAccentColorPrimaryBrush}" FontSize="14" FontWeight="SemiBold" HorizontalAlignment="Right"/>
                            </Grid>

                            <ui:Button Content="▶ PLAY" 
                                       Icon="{ui:SymbolIcon Play24}"
                                       Command="{Binding ViewModel.PlayCommand}" 
                                       Appearance="Primary"
                                       HorizontalAlignment="Stretch"
                                       Height="40"
                                       FontSize="16"
                                       FontWeight="SemiBold"/>
                        </StackPanel>
                    </ui:Card>
                </StackPanel>
            </Grid>
        </Grid>
    </Grid>
</Page>
/// Pages End of MainLauncherPage.xaml ///

/// Pages Start of MainLauncherPage.xaml.cs ///
﻿namespace shlauncher.Views.Pages
{
    public partial class MainLauncherPage : INavigableView<ViewModels.Pages.MainLauncherViewModel>
    {
        public ViewModels.Pages.MainLauncherViewModel ViewModel { get; }

        public MainLauncherPage(ViewModels.Pages.MainLauncherViewModel viewModel)
        {
            ViewModel = viewModel;
            DataContext = this;
            InitializeComponent();
        }
    }
}
/// Pages End of MainLauncherPage.xaml.cs ///

/// Pages Start of SettingsPage.xaml ///
﻿<Page
    x:Class="shlauncher.Views.Pages.SettingsPage"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:ui="http://schemas.lepo.co/wpfui/2022/xaml"
    xmlns:helpers="clr-namespace:shlauncher.Helpers"
    xmlns:vms="clr-namespace:shlauncher.ViewModels.Pages"
    mc:Ignorable="d"
    d:DataContext="{d:DesignInstance Type=vms:SettingsViewModel, IsDesignTimeCreatable=False}"
    ui:Design.Background="{DynamicResource ApplicationBackgroundBrush}"
    Foreground="{DynamicResource TextFillColorPrimaryBrush}">
    <Page.Resources>
        <helpers:EnumToBooleanConverter x:Key="EnumToBooleanConverter" />
    </Page.Resources>

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>

        <Grid Grid.Row="0" Margin="24,16,24,0">
            <ui:Button Command="{Binding ViewModel.GoBackCommand}" Appearance="Transparent" HorizontalAlignment="Left" VerticalAlignment="Center">
                <ui:SymbolIcon Symbol="ArrowLeft24" FontSize="20" />
            </ui:Button>
            <TextBlock Text="Settings" FontSize="24" FontWeight="SemiBold" HorizontalAlignment="Center" VerticalAlignment="Center"/>
        </Grid>

        <ScrollViewer Grid.Row="1" VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Disabled" Margin="0,10,0,0">
            <StackPanel Margin="24,16,24,24">
                <TextBlock
                    FontSize="20" 
                    FontWeight="SemiBold"
                    Text="Personalization" Margin="0,0,0,16"/>
                <TextBlock Text="Theme" Margin="0,0,0,8" Foreground="{DynamicResource TextFillColorSecondaryBrush}"/>

                <RadioButton
                    Margin="0,6,0,0"
                    Command="{Binding ViewModel.ChangeThemeCommand, Mode=OneWay}"
                    CommandParameter="theme_light"
                    Content="Light"
                    GroupName="themeSelect"
                    IsChecked="{Binding ViewModel.CurrentTheme, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter=Light, Mode=OneWay}" />
                <RadioButton
                    Margin="0,8,0,0"
                    Command="{Binding ViewModel.ChangeThemeCommand, Mode=OneWay}"
                    CommandParameter="theme_dark"
                    Content="Dark"
                    GroupName="themeSelect"
                    IsChecked="{Binding ViewModel.CurrentTheme, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter=Dark, Mode=OneWay}" />

                <ui:HyperlinkButton NavigateUri="https://wpfui.lepo.co/" Content="WPF UI Documentation" Margin="0,20,0,0"/>

                <TextBlock
                    Margin="0,32,0,0"
                    FontSize="20"
                    FontWeight="SemiBold"
                    Text="Account" />
                <TextBlock Text="{Binding ViewModel.AppVersion, Mode=OneWay}" Margin="0,12,0,16" Foreground="{DynamicResource TextFillColorTertiaryBrush}"/>

                <ui:Button Content="Logout" 
                           Command="{Binding ViewModel.LogoutCommand}" 
                           Appearance="Secondary" 
                           HorizontalAlignment="Left" 
                           Width="120"
                           Margin="0,8,0,0"/>
            </StackPanel>
        </ScrollViewer>
    </Grid>
</Page>
/// Pages End of SettingsPage.xaml ///

/// Pages Start of SettingsPage.xaml.cs ///
﻿namespace shlauncher.Views.Pages
{
    public partial class SettingsPage : INavigableView<ViewModels.Pages.SettingsViewModel>
    {
        public ViewModels.Pages.SettingsViewModel ViewModel { get; }

        public SettingsPage(ViewModels.Pages.SettingsViewModel viewModel)
        {
            ViewModel = viewModel;
            DataContext = this;
            InitializeComponent();
        }
    }
}
/// Pages End of SettingsPage.xaml.cs ///

/// Pages Start of SignInPage.xaml ///
<Page
    x:Class="shlauncher.Views.Pages.SignInPage"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:ui="http://schemas.lepo.co/wpfui/2022/xaml"
    xmlns:vms="clr-namespace:shlauncher.ViewModels.Pages"
    mc:Ignorable="d"
    d:DataContext="{d:DesignInstance Type=vms:SignInViewModel, IsDesignTimeCreatable=False}"
    ui:Design.Background="{DynamicResource ApplicationBackgroundBrush}"
    Foreground="{DynamicResource TextFillColorPrimaryBrush}">
    <Grid VerticalAlignment="Center" HorizontalAlignment="Center">
        <StackPanel Width="320" Margin="20">
            <TextBlock Text="Sign in" FontSize="28" FontWeight="SemiBold" Margin="0,0,0,5"/>
            <TextBlock Text="To log in, enter your credentials." Foreground="{DynamicResource TextFillColorSecondaryBrush}" FontSize="14" Margin="0,0,0,25"/>

            <TextBlock Text="Username or Email" FontSize="14" FontWeight="Medium" Margin="0,0,0,5"/>
            <ui:TextBox PlaceholderText="Enter your username or email"
                        Text="{Binding ViewModel.Username, UpdateSourceTrigger=PropertyChanged}" 
                        Margin="0,0,0,15"
                        Icon="{ui:SymbolIcon Person24}"/>

            <TextBlock Text="Password" FontSize="14" FontWeight="Medium" Margin="0,0,0,5"/>
            <ui:PasswordBox PlaceholderText="Enter your password"
                            Password="{Binding ViewModel.Password, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                            Margin="0,0,0,20"
                            Icon="{ui:SymbolIcon Password24}"/>

            <CheckBox Content="Remember me" IsChecked="{Binding ViewModel.RememberMe}" Margin="0,0,0,25"/>

            <ui:Button Content="LOGIN"
                       Command="{Binding ViewModel.LoginCommand}"
                       Appearance="Primary"
                       HorizontalAlignment="Stretch"
                       Height="36"
                       Margin="0,0,0,15"/>

            <ui:Button Content="Don't have an account?" 
                       Command="{Binding ViewModel.RegisterCommand}"
                       Appearance="Transparent"
                       HorizontalAlignment="Center"
                       FontSize="13"
                       Foreground="{DynamicResource TextFillColorSecondaryBrush}"/>
        </StackPanel>
    </Grid>
</Page>
/// Pages End of SignInPage.xaml ///

/// Pages Start of SignInPage.xaml.cs ///
﻿namespace shlauncher.Views.Pages
{
    public partial class SignInPage : INavigableView<ViewModels.Pages.SignInViewModel>
    {
        public ViewModels.Pages.SignInViewModel ViewModel { get; }

        public SignInPage(ViewModels.Pages.SignInViewModel viewModel)
        {
            ViewModel = viewModel;
            DataContext = this;
            InitializeComponent();
        }

        private void PasswordBox_PasswordChanged(object sender, System.Windows.RoutedEventArgs e)
        {
            if (sender is PasswordBox passwordBox)
            {
                ViewModel.Password = passwordBox.Password;
            }
        }
    }
}
/// Pages End of SignInPage.xaml.cs ///

/// Pages Start of WelcomePage.xaml ///
<Page
    x:Class="shlauncher.Views.Pages.WelcomePage"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:ui="http://schemas.lepo.co/wpfui/2022/xaml"
    xmlns:vms="clr-namespace:shlauncher.ViewModels.Pages"
    mc:Ignorable="d"
    d:DataContext="{d:DesignInstance Type=vms:WelcomeViewModel, IsDesignTimeCreatable=False}"
    ui:Design.Background="{DynamicResource ApplicationBackgroundBrush}"
    Foreground="{DynamicResource TextFillColorPrimaryBrush}">
    <Grid VerticalAlignment="Center" HorizontalAlignment="Center">
        <StackPanel Width="300" HorizontalAlignment="Center">
            <TextBlock Text="Welcome!" FontSize="32" FontWeight="SemiBold" HorizontalAlignment="Center" Margin="0,0,0,10"/>
            <TextBlock Text="Choose what you want to do" FontSize="16" Foreground="{DynamicResource TextFillColorSecondaryBrush}" HorizontalAlignment="Center" Margin="0,0,0,30" TextAlignment="Center"/>
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>
                <ui:Button Grid.Column="0" Content="SIGN IN" 
                           Command="{Binding ViewModel.NavigateToSignInCommand}" 
                           Appearance="Primary"
                           HorizontalAlignment="Stretch" 
                           Height="36"
                           Margin="0,0,5,0"/>
                <ui:Button Grid.Column="2" Content="BUY" 
                           Command="{Binding ViewModel.BuyCommand}" 
                           Appearance="Secondary"
                           HorizontalAlignment="Stretch"
                           Height="36"
                           Margin="5,0,0,0"/>
            </Grid>
        </StackPanel>
    </Grid>
</Page>
/// Pages End of WelcomePage.xaml ///

/// Pages Start of WelcomePage.xaml.cs ///
﻿namespace shlauncher.Views.Pages
{
    public partial class WelcomePage : INavigableView<ViewModels.Pages.WelcomeViewModel>
    {
        public ViewModels.Pages.WelcomeViewModel ViewModel { get; }

        public WelcomePage(ViewModels.Pages.WelcomeViewModel viewModel)
        {
            ViewModel = viewModel;
            DataContext = this;
            InitializeComponent();
        }
    }
}
/// Pages End of WelcomePage.xaml.cs ///

/// ViewModels Start of LauncherBaseViewModel.cs ///
﻿using System.Threading.Tasks;

namespace shlauncher.ViewModels
{
    public abstract partial class LauncherBaseViewModel : ObservableObject, INavigationAware
    {
        [ObservableProperty]
        private string _pageTitle = string.Empty;

        public virtual Task OnNavigatedToAsync()
        {
            return Task.CompletedTask;
        }

        public virtual Task OnNavigatedFromAsync()
        {
            return Task.CompletedTask;
        }
    }
}
/// ViewModels End of LauncherBaseViewModel.cs ///

/// Pages Start of LoadingViewModel.cs ///
﻿using System.Threading.Tasks;

namespace shlauncher.ViewModels.Pages
{
    public partial class LoadingViewModel : LauncherBaseViewModel // INavigationAware is inherited
    {
        private readonly INavigationService _navigationService;
        private readonly MainWindowViewModel _mainWindowViewModel;

        public LoadingViewModel(INavigationService navigationService, MainWindowViewModel mainWindowViewModel)
        {
            _navigationService = navigationService;
            _mainWindowViewModel = mainWindowViewModel;
            PageTitle = "Loading - SHLauncher";
        }

        public override async Task OnNavigatedToAsync() // Changed from (object? parameter = null)
        {
            _mainWindowViewModel.IsGlobalLoading = true;
            await Task.Delay(1500);
            _navigationService.Navigate(typeof(Views.Pages.MainLauncherPage));
            _mainWindowViewModel.IsGlobalLoading = false;
            await base.OnNavigatedToAsync();
        }
    }
}
/// Pages End of LoadingViewModel.cs ///

/// Pages Start of MainLauncherViewModel.cs ///
﻿using System.Collections.ObjectModel;
using System.Threading.Tasks;
using System.IO;
using System.Diagnostics;
using System.Net.Http;
using System.Text.Json;
using System.Linq;
using System.Collections.Generic;

namespace shlauncher.ViewModels.Pages
{
    public partial class MainLauncherViewModel : LauncherBaseViewModel
    {
        private readonly INavigationService _navigationService;
        private readonly CurrentUserSessionService _sessionService;
        private readonly SupabaseService _supabaseService;
        private readonly HttpClient _httpClient;
        private readonly MainWindowViewModel _mainWindowViewModel;
        private readonly AuthService _authService;

        [ObservableProperty]
        private string? _userLogin;

        [ObservableProperty]
        private string? _userAvatarFallback;

        [ObservableProperty]
        private string _patchVersion = "Unknown";

        [ObservableProperty]
        private string _versionStatus = "Checking...";

        [ObservableProperty]
        private string _licenseType = "N/A";

        public ObservableCollection<Models.SupabaseUpdateLogEntry> UpdateLogs { get; } = new();

        public MainLauncherViewModel(INavigationService navigationService, CurrentUserSessionService sessionService, SupabaseService supabaseService, MainWindowViewModel mainWindowViewModel, AuthService authService)
        {
            _navigationService = navigationService;
            _sessionService = sessionService;
            _supabaseService = supabaseService;
            _mainWindowViewModel = mainWindowViewModel;
            _authService = authService;
            _httpClient = new HttpClient();
            PageTitle = "Home - SHLauncher";
        }

        public override async Task OnNavigatedToAsync()
        {
            _mainWindowViewModel.IsGlobalLoading = true;
            LoadUserDataAndLicense();
            await FetchAndUpdateLogs();
            await CheckVersion();
            _mainWindowViewModel.IsGlobalLoading = false;
            await base.OnNavigatedToAsync();
        }

        private void LoadUserDataAndLicense()
        {
            if (_sessionService.IsUserLoggedIn && _sessionService.CurrentUser != null)
            {
                UserLogin = _sessionService.CurrentUser.Login;
                if (!string.IsNullOrEmpty(UserLogin))
                {
                    UserAvatarFallback = UserLogin.Length > 0 ? UserLogin[0].ToString().ToUpper() : "U";
                }
                else
                {
                    UserLogin = "User";
                    UserAvatarFallback = "U";
                }
                LicenseType = _sessionService.CurrentUser.IsBuyer ? "Buyer" : "N/A";
            }
            else
            {
                UserLogin = "Guest";
                UserAvatarFallback = "G";
                LicenseType = "N/A";
                _navigationService.Navigate(typeof(Views.Pages.SignInPage));
            }
        }

        private async Task FetchAndUpdateLogs()
        {
            var logs = await _supabaseService.GetUpdateLogsAsync();
            System.Windows.Application.Current.Dispatcher.Invoke(() =>
            {
                UpdateLogs.Clear();
                if (logs != null)
                {
                    foreach (var logEntry in logs)
                    {
                        UpdateLogs.Add(logEntry);
                    }
                }
                else
                {
                    UpdateLogs.Add(new Models.SupabaseUpdateLogEntry { Title = "INFO", Changes = new List<string> { "Could not load update logs." } });
                }
            });
        }

        private async Task CheckVersion()
        {
            VersionStatus = "Checking...";
            try
            {
                string cdragonVersionString = "";
                try
                {
                    var responseCdragon = await _httpClient.GetAsync("https://raw.communitydragon.org/latest/content-metadata.json");
                    responseCdragon.EnsureSuccessStatusCode();
                    string jsonCdragon = await responseCdragon.Content.ReadAsStringAsync();
                    using var docCdragon = JsonDocument.Parse(jsonCdragon);
                    if (docCdragon.RootElement.TryGetProperty("version", out JsonElement versionElement))
                    {
                        var fullCdragonVersion = versionElement.GetString();
                        var versionParts = fullCdragonVersion?.Split('.').Take(2);
                        if (versionParts != null)
                        {
                            cdragonVersionString = string.Join(".", versionParts);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Debug.WriteLine($"Error fetching CDRAGON version: {ex.Message}");
                    PatchVersion = "DB Error";
                    VersionStatus = "Error";
                    return;
                }

                if (string.IsNullOrEmpty(cdragonVersionString))
                {
                    PatchVersion = "N/A";
                    VersionStatus = "Unknown";
                    return;
                }

                PatchVersion = cdragonVersionString;

                string supabasePatchVersionString = "";
                try
                {
                    byte[]? fileBytes = await _supabaseService.DownloadFileBytesAsync("version", "patch.json");

                    if (fileBytes == null || fileBytes.Length == 0)
                    {
                        VersionStatus = "Local N/A";
                        return;
                    }
                    string jsonSupabase = System.Text.Encoding.UTF8.GetString(fileBytes);

                    using var docSupabase = JsonDocument.Parse(jsonSupabase);
                    if (docSupabase.RootElement.TryGetProperty("version", out JsonElement supabaseVersionElement))
                    {
                        var fullSupabaseVersion = supabaseVersionElement.GetString();
                        var versionParts = fullSupabaseVersion?.Split('.').Take(2);
                        if (versionParts != null)
                        {
                            supabasePatchVersionString = string.Join(".", versionParts);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Debug.WriteLine($"Error fetching/parsing Supabase patch.json: {ex.Message}");
                    VersionStatus = "Local Error";
                    return;
                }

                if (string.IsNullOrEmpty(supabasePatchVersionString))
                {
                    VersionStatus = "Local N/A";
                    return;
                }

                VersionStatus = cdragonVersionString.Equals(supabasePatchVersionString, StringComparison.OrdinalIgnoreCase) ? "UPDATED" : "OUTDATED";
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"Error checking version: {ex.Message}");
                PatchVersion = "Error";
                VersionStatus = "Error";
            }
        }

        [RelayCommand]
        private async Task Play()
        {
            string mainAppExecutableName = "SkinHunterWPF.exe";
            string launcherDirectory = AppDomain.CurrentDomain.BaseDirectory;
            string mainAppPath = Path.Combine(launcherDirectory, mainAppExecutableName);

            if (!File.Exists(mainAppPath))
            {
                try
                {
                    DirectoryInfo? currentDirInfo = new DirectoryInfo(launcherDirectory);
                    DirectoryInfo? binDir = currentDirInfo.Parent?.Parent;
                    DirectoryInfo? projectLauncherDir = binDir?.Parent;
                    DirectoryInfo? solutionDir = projectLauncherDir?.Parent;

                    if (solutionDir != null)
                    {
                        string skinHunterWPFProjectDirName = "SkinHunterWPF";
                        string targetFramework = currentDirInfo.Name;
                        string configuration = currentDirInfo.Parent?.Name ?? "Debug";

                        string devMainAppPath = Path.Combine(solutionDir.FullName, skinHunterWPFProjectDirName, "bin", configuration, targetFramework, mainAppExecutableName);
                        if (File.Exists(devMainAppPath))
                        {
                            mainAppPath = devMainAppPath;
                        }
                    }
                }
                catch (Exception ex)
                {
                    Debug.WriteLine($"Error during development path discovery: {ex.Message}");
                }
            }

            if (File.Exists(mainAppPath))
            {
                try
                {
                    ProcessStartInfo startInfo = new ProcessStartInfo(mainAppPath)
                    {
                        UseShellExecute = true
                    };
                    Process.Start(startInfo);
                    System.Windows.Application.Current.Shutdown();
                }
                catch (Exception ex)
                {
                    var msgBox = new Wpf.Ui.Controls.MessageBox
                    {
                        Title = "Launch Error",
                        Content = $"Failed to start main application:\n{ex.Message}",
                        CloseButtonText = "OK"
                    };
                    await msgBox.ShowDialogAsync();
                }
            }
            else
            {
                var msgBox = new Wpf.Ui.Controls.MessageBox
                {
                    Title = "Application Not Found",
                    Content = $"{mainAppExecutableName} not found.\nSearched at: {mainAppPath}\n(And common development paths)\nPlease ensure it is in the same directory as the launcher or build output paths are correctly configured.",
                    CloseButtonText = "OK"
                };
                await msgBox.ShowDialogAsync();
            }
        }

        [RelayCommand]
        private void Logout()
        {
            _sessionService.ClearCurrentUser();
            _authService.ClearRememberedUser();
            _navigationService.Navigate(typeof(Views.Pages.WelcomePage));
        }

        [RelayCommand]
        private void NavigateToSettings()
        {
            _navigationService.Navigate(typeof(Views.Pages.SettingsPage));
        }
    }
}
/// Pages End of MainLauncherViewModel.cs ///

/// Pages Start of SettingsViewModel.cs ///
﻿using System.Threading.Tasks;

namespace shlauncher.ViewModels.Pages
{
    public partial class SettingsViewModel : ObservableObject, INavigationAware
    {
        private bool _isInitialized = false;

        [ObservableProperty]
        private string _appVersion = String.Empty;

        [ObservableProperty]
        private ApplicationTheme _currentTheme = ApplicationTheme.Unknown;

        private readonly CurrentUserSessionService _sessionService;
        private readonly INavigationService _navigationService;
        private readonly AuthService _authService;

        public SettingsViewModel(CurrentUserSessionService sessionService, INavigationService navigationService, AuthService authService)
        {
            _sessionService = sessionService;
            _navigationService = navigationService;
            _authService = authService;
        }

        public Task OnNavigatedToAsync()
        {
            if (!_isInitialized)
                InitializeViewModel();
            return Task.CompletedTask;
        }

        public Task OnNavigatedFromAsync()
        {
            _isInitialized = false;
            return Task.CompletedTask;
        }

        private void InitializeViewModel()
        {
            CurrentTheme = ApplicationThemeManager.GetAppTheme();
            AppVersion = $"SHLauncher - {GetAssemblyVersion()}";
            _isInitialized = true;
        }

        private string GetAssemblyVersion()
        {
            return System.Reflection.Assembly.GetExecutingAssembly().GetName().Version?.ToString()
                ?? String.Empty;
        }

        [RelayCommand]
        private void OnChangeTheme(string parameter)
        {
            switch (parameter)
            {
                case "theme_light":
                    if (CurrentTheme == ApplicationTheme.Light)
                        break;

                    ApplicationThemeManager.Apply(ApplicationTheme.Light);
                    CurrentTheme = ApplicationTheme.Light;

                    break;

                default:
                    if (CurrentTheme == ApplicationTheme.Dark)
                        break;

                    ApplicationThemeManager.Apply(ApplicationTheme.Dark);
                    CurrentTheme = ApplicationTheme.Dark;

                    break;
            }
        }

        [RelayCommand]
        private void Logout()
        {
            _sessionService.ClearCurrentUser();
            _authService.ClearRememberedUser();
            _navigationService.Navigate(typeof(Views.Pages.WelcomePage));
        }

        [RelayCommand]
        private void GoBack()
        {
            var navigationControl = _navigationService.GetNavigationControl();
            if (navigationControl != null && navigationControl.CanGoBack)
            {
                _navigationService.GoBack();
            }
        }
    }
}
/// Pages End of SettingsViewModel.cs ///

/// Pages Start of SignInViewModel.cs ///
﻿using System.Threading.Tasks;
using System.Diagnostics;

namespace shlauncher.ViewModels.Pages
{
    public partial class SignInViewModel : LauncherBaseViewModel
    {
        private readonly INavigationService _navigationService;
        private readonly AuthService _authService;
        private readonly CurrentUserSessionService _sessionService;
        private readonly MainWindowViewModel _mainWindowViewModel;

        [ObservableProperty]
        private string? _username;

        private string? _password;
        public string? Password
        {
            get => _password;
            set => SetProperty(ref _password, value);
        }

        [ObservableProperty]
        private bool _rememberMe;

        public SignInViewModel(INavigationService navigationService, AuthService authService, CurrentUserSessionService sessionService, MainWindowViewModel mainWindowViewModel)
        {
            _navigationService = navigationService;
            _authService = authService;
            _sessionService = sessionService;
            _mainWindowViewModel = mainWindowViewModel;
            PageTitle = "Sign In - SHLauncher";
            LoadRememberedUser();
        }

        private void LoadRememberedUser()
        {
            if (_sessionService.IsUserLoggedIn && _sessionService.CurrentUser != null)
            {
                Username = _sessionService.CurrentUser.Login;
                RememberMe = true;
            }
            else
            {
                var (token, rememberedUsername) = _authService.GetRememberedUser();
                if (!string.IsNullOrEmpty(token) && !string.IsNullOrEmpty(rememberedUsername))
                {
                    Username = rememberedUsername;
                    RememberMe = true;
                }
            }
        }

        [RelayCommand]
        private async Task Login()
        {
            if (string.IsNullOrWhiteSpace(Username) || string.IsNullOrWhiteSpace(Password))
            {
                var msgBox = new Wpf.Ui.Controls.MessageBox
                {
                    Title = "Login Failed",
                    Content = "Please enter both username and password.",
                    CloseButtonText = "OK",
                    PrimaryButtonText = "" // No primary button needed if close is OK
                };
                await msgBox.ShowDialogAsync();
                return;
            }

            _mainWindowViewModel.IsGlobalLoading = true;
            var (success, token, userData, errorMessage) = await _authService.LoginAsync(Username, Password);

            if (success && token != null && userData != null)
            {
                _sessionService.SetCurrentUser(userData, token);
                if (RememberMe)
                {
                    _authService.RememberUser(token, userData.Login!);
                }
                else
                {
                    _authService.ClearRememberedUser();
                }
                _navigationService.Navigate(typeof(Views.Pages.LoadingPage));
            }
            else
            {
                var msgBox = new Wpf.Ui.Controls.MessageBox
                {
                    Title = "Login Failed",
                    Content = errorMessage ?? "Login failed due to an unknown error.",
                    CloseButtonText = "OK"
                };
                await msgBox.ShowDialogAsync();
            }
            _mainWindowViewModel.IsGlobalLoading = false;
        }

        [RelayCommand]
        private void Register()
        {
            try
            {
                Process.Start(new ProcessStartInfo("https://skinhunterv2.vercel.app") { UseShellExecute = true });
            }
            catch (System.Exception ex)
            {
                Debug.WriteLine($"Error opening registration link: {ex.Message}");
                var msgBox = new Wpf.Ui.Controls.MessageBox
                {
                    Title = "Error",
                    Content = $"Could not open registration page: {ex.Message}",
                    CloseButtonText = "OK"
                };
                _ = msgBox.ShowDialogAsync(); // Fire and forget if not awaiting result
            }
        }

        public override Task OnNavigatedToAsync()
        {
            Password = null;
            LoadRememberedUser();
            return base.OnNavigatedToAsync();
        }
    }
}
/// Pages End of SignInViewModel.cs ///

/// Pages Start of WelcomeViewModel.cs ///
﻿using System.Threading.Tasks;
using System.Diagnostics;

namespace shlauncher.ViewModels.Pages
{
    public partial class WelcomeViewModel : LauncherBaseViewModel
    {
        private readonly INavigationService _navigationService;

        public WelcomeViewModel(INavigationService navigationService)
        {
            _navigationService = navigationService;
            PageTitle = "Welcome - SHLauncher";
        }

        [RelayCommand]
        private void NavigateToSignIn()
        {
            _navigationService.Navigate(typeof(Views.Pages.SignInPage));
        }

        [RelayCommand]
        private void Buy()
        {
            try
            {
                Process.Start(new ProcessStartInfo("https://skinhunterv2.vercel.app") { UseShellExecute = true });
            }
            catch (System.Exception ex)
            {
                Debug.WriteLine($"Error opening BUY link: {ex.Message}");
            }
        }
    }
}
/// Pages End of WelcomeViewModel.cs ///

/// Windows Start of MainWindowViewModel.cs ///
﻿using System.Collections.ObjectModel;

namespace shlauncher.ViewModels.Windows
{
    public partial class MainWindowViewModel : ObservableObject
    {
        [ObservableProperty]
        private string _applicationTitle = "Skin-hunter";

        [ObservableProperty]
        private ObservableCollection<object> _menuItems = new();

        [ObservableProperty]
        private ObservableCollection<object> _footerMenuItems = new();

        [ObservableProperty]
        private bool _isGlobalLoading = false;
    }
}
/// Windows End of MainWindowViewModel.cs ///

/// Windows Start of MainWindowViewModel.cs ///
﻿using System.Collections.ObjectModel;

namespace shlauncher.ViewModels.Windows
{
    public partial class MainWindowViewModel : ObservableObject
    {
        [ObservableProperty]
        private string _applicationTitle = "Skin-hunter";

        [ObservableProperty]
        private ObservableCollection<object> _menuItems = new();

        [ObservableProperty]
        private ObservableCollection<object> _footerMenuItems = new();

        [ObservableProperty]
        private bool _isGlobalLoading = false;
    }
}
/// Windows End of MainWindowViewModel.cs ///

/// Pages Start of LoadingViewModel.cs ///
﻿using System.Threading.Tasks;

namespace shlauncher.ViewModels.Pages
{
    public partial class LoadingViewModel : LauncherBaseViewModel // INavigationAware is inherited
    {
        private readonly INavigationService _navigationService;
        private readonly MainWindowViewModel _mainWindowViewModel;

        public LoadingViewModel(INavigationService navigationService, MainWindowViewModel mainWindowViewModel)
        {
            _navigationService = navigationService;
            _mainWindowViewModel = mainWindowViewModel;
            PageTitle = "Loading - SHLauncher";
        }

        public override async Task OnNavigatedToAsync() // Changed from (object? parameter = null)
        {
            _mainWindowViewModel.IsGlobalLoading = true;
            await Task.Delay(1500);
            _navigationService.Navigate(typeof(Views.Pages.MainLauncherPage));
            _mainWindowViewModel.IsGlobalLoading = false;
            await base.OnNavigatedToAsync();
        }
    }
}
/// Pages End of LoadingViewModel.cs ///

/// Pages Start of MainLauncherViewModel.cs ///
﻿using System.Collections.ObjectModel;
using System.Threading.Tasks;
using System.IO;
using System.Diagnostics;
using System.Net.Http;
using System.Text.Json;
using System.Linq;
using System.Collections.Generic;

namespace shlauncher.ViewModels.Pages
{
    public partial class MainLauncherViewModel : LauncherBaseViewModel
    {
        private readonly INavigationService _navigationService;
        private readonly CurrentUserSessionService _sessionService;
        private readonly SupabaseService _supabaseService;
        private readonly HttpClient _httpClient;
        private readonly MainWindowViewModel _mainWindowViewModel;
        private readonly AuthService _authService;

        [ObservableProperty]
        private string? _userLogin;

        [ObservableProperty]
        private string? _userAvatarFallback;

        [ObservableProperty]
        private string _patchVersion = "Unknown";

        [ObservableProperty]
        private string _versionStatus = "Checking...";

        [ObservableProperty]
        private string _licenseType = "N/A";

        public ObservableCollection<Models.SupabaseUpdateLogEntry> UpdateLogs { get; } = new();

        public MainLauncherViewModel(INavigationService navigationService, CurrentUserSessionService sessionService, SupabaseService supabaseService, MainWindowViewModel mainWindowViewModel, AuthService authService)
        {
            _navigationService = navigationService;
            _sessionService = sessionService;
            _supabaseService = supabaseService;
            _mainWindowViewModel = mainWindowViewModel;
            _authService = authService;
            _httpClient = new HttpClient();
            PageTitle = "Home - SHLauncher";
        }

        public override async Task OnNavigatedToAsync()
        {
            _mainWindowViewModel.IsGlobalLoading = true;
            LoadUserDataAndLicense();
            await FetchAndUpdateLogs();
            await CheckVersion();
            _mainWindowViewModel.IsGlobalLoading = false;
            await base.OnNavigatedToAsync();
        }

        private void LoadUserDataAndLicense()
        {
            if (_sessionService.IsUserLoggedIn && _sessionService.CurrentUser != null)
            {
                UserLogin = _sessionService.CurrentUser.Login;
                if (!string.IsNullOrEmpty(UserLogin))
                {
                    UserAvatarFallback = UserLogin.Length > 0 ? UserLogin[0].ToString().ToUpper() : "U";
                }
                else
                {
                    UserLogin = "User";
                    UserAvatarFallback = "U";
                }
                LicenseType = _sessionService.CurrentUser.IsBuyer ? "Buyer" : "N/A";
            }
            else
            {
                UserLogin = "Guest";
                UserAvatarFallback = "G";
                LicenseType = "N/A";
                _navigationService.Navigate(typeof(Views.Pages.SignInPage));
            }
        }

        private async Task FetchAndUpdateLogs()
        {
            var logs = await _supabaseService.GetUpdateLogsAsync();
            System.Windows.Application.Current.Dispatcher.Invoke(() =>
            {
                UpdateLogs.Clear();
                if (logs != null)
                {
                    foreach (var logEntry in logs)
                    {
                        UpdateLogs.Add(logEntry);
                    }
                }
                else
                {
                    UpdateLogs.Add(new Models.SupabaseUpdateLogEntry { Title = "INFO", Changes = new List<string> { "Could not load update logs." } });
                }
            });
        }

        private async Task CheckVersion()
        {
            VersionStatus = "Checking...";
            try
            {
                string cdragonVersionString = "";
                try
                {
                    var responseCdragon = await _httpClient.GetAsync("https://raw.communitydragon.org/latest/content-metadata.json");
                    responseCdragon.EnsureSuccessStatusCode();
                    string jsonCdragon = await responseCdragon.Content.ReadAsStringAsync();
                    using var docCdragon = JsonDocument.Parse(jsonCdragon);
                    if (docCdragon.RootElement.TryGetProperty("version", out JsonElement versionElement))
                    {
                        var fullCdragonVersion = versionElement.GetString();
                        var versionParts = fullCdragonVersion?.Split('.').Take(2);
                        if (versionParts != null)
                        {
                            cdragonVersionString = string.Join(".", versionParts);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Debug.WriteLine($"Error fetching CDRAGON version: {ex.Message}");
                    PatchVersion = "DB Error";
                    VersionStatus = "Error";
                    return;
                }

                if (string.IsNullOrEmpty(cdragonVersionString))
                {
                    PatchVersion = "N/A";
                    VersionStatus = "Unknown";
                    return;
                }

                PatchVersion = cdragonVersionString;

                string supabasePatchVersionString = "";
                try
                {
                    byte[]? fileBytes = await _supabaseService.DownloadFileBytesAsync("version", "patch.json");

                    if (fileBytes == null || fileBytes.Length == 0)
                    {
                        VersionStatus = "Local N/A";
                        return;
                    }
                    string jsonSupabase = System.Text.Encoding.UTF8.GetString(fileBytes);

                    using var docSupabase = JsonDocument.Parse(jsonSupabase);
                    if (docSupabase.RootElement.TryGetProperty("version", out JsonElement supabaseVersionElement))
                    {
                        var fullSupabaseVersion = supabaseVersionElement.GetString();
                        var versionParts = fullSupabaseVersion?.Split('.').Take(2);
                        if (versionParts != null)
                        {
                            supabasePatchVersionString = string.Join(".", versionParts);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Debug.WriteLine($"Error fetching/parsing Supabase patch.json: {ex.Message}");
                    VersionStatus = "Local Error";
                    return;
                }

                if (string.IsNullOrEmpty(supabasePatchVersionString))
                {
                    VersionStatus = "Local N/A";
                    return;
                }

                VersionStatus = cdragonVersionString.Equals(supabasePatchVersionString, StringComparison.OrdinalIgnoreCase) ? "UPDATED" : "OUTDATED";
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"Error checking version: {ex.Message}");
                PatchVersion = "Error";
                VersionStatus = "Error";
            }
        }

        [RelayCommand]
        private async Task Play()
        {
            string mainAppExecutableName = "SkinHunterWPF.exe";
            string launcherDirectory = AppDomain.CurrentDomain.BaseDirectory;
            string mainAppPath = Path.Combine(launcherDirectory, mainAppExecutableName);

            if (!File.Exists(mainAppPath))
            {
                try
                {
                    DirectoryInfo? currentDirInfo = new DirectoryInfo(launcherDirectory);
                    DirectoryInfo? binDir = currentDirInfo.Parent?.Parent;
                    DirectoryInfo? projectLauncherDir = binDir?.Parent;
                    DirectoryInfo? solutionDir = projectLauncherDir?.Parent;

                    if (solutionDir != null)
                    {
                        string skinHunterWPFProjectDirName = "SkinHunterWPF";
                        string targetFramework = currentDirInfo.Name;
                        string configuration = currentDirInfo.Parent?.Name ?? "Debug";

                        string devMainAppPath = Path.Combine(solutionDir.FullName, skinHunterWPFProjectDirName, "bin", configuration, targetFramework, mainAppExecutableName);
                        if (File.Exists(devMainAppPath))
                        {
                            mainAppPath = devMainAppPath;
                        }
                    }
                }
                catch (Exception ex)
                {
                    Debug.WriteLine($"Error during development path discovery: {ex.Message}");
                }
            }

            if (File.Exists(mainAppPath))
            {
                try
                {
                    ProcessStartInfo startInfo = new ProcessStartInfo(mainAppPath)
                    {
                        UseShellExecute = true
                    };
                    Process.Start(startInfo);
                    System.Windows.Application.Current.Shutdown();
                }
                catch (Exception ex)
                {
                    var msgBox = new Wpf.Ui.Controls.MessageBox
                    {
                        Title = "Launch Error",
                        Content = $"Failed to start main application:\n{ex.Message}",
                        CloseButtonText = "OK"
                    };
                    await msgBox.ShowDialogAsync();
                }
            }
            else
            {
                var msgBox = new Wpf.Ui.Controls.MessageBox
                {
                    Title = "Application Not Found",
                    Content = $"{mainAppExecutableName} not found.\nSearched at: {mainAppPath}\n(And common development paths)\nPlease ensure it is in the same directory as the launcher or build output paths are correctly configured.",
                    CloseButtonText = "OK"
                };
                await msgBox.ShowDialogAsync();
            }
        }

        [RelayCommand]
        private void Logout()
        {
            _sessionService.ClearCurrentUser();
            _authService.ClearRememberedUser();
            _navigationService.Navigate(typeof(Views.Pages.WelcomePage));
        }

        [RelayCommand]
        private void NavigateToSettings()
        {
            _navigationService.Navigate(typeof(Views.Pages.SettingsPage));
        }
    }
}
/// Pages End of MainLauncherViewModel.cs ///

/// Pages Start of SettingsViewModel.cs ///
﻿using System.Threading.Tasks;

namespace shlauncher.ViewModels.Pages
{
    public partial class SettingsViewModel : ObservableObject, INavigationAware
    {
        private bool _isInitialized = false;

        [ObservableProperty]
        private string _appVersion = String.Empty;

        [ObservableProperty]
        private ApplicationTheme _currentTheme = ApplicationTheme.Unknown;

        private readonly CurrentUserSessionService _sessionService;
        private readonly INavigationService _navigationService;
        private readonly AuthService _authService;

        public SettingsViewModel(CurrentUserSessionService sessionService, INavigationService navigationService, AuthService authService)
        {
            _sessionService = sessionService;
            _navigationService = navigationService;
            _authService = authService;
        }

        public Task OnNavigatedToAsync()
        {
            if (!_isInitialized)
                InitializeViewModel();
            return Task.CompletedTask;
        }

        public Task OnNavigatedFromAsync()
        {
            _isInitialized = false;
            return Task.CompletedTask;
        }

        private void InitializeViewModel()
        {
            CurrentTheme = ApplicationThemeManager.GetAppTheme();
            AppVersion = $"SHLauncher - {GetAssemblyVersion()}";
            _isInitialized = true;
        }

        private string GetAssemblyVersion()
        {
            return System.Reflection.Assembly.GetExecutingAssembly().GetName().Version?.ToString()
                ?? String.Empty;
        }

        [RelayCommand]
        private void OnChangeTheme(string parameter)
        {
            switch (parameter)
            {
                case "theme_light":
                    if (CurrentTheme == ApplicationTheme.Light)
                        break;

                    ApplicationThemeManager.Apply(ApplicationTheme.Light);
                    CurrentTheme = ApplicationTheme.Light;

                    break;

                default:
                    if (CurrentTheme == ApplicationTheme.Dark)
                        break;

                    ApplicationThemeManager.Apply(ApplicationTheme.Dark);
                    CurrentTheme = ApplicationTheme.Dark;

                    break;
            }
        }

        [RelayCommand]
        private void Logout()
        {
            _sessionService.ClearCurrentUser();
            _authService.ClearRememberedUser();
            _navigationService.Navigate(typeof(Views.Pages.WelcomePage));
        }

        [RelayCommand]
        private void GoBack()
        {
            var navigationControl = _navigationService.GetNavigationControl();
            if (navigationControl != null && navigationControl.CanGoBack)
            {
                _navigationService.GoBack();
            }
        }
    }
}
/// Pages End of SettingsViewModel.cs ///

/// Pages Start of SignInViewModel.cs ///
﻿using System.Threading.Tasks;
using System.Diagnostics;

namespace shlauncher.ViewModels.Pages
{
    public partial class SignInViewModel : LauncherBaseViewModel
    {
        private readonly INavigationService _navigationService;
        private readonly AuthService _authService;
        private readonly CurrentUserSessionService _sessionService;
        private readonly MainWindowViewModel _mainWindowViewModel;

        [ObservableProperty]
        private string? _username;

        private string? _password;
        public string? Password
        {
            get => _password;
            set => SetProperty(ref _password, value);
        }

        [ObservableProperty]
        private bool _rememberMe;

        public SignInViewModel(INavigationService navigationService, AuthService authService, CurrentUserSessionService sessionService, MainWindowViewModel mainWindowViewModel)
        {
            _navigationService = navigationService;
            _authService = authService;
            _sessionService = sessionService;
            _mainWindowViewModel = mainWindowViewModel;
            PageTitle = "Sign In - SHLauncher";
            LoadRememberedUser();
        }

        private void LoadRememberedUser()
        {
            if (_sessionService.IsUserLoggedIn && _sessionService.CurrentUser != null)
            {
                Username = _sessionService.CurrentUser.Login;
                RememberMe = true;
            }
            else
            {
                var (token, rememberedUsername) = _authService.GetRememberedUser();
                if (!string.IsNullOrEmpty(token) && !string.IsNullOrEmpty(rememberedUsername))
                {
                    Username = rememberedUsername;
                    RememberMe = true;
                }
            }
        }

        [RelayCommand]
        private async Task Login()
        {
            if (string.IsNullOrWhiteSpace(Username) || string.IsNullOrWhiteSpace(Password))
            {
                var msgBox = new Wpf.Ui.Controls.MessageBox
                {
                    Title = "Login Failed",
                    Content = "Please enter both username and password.",
                    CloseButtonText = "OK",
                    PrimaryButtonText = "" // No primary button needed if close is OK
                };
                await msgBox.ShowDialogAsync();
                return;
            }

            _mainWindowViewModel.IsGlobalLoading = true;
            var (success, token, userData, errorMessage) = await _authService.LoginAsync(Username, Password);

            if (success && token != null && userData != null)
            {
                _sessionService.SetCurrentUser(userData, token);
                if (RememberMe)
                {
                    _authService.RememberUser(token, userData.Login!);
                }
                else
                {
                    _authService.ClearRememberedUser();
                }
                _navigationService.Navigate(typeof(Views.Pages.LoadingPage));
            }
            else
            {
                var msgBox = new Wpf.Ui.Controls.MessageBox
                {
                    Title = "Login Failed",
                    Content = errorMessage ?? "Login failed due to an unknown error.",
                    CloseButtonText = "OK"
                };
                await msgBox.ShowDialogAsync();
            }
            _mainWindowViewModel.IsGlobalLoading = false;
        }

        [RelayCommand]
        private void Register()
        {
            try
            {
                Process.Start(new ProcessStartInfo("https://skinhunterv2.vercel.app") { UseShellExecute = true });
            }
            catch (System.Exception ex)
            {
                Debug.WriteLine($"Error opening registration link: {ex.Message}");
                var msgBox = new Wpf.Ui.Controls.MessageBox
                {
                    Title = "Error",
                    Content = $"Could not open registration page: {ex.Message}",
                    CloseButtonText = "OK"
                };
                _ = msgBox.ShowDialogAsync(); // Fire and forget if not awaiting result
            }
        }

        public override Task OnNavigatedToAsync()
        {
            Password = null;
            LoadRememberedUser();
            return base.OnNavigatedToAsync();
        }
    }
}
/// Pages End of SignInViewModel.cs ///

/// Pages Start of WelcomeViewModel.cs ///
﻿using System.Threading.Tasks;
using System.Diagnostics;

namespace shlauncher.ViewModels.Pages
{
    public partial class WelcomeViewModel : LauncherBaseViewModel
    {
        private readonly INavigationService _navigationService;

        public WelcomeViewModel(INavigationService navigationService)
        {
            _navigationService = navigationService;
            PageTitle = "Welcome - SHLauncher";
        }

        [RelayCommand]
        private void NavigateToSignIn()
        {
            _navigationService.Navigate(typeof(Views.Pages.SignInPage));
        }

        [RelayCommand]
        private void Buy()
        {
            try
            {
                Process.Start(new ProcessStartInfo("https://skinhunterv2.vercel.app") { UseShellExecute = true });
            }
            catch (System.Exception ex)
            {
                Debug.WriteLine($"Error opening BUY link: {ex.Message}");
            }
        }
    }
}
/// Pages End of WelcomeViewModel.cs ///

/// Services Start of ApplicationHostService.cs ///
﻿using Microsoft.Extensions.Hosting;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;

namespace shlauncher.Services
{
    public class ApplicationHostService : IHostedService
    {
        private readonly IServiceProvider _serviceProvider;
        private INavigationWindow? _navigationWindow;

        public ApplicationHostService(IServiceProvider serviceProvider)
        {
            _serviceProvider = serviceProvider;
        }

        public async Task StartAsync(CancellationToken cancellationToken)
        {
            await HandleActivationAsync();
        }

        public Task StopAsync(CancellationToken cancellationToken)
        {
            return Task.CompletedTask;
        }

        private async Task HandleActivationAsync()
        {
            if (!System.Windows.Application.Current.Windows.OfType<INavigationWindow>().Any())
            {
                _navigationWindow = _serviceProvider.GetService(typeof(INavigationWindow)) as INavigationWindow;
                _navigationWindow!.ShowWindow();
                _navigationWindow.Navigate(typeof(Views.Pages.WelcomePage));
            }
            await Task.CompletedTask;
        }
    }
}
/// Services End of ApplicationHostService.cs ///

/// Services Start of AuthService.cs ///
﻿using System.Threading.Tasks;
using System.Diagnostics;
using System.Security.Cryptography;
using System;
using Microsoft.IdentityModel.Tokens;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Text;
using BCryptNet = BCrypt.Net;

namespace shlauncher.Services
{
    public class AuthService
    {
        private readonly SupabaseService _supabaseService;
        private const string JWTSecret = "skinhunterlaputaquetepariohntvigilacortawachodevuelvanaloan";
        private const string Entropy = "SHLAUNCHER_ENTROPY";

        public AuthService(SupabaseService supabaseService)
        {
            _supabaseService = supabaseService;
        }

        public async Task<(bool Success, string? Token, Models.User? UserData, string? ErrorMessage)> LoginAsync(string username, string password)
        {
            try
            {
                var user = await _supabaseService.GetUserByLogin(username);

                if (user == null || string.IsNullOrEmpty(user.PasswordHash))
                {
                    return (false, null, null, "User not found or password not set.");
                }

                bool isPasswordValid = BCryptNet.BCrypt.Verify(password, user.PasswordHash);

                if (!isPasswordValid)
                {
                    return (false, null, null, "Incorrect password.");
                }

                var tokenHandler = new JwtSecurityTokenHandler();
                var key = Encoding.ASCII.GetBytes(JWTSecret);
                var tokenDescriptor = new SecurityTokenDescriptor
                {
                    Subject = new ClaimsIdentity(new[]
                    {
                        new Claim("id", user.Id.ToString()),
                        new Claim(ClaimTypes.Name, user.Login ?? "")
                    }),
                    Expires = DateTime.UtcNow.AddDays(7),
                    SigningCredentials = new SigningCredentials(new SymmetricSecurityKey(key), SecurityAlgorithms.HmacSha256Signature)
                };
                var token = tokenHandler.CreateToken(tokenDescriptor);
                string jwtToken = tokenHandler.WriteToken(token);

                return (true, jwtToken, user, null);
            }
            catch (System.Exception ex)
            {
                Debug.WriteLine($"Login exception: {ex.Message}");
                return (false, null, null, $"Login failed: {ex.Message}");
            }
        }

        public void RememberUser(string token, string username)
        {
            try
            {
                byte[] tokenBytes = Encoding.UTF8.GetBytes(token);
                byte[] entropyBytes = Encoding.UTF8.GetBytes(Entropy);
                byte[] protectedToken = ProtectedData.Protect(tokenBytes, entropyBytes, DataProtectionScope.CurrentUser);

                Properties.Settings.Default.RememberedToken = Convert.ToBase64String(protectedToken);
                Properties.Settings.Default.RememberedUsername = username;
                Properties.Settings.Default.Save();
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"Failed to remember user: {ex.Message}");
            }
        }

        public (string? Token, string? Username) GetRememberedUser()
        {
            try
            {
                string? base64ProtectedToken = Properties.Settings.Default.RememberedToken;
                string? rememberedUsername = Properties.Settings.Default.RememberedUsername;

                if (!string.IsNullOrEmpty(base64ProtectedToken) && !string.IsNullOrEmpty(rememberedUsername))
                {
                    byte[] protectedToken = Convert.FromBase64String(base64ProtectedToken);
                    byte[] entropyBytes = Encoding.UTF8.GetBytes(Entropy);
                    byte[] tokenBytes = ProtectedData.Unprotect(protectedToken, entropyBytes, DataProtectionScope.CurrentUser);
                    string token = Encoding.UTF8.GetString(tokenBytes);
                    return (token, rememberedUsername);
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"Failed to get remembered user: {ex.Message}. Clearing remembered data.");
                ClearRememberedUser();
            }
            return (null, null);
        }

        public void ClearRememberedUser()
        {
            Properties.Settings.Default.RememberedToken = string.Empty;
            Properties.Settings.Default.RememberedUsername = string.Empty;
            Properties.Settings.Default.Save();
        }

        public ClaimsPrincipal? ValidateToken(string token)
        {
            try
            {
                var tokenHandler = new JwtSecurityTokenHandler();
                var key = Encoding.ASCII.GetBytes(JWTSecret);
                tokenHandler.ValidateToken(token, new TokenValidationParameters
                {
                    ValidateIssuerSigningKey = true,
                    IssuerSigningKey = new SymmetricSecurityKey(key),
                    ValidateIssuer = false,
                    ValidateAudience = false,
                    ClockSkew = TimeSpan.Zero
                }, out SecurityToken validatedToken);

                var jwtToken = (JwtSecurityToken)validatedToken;
                var claimsIdentity = new ClaimsIdentity(jwtToken.Claims);
                return new ClaimsPrincipal(claimsIdentity);
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"Token validation failed: {ex.Message}");
                return null;
            }
        }
    }
}
/// Services End of AuthService.cs ///

/// Services Start of CurrentUserSessionService.cs ///
﻿namespace shlauncher.Services
{
    public partial class CurrentUserSessionService : ObservableObject
    {
        [ObservableProperty]
        private Models.User? _currentUser;

        [ObservableProperty]
        private string? _sessionToken;

        public bool IsUserLoggedIn => CurrentUser != null && !string.IsNullOrEmpty(SessionToken);

        public void SetCurrentUser(Models.User user, string token)
        {
            CurrentUser = user;
            SessionToken = token;
            OnPropertyChanged(nameof(IsUserLoggedIn));
        }

        public void ClearCurrentUser()
        {
            CurrentUser = null;
            SessionToken = null;
            OnPropertyChanged(nameof(IsUserLoggedIn));
        }
    }
}
/// Services End of CurrentUserSessionService.cs ///

/// Services Start of SupabaseService.cs ///
﻿using Supabase;
using System.Threading.Tasks;
using System.Collections.Generic;
using System.Linq;
using Client = Supabase.Client;
using Supabase.Gotrue;
using BCryptNet = BCrypt.Net;
using System.Text.Json;
using System.Net.Http;
using System;
using System.Diagnostics;

namespace shlauncher.Services
{
    public class SupabaseService
    {
        private readonly Client _supabase;
        private readonly HttpClient _httpClient;

        private const string SupabaseUrl = "https://odlqwkgewzxxmbsqutja.supabase.co";
        private const string SupabaseAnonKey = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im9kbHF3a2dld3p4eG1ic3F1dGphIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzQyMTM2NzcsImV4cCI6MjA0OTc4OTY3N30.qka6a71bavDeUQgy_BKoVavaClRQa_gT36Au7oO9AF0";

        public SupabaseService()
        {
            var options = new SupabaseOptions
            {
                AutoRefreshToken = true,
                AutoConnectRealtime = true
            };
            _supabase = new Client(SupabaseUrl, SupabaseAnonKey, options);
            _httpClient = new HttpClient();
        }

        public async Task InitializeAsync()
        {
            await _supabase.InitializeAsync();
        }

        public Client GetClient()
        {
            return _supabase;
        }

        public async Task<Models.User?> GetUserByLogin(string login)
        {
            var response = await _supabase.From<Models.User>().Filter("login", Postgrest.Constants.Operator.Equals, login).Get();

            if (response?.ResponseMessage != null && !response.ResponseMessage.IsSuccessStatusCode)
            {
                string errorDetail = response.Content ?? response.ResponseMessage.ReasonPhrase ?? "Unknown error fetching user by login.";
                Debug.WriteLine($"Error fetching user by login {login}: {errorDetail}");
                return null;
            }
            return response?.Models.FirstOrDefault();
        }
        public async Task<Models.User?> GetUserByEmail(string email)
        {
            var response = await _supabase.From<Models.User>().Filter("email", Postgrest.Constants.Operator.Equals, email).Get();

            if (response?.ResponseMessage != null && !response.ResponseMessage.IsSuccessStatusCode)
            {
                string errorDetail = response.Content ?? response.ResponseMessage.ReasonPhrase ?? "Unknown error fetching user by email.";
                Debug.WriteLine($"Error fetching user by email {email}: {errorDetail}");
                return null;
            }
            return response?.Models.FirstOrDefault();
        }

        public async Task<Session?> SignUpUserWithPassword(string email, string password, string username)
        {
            var existingUserByEmail = await GetUserByEmail(email);
            if (existingUserByEmail != null)
            {
                throw new System.Exception("User with this email already exists.");
            }

            var existingUserByLogin = await GetUserByLogin(username);
            if (existingUserByLogin != null)
            {
                throw new System.Exception("User with this login already exists.");
            }

            string hashedPassword = BCryptNet.BCrypt.HashPassword(password);
            var newUser = new Models.User
            {
                Email = email,
                PasswordHash = hashedPassword,
                Login = username,
                Credits = 0,
                IsBuyer = false
            };

            var insertResponse = await _supabase.From<Models.User>().Insert(newUser);

            if (insertResponse?.ResponseMessage != null && insertResponse.ResponseMessage.IsSuccessStatusCode && insertResponse.Models.Any())
            {
                return null;
            }
            else
            {
                string errorMessage = "Failed to register user in custom table.";

                if (insertResponse?.ResponseMessage != null && !insertResponse.ResponseMessage.IsSuccessStatusCode)
                {
                    if (!string.IsNullOrEmpty(insertResponse.Content))
                    {
                        try
                        {
                            var errorDetails = JsonSerializer.Deserialize<Dictionary<string, string>>(insertResponse.Content);
                            if (errorDetails != null && errorDetails.TryGetValue("message", out var msg))
                            {
                                errorMessage = msg;
                            }
                            else
                            {
                                errorMessage = insertResponse.Content;
                            }
                        }
                        catch
                        {
                            errorMessage = insertResponse.Content;
                        }
                    }
                    else if (!string.IsNullOrEmpty(insertResponse.ResponseMessage.ReasonPhrase))
                    {
                        errorMessage = insertResponse.ResponseMessage.ReasonPhrase;
                    }
                }
                else if (insertResponse == null || insertResponse.ResponseMessage == null)
                {
                    errorMessage = "Failed to register user: No valid response from server.";
                }

                Debug.WriteLine($"Supabase Insert Error: {errorMessage}");
                throw new System.Exception(errorMessage);
            }
        }

        public async Task<byte[]?> DownloadFileBytesAsync(string bucketName, string filePathInBucket)
        {
            try
            {
                string storageUrlPart = "/storage/v1";
                string baseUrl = SupabaseUrl.EndsWith(storageUrlPart) ? SupabaseUrl : SupabaseUrl + storageUrlPart;
                string publicUrl = $"{baseUrl}/object/public/{bucketName}/{filePathInBucket}";
                publicUrl = publicUrl.Replace("//object", "/object");

                HttpResponseMessage response = await _httpClient.GetAsync(publicUrl);

                if (!response.IsSuccessStatusCode)
                {
                    string errorContent = await response.Content.ReadAsStringAsync();
                    Debug.WriteLine($"Error downloading file from Supabase Storage. Status: {response.StatusCode}, Reason: {response.ReasonPhrase}, Content: {errorContent} (URL: {publicUrl})");
                    return null;
                }
                return await response.Content.ReadAsByteArrayAsync();
            }
            catch (HttpRequestException ex)
            {
                Debug.WriteLine($"HttpRequestException downloading file from Supabase Storage: {ex.Message} (URL: {bucketName}/{filePathInBucket})");
                return null;
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"Generic error downloading file {bucketName}/{filePathInBucket}: {ex.Message}");
                return null;
            }
        }

        public async Task<List<Models.SupabaseUpdateLogEntry>?> GetUpdateLogsAsync()
        {
            string bucketName = "version";
            string filePathInBucket = "updates.json";
            try
            {
                byte[]? fileBytes = await DownloadFileBytesAsync(bucketName, filePathInBucket);
                if (fileBytes == null || fileBytes.Length == 0)
                {
                    Debug.WriteLine($"Supabase {filePathInBucket} not found or is empty in bucket '{bucketName}'.");
                    return null;
                }
                string jsonContent = System.Text.Encoding.UTF8.GetString(fileBytes);
                var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
                return JsonSerializer.Deserialize<List<Models.SupabaseUpdateLogEntry>>(jsonContent, options);
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"Error fetching/parsing Supabase {filePathInBucket}: {ex.Message}");
                return null;
            }
        }
    }
}
/// Services End of SupabaseService.cs ///

/// Resources Start of LauncherSpecificStyles.xaml ///
<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:converters="clr-namespace:shlauncher.Converters">

    <converters:StringIsNullOrEmptyConverter x:Key="StringIsNullOrEmptyConverter"/>
    <converters:ColorBrightnessConverter x:Key="ColorBrightnessConverter"/>
    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
    <converters:VersionStatusToColorConverter x:Key="VersionStatusToColorConverter"/>

</ResourceDictionary>
/// Resources End of LauncherSpecificStyles.xaml ///

/// Resources Start of Translations.cs ///
namespace shlauncher.Resources
{
    public partial class Translations
    {
    }
}

/// Resources End of Translations.cs ///

/// Properties Start of Settings.Designer.cs ///
﻿namespace shlauncher.Properties
{ // Corrected


    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "17.0.0.0")]
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase
    {

        private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));

        public static Settings Default
        {
            get
            {
                return defaultInstance;
            }
        }

        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("")]
        public string RememberedToken
        {
            get
            {
                return ((string)(this["RememberedToken"]));
            }
            set
            {
                this["RememberedToken"] = value;
            }
        }

        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("")]
        public string RememberedUsername
        {
            get
            {
                return ((string)(this["RememberedUsername"]));
            }
            set
            {
                this["RememberedUsername"] = value;
            }
        }
    }
}
/// Properties End of Settings.Designer.cs ///

/// Models Start of AppConfig.cs ///
﻿namespace shlauncher.Models
{
    public class AppConfig
    {
        public string? ConfigurationsFolder { get; set; }
        public string? AppPropertiesFileName { get; set; }
    }
}
/// Models End of AppConfig.cs ///

/// Models Start of DataColor.cs ///
﻿using System.Windows.Media;

namespace shlauncher.Models
{
    public struct DataColor
    {
        public Brush Color { get; set; }
    }
}

/// Models End of DataColor.cs ///

/// Models Start of SupabaseUpdateLog.cs ///
﻿using System.Collections.Generic;
using System.Text.Json.Serialization;

namespace shlauncher.Models
{
    public class SupabaseUpdateLogEntry
    {
        [JsonPropertyName("version")]
        public string? Version { get; set; }

        [JsonPropertyName("title")]
        public string? Title { get; set; }

        [JsonPropertyName("date")]
        public string? Date { get; set; }

        [JsonPropertyName("changes")]
        public List<string>? Changes { get; set; }
    }
}
/// Models End of SupabaseUpdateLog.cs ///

/// Models Start of User.cs ///
﻿using Postgrest.Models;
using Postgrest.Attributes;
using System;

namespace shlauncher.Models
{
    [Table("users")]
    public class User : BaseModel
    {
        [PrimaryKey("id", false)]
        public int Id { get; set; }

        [Column("email")]
        public string? Email { get; set; }

        [Column("password")]
        public string? PasswordHash { get; set; }

        [Column("login")]
        public string? Login { get; set; }

        [Column("fichasporskin")]
        public int Credits { get; set; }

        [Column("escomprador")]
        public bool IsBuyer { get; set; }

        [Column("created_at")]
        public DateTime CreatedAt { get; set; }
    }
}
/// Models End of User.cs ///

/// Helpers Start of EnumToBooleanConverter.cs ///
﻿using System;
using System.Globalization;
using System.Windows.Data;
using Wpf.Ui.Appearance;

namespace shlauncher.Helpers
{
    public class EnumToBooleanConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (parameter is not String enumString)
            {
                throw new ArgumentException("Parameter must be an enum name string.");
            }

            if (value == null || !Enum.IsDefined(value.GetType(), value))
            {
                // Or handle as appropriate, perhaps return false or throw
                // Depending on if value can be null or not a valid enum member
                return false;
            }

            // Ensure the parameter string can be parsed to the type of 'value'
            try
            {
                var enumValueFromParameter = Enum.Parse(value.GetType(), enumString);
                return enumValueFromParameter.Equals(value);
            }
            catch (ArgumentException) // Parameter string is not a member of the enum
            {
                return false;
            }
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (parameter is not String enumString)
            {
                throw new ArgumentException("Parameter must be an enum name string.");
            }
            // targetType here is the Enum type itself
            return Enum.Parse(targetType, enumString);
        }
    }
}
/// Helpers End of EnumToBooleanConverter.cs ///

/// Converters Start of BooleanToVisibilityConverter.cs ///
﻿using System;
using System.Globalization;
using System.Windows;
using System.Windows.Data;

namespace shlauncher.Converters
{
    [ValueConversion(typeof(bool), typeof(Visibility))]
    public class BooleanToVisibilityConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            bool flag = false;
            if (value is bool bValue)
            {
                flag = bValue;
            }

            bool inverse = false;
            if (parameter is string paramString)
            {
                bool.TryParse(paramString, out inverse);
            }
            else if (parameter is bool boolParam)
            {
                inverse = boolParam;
            }


            if (inverse)
            {
                return !flag ? Visibility.Visible : Visibility.Collapsed;
            }
            return flag ? Visibility.Visible : Visibility.Collapsed;
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            bool inverse = false;
            if (parameter is string paramString)
            {
                bool.TryParse(paramString, out inverse);
            }
            else if (parameter is bool boolParam)
            {
                inverse = boolParam;
            }

            bool flag = (value is Visibility v) && v == Visibility.Visible;

            if (inverse)
            {
                return !flag;
            }
            return flag;
        }
    }
}
/// Converters End of BooleanToVisibilityConverter.cs ///

/// Converters Start of ColorBrightnessConverter.cs ///
﻿using System;
using System.Globalization;
using System.Windows.Data;
using System.Windows.Media;

namespace shlauncher.Converters
{
    public class ColorBrightnessConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (value is SolidColorBrush originalBrush)
            {
                Color originalColor = originalBrush.Color;
                float factor = 1.0f;
                if (parameter != null && float.TryParse(parameter.ToString(), NumberStyles.Any, CultureInfo.InvariantCulture, out float parsedFactor))
                {
                    factor = parsedFactor;
                }

                byte r = (byte)Math.Max(0, Math.Min(255, originalColor.R * factor));
                byte g = (byte)Math.Max(0, Math.Min(255, originalColor.G * factor));
                byte b = (byte)Math.Max(0, Math.Min(255, originalColor.B * factor));

                return new SolidColorBrush(Color.FromArgb(originalColor.A, r, g, b));
            }
            return value;
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
    }
}
/// Converters End of ColorBrightnessConverter.cs ///

/// Converters Start of StringIsNullOrEmptyConverter.cs ///
﻿using System;
using System.Globalization;
using System.Windows.Data;

namespace shlauncher.Converters
{
    public class StringIsNullOrEmptyConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            return string.IsNullOrEmpty(value as string);
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotSupportedException();
        }
    }
}
/// Converters End of StringIsNullOrEmptyConverter.cs ///

/// Converters Start of VersionStatusToColorConverter.cs ///
﻿using System;
using System.Globalization;
using System.Windows.Data;
using System.Windows.Media;

namespace shlauncher.Converters
{
    public class VersionStatusToColorConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (value is string status)
            {
                return status.ToUpperInvariant() switch
                {
                    "UPDATED" => Brushes.LightGreen,
                    "OUTDATED" => Brushes.OrangeRed,
                    "CHECKING..." => Brushes.LightSkyBlue,
                    "ERROR" => Brushes.Red,
                    "LOCAL N/A" => Brushes.Yellow,
                    "LOCAL ERROR" => Brushes.Orange,
                    "UNKNOWN" => Brushes.LightGray,
                    "DB ERROR" => Brushes.MediumVioletRed,
                    _ => Brushes.White,
                };
            }
            return Brushes.White;
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
    }
}
/// Converters End of VersionStatusToColorConverter.cs ///

