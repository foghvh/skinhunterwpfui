/// skinhunter Start of App.xaml ///
﻿<Application
    x:Class="skinhunter.App"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:ui="http://schemas.lepo.co/wpfui/2022/xaml"
    xmlns:converters="clr-namespace:skinhunter.Converters"
    DispatcherUnhandledException="OnDispatcherUnhandledException"
    Exit="OnExit"
    Startup="OnStartup">
    <Application.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ui:ThemesDictionary Theme="Dark" />
                <ui:ControlsDictionary />
            </ResourceDictionary.MergedDictionaries>

            <converters:BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
            <converters:NullOrEmptyToVisibilityConverter x:Key="NullOrEmptyToVisibilityConverter"/>
            <converters:NullToVisibilityConverter x:Key="NullToVisibilityConverter"/>
            <converters:InverseBooleanToVisibilityConverter x:Key="InverseBooleanToVisibilityConverter"/>
            <converters:ChromaToButtonTextConverter x:Key="ChromaToButtonTextConverter"/>
            <converters:SkinIdToKhadaUrlConverter x:Key="SkinIdToKhadaUrlConverter"/>
            <converters:ListToStringConverter x:Key="ListToStringConverter"/>

            <Style x:Key="LoadingProgressRingStyle" TargetType="ui:ProgressRing">
                <Setter Property="IsIndeterminate" Value="True"/>
                <Setter Property="Width" Value="40"/>
                <Setter Property="Height" Value="40"/>
                <Setter Property="VerticalAlignment" Value="Center"/>
                <Setter Property="HorizontalAlignment" Value="Center"/>
            </Style>

            <Style TargetType="TabItem">
                <Setter Property="Foreground" Value="{DynamicResource TextFillColorSecondaryBrush}"/>
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="Padding" Value="12,6"/>
                <Setter Property="BorderThickness" Value="0 0 0 2"/>
                <Setter Property="BorderBrush" Value="Transparent"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="TabItem">
                            <Border x:Name="border"
                                     BorderThickness="{TemplateBinding BorderThickness}"
                                     BorderBrush="{TemplateBinding BorderBrush}"
                                     Background="{TemplateBinding Background}"
                                     Padding="{TemplateBinding Padding}"
                                     Margin="0,0,8,0" CornerRadius="3,3,0,0">
                                <ContentPresenter ContentSource="Header"
                                                   HorizontalAlignment="Center"
                                                   VerticalAlignment="Center"/>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsSelected" Value="True">
                                    <Setter Property="Foreground" Value="{DynamicResource TextFillColorPrimaryBrush}"/>
                                    <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource AccentFillColorDefaultBrush}"/>
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Foreground" Value="{DynamicResource TextFillColorPrimaryBrush}"/>
                                    <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource AccentFillColorDefaultBrush}"/>
                                    <Setter TargetName="border" Property="Opacity" Value="0.8"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

        </ResourceDictionary>
    </Application.Resources>
</Application>
/// skinhunter End of App.xaml ///

/// skinhunter Start of App.xaml.cs ///
﻿using System.IO;
using System.Windows.Threading;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using skinhunter.Services;
using skinhunter.ViewModels.Pages;
using skinhunter.ViewModels.Windows;
using skinhunter.ViewModels.Dialogs;
using skinhunter.Views.Pages;
using skinhunter.Views.Windows;
using Wpf.Ui;
using Wpf.Ui.DependencyInjection;

namespace skinhunter
{
    public partial class App
    {
        private static readonly IHost _host = Host
            .CreateDefaultBuilder()
            .ConfigureAppConfiguration(c => {
                string? basePath = Path.GetDirectoryName(AppContext.BaseDirectory);
                if (basePath != null)
                {
                    c.SetBasePath(basePath);
                }
            })
            .ConfigureServices((context, services) =>
            {
                services.AddNavigationViewPageProvider();
                services.AddSingleton<INavigationService, NavigationService>();

                services.AddHostedService<ApplicationHostService>();
                services.AddSingleton<IThemeService, ThemeService>();
                services.AddSingleton<ITaskBarService, TaskBarService>();

                services.AddSingleton<ICustomNavigationService, CustomNavigationService>();

                services.AddSingleton<INavigationWindow, MainWindow>();
                services.AddSingleton<MainWindowViewModel>();

                services.AddSingleton<ChampionGridPageViewModel>();
                services.AddSingleton<ChampionDetailPageViewModel>();
                services.AddSingleton<DashboardViewModel>();
                services.AddSingleton<DataViewModel>();
                services.AddSingleton<SettingsViewModel>();

                services.AddTransient<ChampionGridPage>();
                services.AddTransient<ChampionDetailPage>();
                services.AddTransient<DashboardPage>();
                services.AddTransient<DataPage>();
                services.AddTransient<SettingsPage>();

                services.AddTransient<OmnisearchViewModel>();
                services.AddTransient<SkinDetailViewModel>();

            }).Build();

        public static IServiceProvider Services
        {
            get { return _host.Services; }
        }

        private async void OnStartup(object sender, StartupEventArgs e)
        {
            await _host.StartAsync();
        }

        private async void OnExit(object sender, ExitEventArgs e)
        {
            await _host.StopAsync();
            _host.Dispose();
        }

        private void OnDispatcherUnhandledException(object sender, DispatcherUnhandledExceptionEventArgs e)
        {
        }
    }
}
/// skinhunter End of App.xaml.cs ///

/// skinhunter Start of AssemblyInfo.cs ///
using System.Windows;

[assembly: ThemeInfo(
    ResourceDictionaryLocation.None, //where theme specific resource dictionaries are located
                                     //(used if a resource is not found in the page,
                                     // or application resource dictionaries)
    ResourceDictionaryLocation.SourceAssembly //where the generic resource dictionary is located
//(used if a resource is not found in the page,
// app, or any theme specific resource dictionaries)
)]

/// skinhunter End of AssemblyInfo.cs ///

/// skinhunter Start of skinhunter.csproj ///
<Project Sdk="Microsoft.NET.Sdk">

	<PropertyGroup>
		<OutputType>WinExe</OutputType>
		<TargetFramework>net9.0-windows</TargetFramework>
		<ApplicationManifest>app.manifest</ApplicationManifest>
		<ApplicationIcon>Assets/wpfui-icon.ico</ApplicationIcon>
		<UseWPF>true</UseWPF>
		<Nullable>enable</Nullable>
		<ImplicitUsings>enable</ImplicitUsings>
		<!-- <EnableDefaultCompileItems>true</EnableDefaultCompileItems> -->
		<!-- La línea de arriba es true por defecto en proyectos SDK, no necesitas añadirla explícitamente -->
		<!-- Asegúrate de que NO esté en false si esperas inclusiones automáticas -->
	</PropertyGroup>

	<ItemGroup>
		<Content Include="Assets/wpfui-icon.ico" />
	</ItemGroup>

	<ItemGroup>
		<PackageReference Include="CommunityToolkit.Mvvm" Version="8.4.0" />
		<PackageReference Include="Microsoft.Extensions.Hosting" Version="9.0.1" />
		<!-- O la versión que tenías -->
		<PackageReference Include="WPF-UI" Version="4.0.2" />
		<PackageReference Include="WPF-UI.DependencyInjection" Version="4.0.2" />
	</ItemGroup>

	<ItemGroup>
		<!-- Imágenes -->
		<None Remove="Assets\wpfui-icon-256.png" />
		<None Remove="Assets\wpfui-icon-1024.png" />
		<None Remove="Assets\logo.png" />
		<None Remove="Assets\chroma-icon.png" />
		<None Remove="Assets\legacy-icon.png" />
		<None Remove="Assets\placeholder.png" />

		<Resource Include="Assets\wpfui-icon-256.png" />
		<Resource Include="Assets\wpfui-icon-1024.png" />
		<Resource Include="Assets\logo.png" />
		<Resource Include="Assets\chroma-icon.png" />
		<Resource Include="Assets\legacy-icon.png" />
		<Resource Include="Assets\placeholder.png" />
	</ItemGroup>

	<!--
  IMPORTANTE: NO DEBERÍA HABER LÍNEAS <Compile Include="..."/> AQUÍ
  para los archivos .cs que están dentro de tu estructura de proyecto
  (como ViewModels\Pages\DashboardPageViewModel.cs)
  A MENOS que hayas puesto <EnableDefaultCompileItems>false</EnableDefaultCompileItems> explícitamente.
  Si tienes <EnableDefaultCompileItems>true</EnableDefaultCompileItems> (o está omitido, lo que implica true),
  y también tienes <Compile Include="..."> explícitas, eso causa la compilación duplicada.
  -->

</Project>
/// skinhunter End of skinhunter.csproj ///

/// skinhunter Start of skinhunter.sln ///
﻿
Microsoft Visual Studio Solution File, Format Version 12.00
# Visual Studio Version 17
VisualStudioVersion = 17.13.35931.197 d17.13
MinimumVisualStudioVersion = 10.0.40219.1
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "skinhunter", "skinhunter.csproj", "{52A3C67A-F474-4999-A569-9D6BE06F136D}"
EndProject
Global
	GlobalSection(SolutionConfigurationPlatforms) = preSolution
		Debug|Any CPU = Debug|Any CPU
		Release|Any CPU = Release|Any CPU
	EndGlobalSection
	GlobalSection(ProjectConfigurationPlatforms) = postSolution
		{52A3C67A-F474-4999-A569-9D6BE06F136D}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{52A3C67A-F474-4999-A569-9D6BE06F136D}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{52A3C67A-F474-4999-A569-9D6BE06F136D}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{52A3C67A-F474-4999-A569-9D6BE06F136D}.Release|Any CPU.Build.0 = Release|Any CPU
	EndGlobalSection
	GlobalSection(SolutionProperties) = preSolution
		HideSolutionNode = FALSE
	EndGlobalSection
	GlobalSection(ExtensibilityGlobals) = postSolution
		SolutionGuid = {08173B31-59AF-4D44-AFF8-CD187C0CF285}
	EndGlobalSection
EndGlobal

/// skinhunter End of skinhunter.sln ///

/// skinhunter Start of Usings.cs ///
﻿global using System;
global using System.Windows;
global using CommunityToolkit.Mvvm.ComponentModel;
global using CommunityToolkit.Mvvm.Input;
/// skinhunter End of Usings.cs ///

/// Dialogs Start of OmnisearchDialog.xaml ///
<UserControl x:Class="skinhunter.Views.Dialogs.OmnisearchDialog"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:ui="http://schemas.lepo.co/wpfui/2022/xaml"
             xmlns:vm="clr-namespace:skinhunter.ViewModels.Dialogs"
             xmlns:m="clr-namespace:skinhunter.Models"
             xmlns:converters="clr-namespace:skinhunter.Converters"
             mc:Ignorable="d" 
             d:DataContext="{d:DesignInstance Type=vm:OmnisearchViewModel, IsDesignTimeCreatable=False}"
             Width="560" MaxHeight="600" MinHeight="150"
             d:DesignHeight="600" d:DesignWidth="560">
    <UserControl.Resources>
        <converters:BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
        <converters:InverseBooleanToVisibilityConverter x:Key="InverseBooleanToVisibilityConverter"/>
        <converters:NullToVisibilityConverter x:Key="NullToVisibilityConverter"/>
        <Style x:Key="ButtonTransparentStyle" TargetType="Button">
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="Padding" Value="0"/>
            <Setter Property="Cursor" Value="Hand"/>
            <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" CornerRadius="4" x:Name="Bd">
                            <ContentPresenter/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="Bd" Property="Background" Value="{DynamicResource ControlFillColorSecondaryBrush}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </UserControl.Resources>
    <Border Background="{DynamicResource ApplicationBackgroundBrush}" CornerRadius="8" BorderBrush="{DynamicResource CardStrokeColorDefaultBrush}" BorderThickness="1">
        <Grid>
            <Grid Visibility="{Binding IsLoading, Converter={StaticResource InverseBooleanToVisibilityConverter}, FallbackValue=Collapsed}">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>

                <DockPanel Grid.Row="0" Margin="20,15,15,10" LastChildFill="True">
                    <ui:Button DockPanel.Dock="Right" Command="{Binding CloseOmnisearchDialogCommand}" Appearance="Transparent" ToolTipService.ToolTip="Close" Width="32" Height="32">
                        <ui:Button.Icon>
                            <ui:SymbolIcon Symbol="Dismiss24"/>
                        </ui:Button.Icon>
                    </ui:Button>
                    <TextBlock Text="Search" FontSize="20" FontWeight="Medium" VerticalAlignment="Center" Foreground="{DynamicResource TextFillColorPrimaryBrush}"/>
                </DockPanel>

                <Border Grid.Row="1" Background="{DynamicResource ApplicationBackgroundBrush}" Padding="15,12" Margin="20,5,20,15" CornerRadius="6">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>

                        <ui:TextBox Grid.Column="0" PlaceholderText="Search..." IconPlacement="Left"
                                 Text="{Binding Query, UpdateSourceTrigger=PropertyChanged, Delay=400}"
                                 Height="40" VerticalContentAlignment="Center" FontSize="15" Padding="35,0,5,0"
                                 BorderThickness="0.5" BorderBrush="{DynamicResource CardStrokeColorDefaultBrush}">
                            <ui:TextBox.Icon>
                                <ui:SymbolIcon Symbol="Search24"/>
                            </ui:TextBox.Icon>
                        </ui:TextBox>

                        <Popup Placement="Bottom" PlacementTarget="{Binding ElementName=FilterButton}" IsOpen="{Binding IsFilterPopupOpen, Mode=TwoWay}" AllowsTransparency="True" StaysOpen="False" VerticalOffset="5" HorizontalOffset="-10">
                            <Border Background="{DynamicResource LayerFillColorDefaultBrush}" BorderBrush="{DynamicResource CardStrokeColorDefaultBrush}" BorderThickness="1" Padding="12" CornerRadius="4" Margin="0,5,0,0">
                                <StackPanel>
                                    <CheckBox IsChecked="{Binding ShowChampionsFilter}" Content="Champions" Foreground="{DynamicResource TextFillColorPrimaryBrush}" Margin="0,0,0,8"/>
                                    <CheckBox IsChecked="{Binding ShowSkinsFilter}" Content="Skins" Foreground="{DynamicResource TextFillColorPrimaryBrush}"/>
                                </StackPanel>
                            </Border>
                        </Popup>

                        <ui:Button x:Name="FilterButton" Grid.Column="1" Appearance="Transparent" Margin="8,0,0,0" Width="40" Height="40"
                                Command="{Binding ToggleFilterPopupCommand}" ToolTipService.ToolTip="Filters">
                            <ui:Button.Icon>
                                <ui:SymbolIcon Symbol="Filter24"/>
                            </ui:Button.Icon>
                        </ui:Button>
                    </Grid>
                </Border>

                <Grid Grid.Row="2" Margin="20,0,20,20" MinHeight="100">
                    <ui:ProgressRing IsIndeterminate="True" 
                                 Visibility="{Binding IsLoadingSearchResults, Converter={StaticResource BooleanToVisibilityConverter}, FallbackValue=Collapsed}"
                                 Width="30" Height="30" VerticalAlignment="Center" HorizontalAlignment="Center"/>

                    <ScrollViewer VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Disabled" 
                                  Visibility="{Binding IsLoadingSearchResults, Converter={StaticResource InverseBooleanToVisibilityConverter}, FallbackValue=Visible}">
                        <ItemsControl ItemsSource="{Binding SearchResultsView}">
                            <ItemsControl.GroupStyle>
                                <GroupStyle>
                                    <GroupStyle.HeaderTemplate>
                                        <DataTemplate>
                                            <TextBlock Text="{Binding Name}" Foreground="{DynamicResource TextFillColorSecondaryBrush}" FontSize="12" FontWeight="Medium" Margin="0,8,0,3" Opacity="0.8"/>
                                        </DataTemplate>
                                    </GroupStyle.HeaderTemplate>
                                </GroupStyle>
                            </ItemsControl.GroupStyle>
                            <ItemsControl.ItemTemplate>
                                <DataTemplate DataType="{x:Type m:SearchResultItem}">
                                    <Button Command="{Binding DataContext.SelectResultCommand, RelativeSource={RelativeSource AncestorType={x:Type UserControl}}}"
                                            CommandParameter="{Binding}"
                                            Style="{StaticResource ButtonTransparentStyle}" Margin="0,2">
                                        <Border Padding="10,8">
                                            <Grid>
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="Auto"/>
                                                    <ColumnDefinition Width="*"/>
                                                </Grid.ColumnDefinitions>
                                                <Border Grid.Column="0" Width="48" Height="48" CornerRadius="3" Margin="0,0,15,0" Background="{DynamicResource ControlFillColorSecondaryBrush}">
                                                    <Grid>
                                                        <Border Background="{DynamicResource ControlFillColorTertiaryBrush}" Visibility="{Binding ImageSource, Converter={StaticResource NullToVisibilityConverter}, ConverterParameter=True, FallbackValue=Visible}"/>
                                                        <Image Source="{Binding ImageSource}" Stretch="Uniform" RenderOptions.BitmapScalingMode="Fant"/>
                                                    </Grid>
                                                </Border>
                                                <StackPanel Grid.Column="1" VerticalAlignment="Center">
                                                    <TextBlock Text="{Binding Name}" Foreground="{DynamicResource TextFillColorPrimaryBrush}" FontSize="14" FontWeight="Normal" TextTrimming="CharacterEllipsis"/>
                                                    <TextBlock Text="{Binding DisplayType}" Foreground="{DynamicResource TextFillColorSecondaryBrush}" FontSize="11"/>
                                                </StackPanel>
                                            </Grid>
                                        </Border>
                                    </Button>
                                </DataTemplate>
                            </ItemsControl.ItemTemplate>
                        </ItemsControl>
                    </ScrollViewer>
                </Grid>
            </Grid>
            <ui:ProgressRing IsIndeterminate="True" HorizontalAlignment="Center" VerticalAlignment="Center"
                              Visibility="{Binding IsLoading, Converter={StaticResource BooleanToVisibilityConverter}, FallbackValue=Collapsed}" />
        </Grid>
    </Border>
</UserControl>
/// Dialogs End of OmnisearchDialog.xaml ///

/// Dialogs Start of OmnisearchDialog.xaml.cs ///
﻿using skinhunter.ViewModels.Dialogs;

namespace skinhunter.Views.Dialogs
{
    public partial class OmnisearchDialog : System.Windows.Controls.UserControl
    {
        public OmnisearchViewModel? ViewModel => DataContext as OmnisearchViewModel;
        public OmnisearchDialog()
        {
            InitializeComponent();
        }
    }
}
/// Dialogs End of OmnisearchDialog.xaml.cs ///

/// Dialogs Start of SkinDetailDialog.xaml ///
<UserControl x:Class="skinhunter.Views.Dialogs.SkinDetailDialog"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:ui="http://schemas.lepo.co/wpfui/2022/xaml"
             xmlns:vm="clr-namespace:skinhunter.ViewModels.Dialogs"
             xmlns:m="clr-namespace:skinhunter.Models"
             xmlns:converters="clr-namespace:skinhunter.Converters"
             mc:Ignorable="d"
             d:DataContext="{d:DesignInstance Type=vm:SkinDetailViewModel, IsDesignTimeCreatable=False}"
             Width="850" MaxHeight="650" d:DesignWidth="850">
    <UserControl.Resources>
        <converters:BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
        <converters:InverseBooleanToVisibilityConverter x:Key="InverseBooleanToVisibilityConverter"/>
        <converters:NullToVisibilityConverter x:Key="NullToVisibilityConverter"/>
        <converters:ChromaToButtonTextConverter x:Key="ChromaToButtonTextConverter"/>
        <Style x:Key="CardBorderStyle" TargetType="Border">
            <Setter Property="Background" Value="{DynamicResource CardBackgroundFillColorDefaultBrush}"/>
            <Setter Property="BorderBrush" Value="{DynamicResource CardStrokeColorDefaultBrush}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="CornerRadius" Value="4"/>
            <Setter Property="Padding" Value="5"/>
        </Style>
        <Style x:Key="RadioButtonCardStyle" TargetType="RadioButton">
            <Setter Property="Foreground" Value="{DynamicResource TextFillColorPrimaryBrush}"/>
            <Setter Property="Background" Value="{DynamicResource CardBackgroundFillColorDefaultBrush}"/>
            <Setter Property="BorderBrush" Value="{DynamicResource CardStrokeColorDefaultBrush}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Padding" Value="0"/>
            <Setter Property="Cursor" Value="Hand"/>
            <Setter Property="Margin" Value="4"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Width" Value="85"/>
            <Setter Property="Height" Value="85"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="RadioButton">
                        <Border x:Name="border"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="4">
                            <ContentPresenter Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="True">
                                <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource AccentFillColorDefaultBrush}"/>
                                <Setter TargetName="border" Property="BorderThickness" Value="2"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource ControlFillColorSecondaryBrush}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </UserControl.Resources>
    <Border Background="{DynamicResource ApplicationBackgroundBrush}" CornerRadius="8" BorderBrush="{DynamicResource CardStrokeColorDefaultBrush}" BorderThickness="1">
        <Grid>
            <Grid Margin="20" Visibility="{Binding IsLoading, Converter={StaticResource InverseBooleanToVisibilityConverter}, FallbackValue=Collapsed}">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>

                <DockPanel Grid.Row="0" Grid.ColumnSpan="2" Margin="0,0,0,15" LastChildFill="False">
                    <ui:Button DockPanel.Dock="Right" Command="{Binding CloseDialogCommand}" Appearance="Transparent" ToolTipService.ToolTip="Close">
                        <ui:Button.Icon>
                            <ui:SymbolIcon Symbol="Dismiss24"/>
                        </ui:Button.Icon>
                    </ui:Button>
                    <StackPanel DockPanel.Dock="Left" Orientation="Horizontal">
                        <Image Source="{Binding SelectedSkin.RarityImageUrl}" Width="20" Height="20" Margin="0,0,8,0" VerticalAlignment="Center"
                               Visibility="{Binding SelectedSkin.RarityImageUrl, Converter={StaticResource NullToVisibilityConverter}}"/>
                        <TextBlock Text="{Binding SelectedSkin.Name}" Foreground="{DynamicResource TextFillColorPrimaryBrush}" FontSize="20" FontWeight="Bold" VerticalAlignment="Center"/>
                    </StackPanel>
                </DockPanel>

                <StackPanel Grid.Row="1" Grid.Column="0" Margin="0,0,25,0" MaxWidth="400">
                    <Border Style="{StaticResource CardBorderStyle}" Padding="0">
                        <Grid>
                            <Image Source="{Binding SelectedSkin.SplashImageUrl}" Height="240" Stretch="UniformToFill" VerticalAlignment="Top" />
                        </Grid>
                    </Border>
                    <ScrollViewer MaxHeight="150" VerticalScrollBarVisibility="Auto" Margin="0,15,0,0">
                        <TextBlock Text="{Binding SelectedSkin.Description, FallbackValue='This skin does not have a description.'}"
                                   Foreground="{DynamicResource TextFillColorSecondaryBrush}" FontSize="13" TextWrapping="Wrap"/>
                    </ScrollViewer>
                    <Border Background="#44FFFF00" BorderBrush="#FFFFCC00" BorderThickness="1" CornerRadius="3" Padding="8,5" Margin="0,15,0,0"
                            Visibility="{Binding SelectedSkin.IsLegacy, Converter={StaticResource BooleanToVisibilityConverter}}">
                        <TextBlock Text="This skin may not work properly due to game updates" FontSize="11" Foreground="#FFFFEEAA" TextWrapping="Wrap"/>
                    </Border>
                </StackPanel>

                <DockPanel Grid.Row="1" Grid.Column="1">
                    <StackPanel DockPanel.Dock="Top">
                        <TextBlock Margin="0,0,0,10" Foreground="{DynamicResource TextFillColorSecondaryBrush}">
                            <Run Text="View skin on "/>
                            <Hyperlink NavigateUri="{Binding KhadaViewerUrl}" RequestNavigate="Hyperlink_RequestNavigate" Foreground="{DynamicResource AccentTextFillColorPrimaryBrush}">
                                <Run Text="Model viewer"/>
                            </Hyperlink>
                        </TextBlock>
                    </StackPanel>
                    <Separator DockPanel.Dock="Top" Margin="0,0,0,15" Background="{DynamicResource CardStrokeColorDefaultBrush}"/>

                    <Border DockPanel.Dock="Bottom" Margin="0,15,0,0" Background="{DynamicResource InfoBadgeBackground}" BorderBrush="{DynamicResource InfoBadgeBackground}" BorderThickness="1" Padding="8,5" CornerRadius="3">
                        <TextBlock FontSize="12" Foreground="{DynamicResource TextFillColorSecondaryBrush}">
                             <Run Text="This is going to consume a credit"/>
                             <Run Text="{Binding UserCredits, StringFormat='({0} credits left)'}" Foreground="LightGreen"/>
                        </TextBlock>
                    </Border>

                    <StackPanel Orientation="Vertical">
                        <TextBlock Text="Chromas" Foreground="{DynamicResource TextFillColorPrimaryBrush}" FontSize="16" FontWeight="SemiBold" Margin="0,0,0,8"/>
                        <TabControl Padding="0" Margin="0,0,0,0">
                            <TabItem Header="Circles">
                                <StackPanel Orientation="Vertical" VerticalAlignment="Center" HorizontalAlignment="Center">
                                    <TextBlock Text="Select a variation to download." Foreground="{DynamicResource TextFillColorSecondaryBrush}" FontSize="12" Margin="0,8,0,8" FontStyle="Italic"/>
                                    <ScrollViewer VerticalScrollBarVisibility="Auto" MaxHeight="260" Padding="5,0,30,0" HorizontalScrollBarVisibility="Disabled">
                                        <ItemsControl ItemsSource="{Binding AvailableChromas}">
                                            <ItemsControl.ItemsPanel>
                                                <ItemsPanelTemplate>
                                                    <WrapPanel Orientation="Horizontal" ItemWidth="95" ItemHeight="105"/>
                                                </ItemsPanelTemplate>
                                            </ItemsControl.ItemsPanel>
                                            <ItemsControl.ItemTemplate>
                                                <DataTemplate DataType="{x:Type m:Chroma}">
                                                    <RadioButton GroupName="ChromaSelectionCircles" Style="{StaticResource RadioButtonCardStyle}"
                                                                 IsChecked="{Binding IsSelected, Mode=TwoWay}"
                                                                 Command="{Binding DataContext.ToggleChromaSelectionCommand, RelativeSource={RelativeSource AncestorType={x:Type UserControl}}}"
                                                                 CommandParameter="{Binding}">
                                                        <StackPanel VerticalAlignment="Center" HorizontalAlignment="Center">
                                                            <Ellipse Width="50" Height="50" Stroke="{DynamicResource CardStrokeColorDefaultBrush}" StrokeThickness="1" Fill="{Binding ColorBrush}" Margin="0,5,0,5"/>
                                                            <TextBlock Text="{Binding Name}" HorizontalAlignment="Center" FontSize="11" TextTrimming="CharacterEllipsis" Margin="0,0,0,5" MaxWidth="75" TextAlignment="Center" TextWrapping="Wrap"/>
                                                        </StackPanel>
                                                    </RadioButton>
                                                </DataTemplate>
                                            </ItemsControl.ItemTemplate>
                                        </ItemsControl>
                                    </ScrollViewer>
                                </StackPanel>
                            </TabItem>
                            <TabItem Header="Images">
                                <StackPanel Orientation="Vertical" VerticalAlignment="Center" HorizontalAlignment="Center">
                                    <TextBlock Text="Select a variation to download." Foreground="{DynamicResource TextFillColorSecondaryBrush}" FontSize="12" Margin="0,8,0,8" FontStyle="Italic"/>
                                    <ScrollViewer VerticalScrollBarVisibility="Auto" MaxHeight="260" Padding="5,0,30,0" HorizontalScrollBarVisibility="Disabled">
                                        <ItemsControl ItemsSource="{Binding AvailableChromas}">
                                            <ItemsControl.ItemsPanel>
                                                <ItemsPanelTemplate>
                                                    <WrapPanel Orientation="Horizontal" ItemWidth="95" ItemHeight="105"/>
                                                </ItemsPanelTemplate>
                                            </ItemsControl.ItemsPanel>
                                            <ItemsControl.ItemTemplate>
                                                <DataTemplate DataType="{x:Type m:Chroma}">
                                                    <RadioButton GroupName="ChromaSelectionImages" Style="{StaticResource RadioButtonCardStyle}"
                                                                 IsChecked="{Binding IsSelected, Mode=TwoWay}"
                                                                 Command="{Binding DataContext.ToggleChromaSelectionCommand, RelativeSource={RelativeSource AncestorType={x:Type UserControl}}}"
                                                                 CommandParameter="{Binding}">
                                                        <StackPanel VerticalAlignment="Center" HorizontalAlignment="Center">
                                                            <Image Source="{Binding ImageUrl}" Width="60" Height="60" Stretch="Uniform" Margin="0,5,0,5" RenderOptions.BitmapScalingMode="HighQuality"/>
                                                            <TextBlock Text="{Binding Name}" HorizontalAlignment="Center" FontSize="11" TextTrimming="CharacterEllipsis" Margin="0,0,0,5" MaxWidth="75" TextAlignment="Center" TextWrapping="Wrap"/>
                                                        </StackPanel>
                                                    </RadioButton>
                                                </DataTemplate>
                                            </ItemsControl.ItemTemplate>
                                        </ItemsControl>
                                    </ScrollViewer>
                                </StackPanel>
                            </TabItem>
                        </TabControl>
                    </StackPanel>
                </DockPanel>

                <Grid Grid.Row="2" Grid.ColumnSpan="2" Margin="0,20,0,0">
                    <ui:Button Content="Close" HorizontalAlignment="Left" Width="90" Appearance="Secondary"
                            Command="{Binding CloseDialogCommand}"/>
                    <ui:Button Content="{Binding SelectedChroma, Converter={StaticResource ChromaToButtonTextConverter}, FallbackValue='Download Skin'}"
                             Appearance="Primary" HorizontalAlignment="Right" Width="150"
                             Command="{Binding DownloadSkinCommand}"
                             IsEnabled="{Binding CanDownload}">
                        <ui:Button.Icon>
                            <ui:SymbolIcon Symbol="ArrowDownload24" Foreground="{DynamicResource TextOnAccentFillColorPrimaryBrush}"/>
                        </ui:Button.Icon>
                    </ui:Button>
                </Grid>
            </Grid>
            <ui:ProgressRing IsIndeterminate="True" HorizontalAlignment="Center" VerticalAlignment="Center"
                              Visibility="{Binding IsLoading, Converter={StaticResource BooleanToVisibilityConverter}, FallbackValue=Collapsed}" />
        </Grid>
    </Border>
</UserControl>
/// Dialogs End of SkinDetailDialog.xaml ///

/// Dialogs Start of SkinDetailDialog.xaml.cs ///
﻿using System.Windows.Navigation;
using System.Diagnostics;

namespace skinhunter.Views.Dialogs
{
    public partial class SkinDetailDialog : System.Windows.Controls.UserControl
    {
        public SkinDetailDialog()
        {
            InitializeComponent();
        }

        private void Hyperlink_RequestNavigate(object sender, RequestNavigateEventArgs e)
        {
            try
            {
                Process.Start(new ProcessStartInfo(e.Uri.AbsoluteUri) { UseShellExecute = true });
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"Failed to open hyperlink: {ex.Message}");
                System.Windows.MessageBox.Show($"Could not open link: {e.Uri.AbsoluteUri}", "Error", MessageBoxButton.OK, MessageBoxImage.Warning);
            }
            e.Handled = true;
        }
    }
}
/// Dialogs End of SkinDetailDialog.xaml.cs ///

/// Pages Start of ChampionDetailPage.xaml ///
<Page
    x:Class="skinhunter.Views.Pages.ChampionDetailPage"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:ui="http://schemas.lepo.co/wpfui/2022/xaml"
    xmlns:vm="clr-namespace:skinhunter.ViewModels.Pages"
    xmlns:m="clr-namespace:skinhunter.Models"
    xmlns:converters="clr-namespace:skinhunter.Converters"
    mc:Ignorable="d"
    x:Name="ChampionDetailPageSelf" 
    d:DataContext="{d:DesignInstance Type=vm:ChampionDetailPageViewModel, IsDesignTimeCreatable=False}"
    Foreground="{DynamicResource TextFillColorPrimaryBrush}">
    <Page.Resources>
        <converters:BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
        <converters:InverseBooleanToVisibilityConverter x:Key="InverseBooleanToVisibilityConverter"/>
        <converters:NullToVisibilityConverter x:Key="NullToVisibilityConverter"/>

        <Storyboard x:Key="FadeInContentStoryboard">
            <DoubleAnimation
                Storyboard.TargetProperty="Opacity"
                From="0.0" To="1.0" Duration="0:0:0.5" />
        </Storyboard>
    </Page.Resources>
    <Grid Margin="28,12,28,20" DataContext="{Binding ViewModel, ElementName=ChampionDetailPageSelf}">
        <Grid x:Name="PageContentGrid" Opacity="0">
            <Grid.Style>
                <Style TargetType="Grid">
                    <Setter Property="Visibility" Value="Collapsed" />
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding IsLoading, FallbackValue=True}" Value="False">
                            <Setter Property="Visibility" Value="Visible"/>
                            <Setter Property="Opacity" Value="0"/>
                            <DataTrigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource FadeInContentStoryboard}"/>
                            </DataTrigger.EnterActions>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </Grid.Style>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="*"/>
            </Grid.RowDefinitions>

            <StackPanel Grid.Row="0" Orientation="Horizontal" Margin="0,0,0,15">
                <ui:Button Command="{Binding GoBackCommand}" Appearance="Secondary" VerticalAlignment="Center">
                    <ui:Button.Icon>
                        <ui:SymbolIcon Symbol="ArrowLeft24" />
                    </ui:Button.Icon>
                </ui:Button>
            </StackPanel>

            <Border Grid.Row="1" Padding="20" Background="{DynamicResource ControlFillColorDefaultBrush}" CornerRadius="8" Margin="0,0,0,20" VerticalAlignment="Center" HorizontalAlignment="Center"
                    Visibility="{Binding Champion, Converter={StaticResource NullToVisibilityConverter}}">
                <StackPanel Orientation="Horizontal" HorizontalAlignment="Left">
                    <Border Width="120" Height="120" CornerRadius="4" Margin="0,0,25,0" Background="{DynamicResource ControlFillColorTertiaryBrush}" ClipToBounds="True">
                        <Image Source="{Binding Champion.ChampionImageSource}" Stretch="Uniform" RenderOptions.BitmapScalingMode="Fant"/>
                    </Border>
                    <StackPanel VerticalAlignment="Center" MaxWidth="600" HorizontalAlignment="Center">
                        <TextBlock Text="{Binding Champion.Name, FallbackValue='Champion Details'}" FontSize="24" FontWeight="SemiBold" VerticalAlignment="Center" Margin="0,0,0,0" Foreground="{DynamicResource TextFillColorPrimaryBrush}"/>
                        <TextBlock Text="{Binding Champion.Title}" Foreground="{DynamicResource TextFillColorSecondaryBrush}" FontSize="18" FontStyle="Italic" Margin="0,0,0,8" TextWrapping="Wrap"/>
                        <TextBlock Text="{Binding Champion.ShortBio}" Foreground="{DynamicResource TextFillColorTertiaryBrush}" FontSize="14" TextWrapping="WrapWithOverflow"/>
                    </StackPanel>
                </StackPanel>
            </Border>

            <ScrollViewer Grid.Row="2" VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Disabled" Focusable="True">
                <ItemsControl ItemsSource="{Binding Skins}"
                              VirtualizingPanel.IsVirtualizing="True" VirtualizingPanel.VirtualizationMode="Recycling"
                              HorizontalAlignment="Stretch">
                    <ItemsControl.ItemsPanel>
                        <ItemsPanelTemplate>
                            <WrapPanel Orientation="Horizontal" HorizontalAlignment="Center"/>
                        </ItemsPanelTemplate>
                    </ItemsControl.ItemsPanel>
                    <ItemsControl.ItemTemplate>
                        <DataTemplate DataType="{x:Type m:Skin}">
                            <ui:CardAction
                                Padding="0" Margin="8" Width="210" Height="260"
                                HorizontalContentAlignment="Stretch" VerticalContentAlignment="Stretch"
                                Background="Transparent" BorderThickness="1"
                                IsChevronVisible="False" Cursor="Hand"
                                BorderBrush="{DynamicResource CardStrokeColorDefaultBrush}"
                                Command="{Binding DataContext.SelectSkinCommand, ElementName=ChampionDetailPageSelf}"
                                CommandParameter="{Binding}">
                                <Grid>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="*"/>
                                        <RowDefinition Height="Auto"/>
                                    </Grid.RowDefinitions>
                                    <Border CornerRadius="5,5,0,0" Background="{DynamicResource ControlFillColorInputActiveBrush}">
                                        <Image Source="{Binding TileImageUrl}" Stretch="UniformToFill" VerticalAlignment="Top" RenderOptions.BitmapScalingMode="HighQuality"/>
                                    </Border>
                                    <Image Source="pack://application:,,,/Assets/legacy-icon.png" Width="24" Height="24" Opacity="0.8"
                                            HorizontalAlignment="Left" VerticalAlignment="Top" Margin="10,8,0,0"
                                            Visibility="{Binding IsLegacy, Converter={StaticResource BooleanToVisibilityConverter}}"/>
                                    <Image Source="pack://application:,,,/Assets/chroma-icon.png" Width="24" Height="24" Opacity="0.8"
                                            HorizontalAlignment="Right" VerticalAlignment="Top" Margin="0,8,10,0"
                                            Visibility="{Binding HasChromas, Converter={StaticResource BooleanToVisibilityConverter}}"/>
                                    <Border Grid.Row="1" Padding="10,8" Background="{DynamicResource CardBackgroundFillColorSecondaryBrush}" CornerRadius="0,0,5,5">
                                        <StackPanel Orientation="Horizontal" HorizontalAlignment="Center">
                                            <Image Source="{Binding RarityImageUrl}" Width="16" Height="16" Margin="0,0,8,0" VerticalAlignment="Center"
                                                   Visibility="{Binding RarityImageUrl, Converter={StaticResource NullToVisibilityConverter}}"/>
                                            <TextBlock Text="{Binding Name}" FontSize="13" FontWeight="Medium" VerticalAlignment="Center" TextTrimming="CharacterEllipsis" TextAlignment="Center" MaxWidth="170"/>
                                        </StackPanel>
                                    </Border>
                                </Grid>
                            </ui:CardAction>
                        </DataTemplate>
                    </ItemsControl.ItemTemplate>
                </ItemsControl>
            </ScrollViewer>
        </Grid>
        <ui:ProgressRing IsIndeterminate="True" HorizontalAlignment="Center" VerticalAlignment="Center"
                         Visibility="{Binding IsLoading, Converter={StaticResource BooleanToVisibilityConverter}, FallbackValue=Collapsed}" />
    </Grid>
</Page>
/// Pages End of ChampionDetailPage.xaml ///

/// Pages Start of ChampionDetailPage.xaml.cs ///
﻿using skinhunter.ViewModels.Pages;
using Wpf.Ui.Abstractions.Controls;

namespace skinhunter.Views.Pages
{
    public partial class ChampionDetailPage : INavigableView<ChampionDetailPageViewModel>
    {
        public ChampionDetailPageViewModel ViewModel { get; }

        public ChampionDetailPage(ChampionDetailPageViewModel viewModel)
        {
            ViewModel = viewModel;
            DataContext = ViewModel;
            InitializeComponent();
        }
    }
}
/// Pages End of ChampionDetailPage.xaml.cs ///

/// Pages Start of ChampionGridPage.xaml ///
<Page
    x:Class="skinhunter.Views.Pages.ChampionGridPage"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:ui="http://schemas.lepo.co/wpfui/2022/xaml"
    xmlns:vm="clr-namespace:skinhunter.ViewModels.Pages"
    xmlns:m="clr-namespace:skinhunter.Models"
    xmlns:converters="clr-namespace:skinhunter.Converters"
    mc:Ignorable="d"
    d:DataContext="{d:DesignInstance Type=vm:ChampionGridPageViewModel, IsDesignTimeCreatable=False}"
    Foreground="{DynamicResource TextFillColorPrimaryBrush}">
    <Page.Resources>
        <converters:BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
        <!-- Eliminado el Style explícito para ui:TextBox para depender del global -->
        <Style TargetType="ComboBox" BasedOn="{StaticResource {x:Type ComboBox}}">
            <Setter Property="MinWidth" Value="150"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="Height" Value="36"/>
        </Style>
        <Storyboard x:Key="FadeInContentStoryboard">
            <DoubleAnimation
                Storyboard.TargetProperty="Opacity"
                From="0.0" To="1.0" Duration="0:0:0.3" />
        </Storyboard>
    </Page.Resources>
    <Grid Margin="28,12,28,20">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>

        <TextBlock Grid.Row="0" Text="Champions" FontSize="24" FontWeight="SemiBold" Margin="0,0,0,15" Foreground="{DynamicResource TextFillColorPrimaryBrush}"/>

        <StackPanel Grid.Row="1" Orientation="Horizontal" Margin="0,0,0,20">
            <!-- ui:TextBox sin estilo explícito aquí, confiando en ControlsDictionary -->
            <ui:TextBox PlaceholderText="Search Champions..."
                        Text="{Binding ViewModel.SearchText, UpdateSourceTrigger=PropertyChanged}"
                        MinWidth="250" Margin="0,0,15,0" Height="36" VerticalContentAlignment="Center">
                <ui:TextBox.Icon>
                    <ui:SymbolIcon Symbol="Search24" />
                </ui:TextBox.Icon>
            </ui:TextBox>

            <TextBlock Text="Role:" VerticalAlignment="Center" Margin="20,0,8,0" Foreground="{DynamicResource TextFillColorSecondaryBrush}"/>
            <ComboBox ItemsSource="{Binding ViewModel.AllRoles}" 
                      SelectedItem="{Binding ViewModel.SelectedRole, Mode=TwoWay}"/>
        </StackPanel>

        <Grid Grid.Row="2">
            <ui:ProgressRing IsIndeterminate="True" HorizontalAlignment="Center" VerticalAlignment="Center"
                             Visibility="{Binding ViewModel.IsLoading, Converter={StaticResource BooleanToVisibilityConverter}, FallbackValue=Collapsed}" />

            <ScrollViewer x:Name="ChampionsScrollViewer" VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Disabled" Focusable="True">
                <ScrollViewer.Style>
                    <Style TargetType="ScrollViewer">
                        <Setter Property="Opacity" Value="0"/>
                        <Setter Property="Visibility" Value="Collapsed" />
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding ViewModel.ShowContentWithAnimation}" Value="True">
                                <Setter Property="Visibility" Value="Visible"/>
                                <DataTrigger.EnterActions>
                                    <BeginStoryboard Storyboard="{StaticResource FadeInContentStoryboard}"/>
                                </DataTrigger.EnterActions>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding ViewModel.ShowContentWithAnimation}" Value="False">
                                <Setter Property="Visibility" Value="Collapsed"/>
                                <Setter Property="Opacity" Value="0"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </ScrollViewer.Style>
                <ItemsControl ItemsSource="{Binding ViewModel.ChampionsView}"
                              VirtualizingPanel.IsVirtualizing="True" VirtualizingPanel.VirtualizationMode="Recycling"
                              HorizontalAlignment="Stretch" VerticalAlignment="Top">
                    <ItemsControl.ItemsPanel>
                        <ItemsPanelTemplate>
                            <WrapPanel Orientation="Horizontal" HorizontalAlignment="Center"/>
                        </ItemsPanelTemplate>
                    </ItemsControl.ItemsPanel>
                    <ItemsControl.ItemTemplate>
                        <DataTemplate DataType="{x:Type m:ChampionSummary}">
                            <ui:CardAction
                                    Padding="0" Margin="8" Width="100" Height="130" 
                                    HorizontalContentAlignment="Stretch" VerticalContentAlignment="Stretch"
                                    Background="Transparent" BorderThickness="1"
                                    IsChevronVisible="False" 
                                    Cursor="Hand"
                                    BorderBrush="{DynamicResource ControlStrokeColorDefaultBrush}"
                                    Command="{Binding DataContext.ViewModel.SelectChampionCommand, RelativeSource={RelativeSource AncestorType={x:Type Page}}}"
                                    CommandParameter="{Binding}">
                                <Grid>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="90"/>
                                        <RowDefinition Height="Auto"/>
                                    </Grid.RowDefinitions>
                                    <Border CornerRadius="5,5,0,0" Background="{DynamicResource ControlFillColorInputActiveBrush}">
                                        <Image Source="{Binding ChampionImageSource}" Stretch="Uniform" Margin="5"
                                                   RenderOptions.BitmapScalingMode="Fant"/>
                                    </Border>
                                    <Border Grid.Row="1" Padding="8,5" MinHeight="40" Background="{DynamicResource CardBackgroundFillColorSecondaryBrush}" CornerRadius="0,0,5,5">
                                        <TextBlock Text="{Binding Name}" HorizontalAlignment="Center" VerticalAlignment="Center"
                                                   Foreground="{DynamicResource TextFillColorPrimaryBrush}" FontSize="12" 
                                                   TextTrimming="CharacterEllipsis" TextAlignment="Center" TextWrapping="Wrap"/>
                                    </Border>
                                </Grid>
                            </ui:CardAction>
                        </DataTemplate>
                    </ItemsControl.ItemTemplate>
                </ItemsControl>
            </ScrollViewer>
        </Grid>
    </Grid>
</Page>
/// Pages End of ChampionGridPage.xaml ///

/// Pages Start of ChampionGridPage.xaml.cs ///
﻿using skinhunter.ViewModels.Pages;
using Wpf.Ui.Abstractions.Controls; // Para INavigableView

namespace skinhunter.Views.Pages
{
    public partial class ChampionGridPage : INavigableView<ChampionGridPageViewModel>
    {
        // Esta propiedad ViewModel es llenada por DI cuando la página se crea.
        public ChampionGridPageViewModel ViewModel { get; }

        public ChampionGridPage(ChampionGridPageViewModel viewModel)
        {
            ViewModel = viewModel; // El ViewModel inyectado se asigna a la propiedad ViewModel.
            DataContext = this;    // <<--- ¡ESTA LÍNEA ES CRUCIAL!
                                   // Establece el DataContext de la página a sí misma.
                                   // Esto permite que el XAML use bindings como {Binding ViewModel.SearchText}

            InitializeComponent();
        }
    }
}
/// Pages End of ChampionGridPage.xaml.cs ///

/// Pages Start of DashboardPage.xaml ///
﻿<Page
    x:Class="skinhunter.Views.Pages.DashboardPage"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:local="clr-namespace:skinhunter.Views.Pages"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:ui="http://schemas.lepo.co/wpfui/2022/xaml"
    Title="DashboardPage"
    d:DataContext="{d:DesignInstance local:DashboardPage,
                                     IsDesignTimeCreatable=False}"
    d:DesignHeight="450"
    d:DesignWidth="800"
    ui:Design.Background="{DynamicResource ApplicationBackgroundBrush}"
    ui:Design.Foreground="{DynamicResource TextFillColorPrimaryBrush}"
    Foreground="{DynamicResource TextFillColorPrimaryBrush}"
    mc:Ignorable="d">

    <Grid VerticalAlignment="Top">
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="Auto" />
            <ColumnDefinition Width="Auto" />
        </Grid.ColumnDefinitions>

        <ui:Button
            Grid.Column="0"
            Command="{Binding ViewModel.CounterIncrementCommand, Mode=OneWay}"
            Content="Click me!"
            Icon="Fluent24" />
        <TextBlock
            Grid.Column="1"
            Margin="12,0,0,0"
            VerticalAlignment="Center"
            Text="{Binding ViewModel.Counter, Mode=OneWay}" />
    </Grid>
</Page>

/// Pages End of DashboardPage.xaml ///

/// Pages Start of DashboardPage.xaml.cs ///
﻿using skinhunter.ViewModels.Pages;
using Wpf.Ui.Abstractions.Controls;

namespace skinhunter.Views.Pages
{
    public partial class DashboardPage : INavigableView<DashboardViewModel>
    {
        public DashboardViewModel ViewModel { get; }

        public DashboardPage(DashboardViewModel viewModel)
        {
            ViewModel = viewModel;
            DataContext = this;

            InitializeComponent();
        }
    }
}

/// Pages End of DashboardPage.xaml.cs ///

/// Pages Start of DataPage.xaml ///
<Page
    x:Class="skinhunter.Views.Pages.DataPage"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:local="clr-namespace:skinhunter.Views.Pages"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:models="clr-namespace:skinhunter.Models"
    xmlns:ui="http://schemas.lepo.co/wpfui/2022/xaml"
    Title="DataPage"
    d:DataContext="{d:DesignInstance local:DataPage,
                                     IsDesignTimeCreatable=False}"
    d:DesignHeight="450"
    d:DesignWidth="800"
    ui:Design.Background="{DynamicResource ApplicationBackgroundBrush}"
    ui:Design.Foreground="{DynamicResource TextFillColorPrimaryBrush}"
    Foreground="{DynamicResource TextFillColorPrimaryBrush}"
    ScrollViewer.CanContentScroll="False"
    mc:Ignorable="d">

    <Grid>
        <ui:VirtualizingItemsControl
            Foreground="{DynamicResource TextFillColorSecondaryBrush}"
            ItemsSource="{Binding ViewModel.Colors, Mode=OneWay}"
            VirtualizingPanel.CacheLengthUnit="Item">
            <ItemsControl.ItemTemplate>
                <DataTemplate DataType="{x:Type models:DataColor}">
                    <ui:Button
                        Width="80"
                        Height="80"
                        Margin="2"
                        Padding="0"
                        HorizontalAlignment="Stretch"
                        VerticalAlignment="Stretch"
                        Appearance="Secondary"
                        Background="{Binding Color, Mode=OneWay}"
                        FontSize="25"
                        Icon="Fluent24" />
                </DataTemplate>
            </ItemsControl.ItemTemplate>
        </ui:VirtualizingItemsControl>
    </Grid>
</Page>

/// Pages End of DataPage.xaml ///

/// Pages Start of DataPage.xaml.cs ///
﻿using skinhunter.ViewModels.Pages;
using Wpf.Ui.Abstractions.Controls;

namespace skinhunter.Views.Pages
{
    public partial class DataPage : INavigableView<DataViewModel>
    {
        public DataViewModel ViewModel { get; }

        public DataPage(DataViewModel viewModel)
        {
            ViewModel = viewModel;
            DataContext = this;

            InitializeComponent();
        }
    }
}

/// Pages End of DataPage.xaml.cs ///

/// Pages Start of SettingsPage.xaml ///
﻿<Page
    x:Class="skinhunter.Views.Pages.SettingsPage"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:helpers="clr-namespace:skinhunter.Helpers"
    xmlns:local="clr-namespace:skinhunter.Views.Pages"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:ui="http://schemas.lepo.co/wpfui/2022/xaml"
    Title="SettingsPage"
    d:DataContext="{d:DesignInstance local:SettingsPage,
                                     IsDesignTimeCreatable=False}"
    d:DesignHeight="450"
    d:DesignWidth="800"
    ui:Design.Background="{DynamicResource ApplicationBackgroundBrush}"
    ui:Design.Foreground="{DynamicResource TextFillColorPrimaryBrush}"
    Foreground="{DynamicResource TextFillColorPrimaryBrush}"
    mc:Ignorable="d">
    <Page.Resources>
        <helpers:EnumToBooleanConverter x:Key="EnumToBooleanConverter" />
    </Page.Resources>

    <StackPanel>
        <TextBlock
            FontSize="20"
            FontWeight="Medium"
            Text="Personalization" />
        <TextBlock Margin="0,12,0,0" Text="Theme" />
        <RadioButton
            Margin="0,12,0,0"
            Command="{Binding ViewModel.ChangeThemeCommand, Mode=OneWay}"
            CommandParameter="theme_light"
            Content="Light"
            GroupName="themeSelect"
            IsChecked="{Binding ViewModel.CurrentTheme, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter=Light, Mode=OneWay}" />
        <RadioButton
            Margin="0,8,0,0"
            Command="{Binding ViewModel.ChangeThemeCommand, Mode=OneWay}"
            CommandParameter="theme_dark"
            Content="Dark"
            GroupName="themeSelect"
            IsChecked="{Binding ViewModel.CurrentTheme, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter=Dark, Mode=OneWay}" />

        <TextBlock
            Margin="0,24,0,0"
            FontSize="20"
            FontWeight="Medium"
            Text="About skinhunter" />
        <TextBlock Margin="0,12,0,0" Text="{Binding ViewModel.AppVersion, Mode=OneWay}" />
    </StackPanel>
</Page>

/// Pages End of SettingsPage.xaml ///

/// Pages Start of SettingsPage.xaml.cs ///
﻿using skinhunter.ViewModels.Pages;
using Wpf.Ui.Abstractions.Controls;

namespace skinhunter.Views.Pages
{
    public partial class SettingsPage : INavigableView<SettingsViewModel>
    {
        public SettingsViewModel ViewModel { get; }

        public SettingsPage(SettingsViewModel viewModel)
        {
            ViewModel = viewModel;
            DataContext = this;

            InitializeComponent();
        }
    }
}

/// Pages End of SettingsPage.xaml.cs ///

/// Windows Start of MainWindow.xaml ///
﻿<ui:FluentWindow
    x:Class="skinhunter.Views.Windows.MainWindow"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:local="clr-namespace:skinhunter.Views.Windows"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:ui="http://schemas.lepo.co/wpfui/2022/xaml"
    xmlns:vmWindows="clr-namespace:skinhunter.ViewModels.Windows"
    xmlns:vmDialogs="clr-namespace:skinhunter.ViewModels.Dialogs"
    xmlns:viewsDialogs="clr-namespace:skinhunter.Views.Dialogs"
    xmlns:converters="clr-namespace:skinhunter.Converters"
    Title="{Binding ViewModel.ApplicationTitle, Mode=OneWay}"
    Width="1280"
    Height="720" MinHeight="600" MinWidth="1000"
    d:DataContext="{d:DesignInstance Type=vmWindows:MainWindowViewModel, IsDesignTimeCreatable=True}"
    ExtendsContentIntoTitleBar="True"
    Foreground="{DynamicResource TextFillColorPrimaryBrush}"
    WindowBackdropType="Mica"
    WindowCornerPreference="Round"
    WindowStartupLocation="CenterScreen"
    mc:Ignorable="d">
    <Window.Resources>
        <converters:NullToVisibilityConverter x:Key="NullToVisibilityConverter"/>
    </Window.Resources>
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
        </Grid.RowDefinitions>
        <ui:NavigationView
            x:Name="RootNavigation"
            Grid.Row="1"
            IsBackButtonVisible="Visible"
            IsPaneToggleVisible="True"
            MenuItemsSource="{Binding ViewModel.MenuItems, Mode=OneWay}"
            FooterMenuItemsSource="{Binding ViewModel.FooterMenuItems, Mode=OneWay}"
            PaneDisplayMode="LeftFluent"
            HeaderVisibility="Collapsed" 
            Padding="0">
            <ui:NavigationView.ContentOverlay>
                <Grid>
                    <ui:SnackbarPresenter x:Name="SnackbarPresenter" />
                </Grid>
            </ui:NavigationView.ContentOverlay>
        </ui:NavigationView>

        <ContentPresenter
            x:Name="RootContentDialog"
            Grid.Row="0"
            Grid.RowSpan="2" />

        <ui:TitleBar
            x:Name="TitleBar"
            Title="{Binding ViewModel.ApplicationTitle}"
            Grid.Row="0"
            CloseWindowByDoubleClickOnIcon="True">
            <ui:TitleBar.Icon>
                <ui:ImageIcon Source="pack://application:,,,/Assets/logo.png" />
            </ui:TitleBar.Icon>
        </ui:TitleBar>

        <Grid Grid.Row="0" Grid.RowSpan="2" 
              Background="#A0000000"
              Visibility="{Binding ViewModel.DialogViewModel, Converter={StaticResource NullToVisibilityConverter}, FallbackValue=Collapsed}">
            <ContentControl Content="{Binding ViewModel.DialogViewModel}" HorizontalAlignment="Center" VerticalAlignment="Center">
                <ContentControl.Resources>
                    <DataTemplate DataType="{x:Type vmDialogs:SkinDetailViewModel}">
                        <viewsDialogs:SkinDetailDialog/>
                    </DataTemplate>
                </ContentControl.Resources>
            </ContentControl>
        </Grid>

        <Grid Grid.Row="0" Grid.RowSpan="2" 
              Background="#A0000000" 
              Visibility="{Binding ViewModel.OmnisearchDialogViewModel, Converter={StaticResource NullToVisibilityConverter}, FallbackValue=Collapsed}">
            <ContentControl Content="{Binding ViewModel.OmnisearchDialogViewModel}" 
                            HorizontalAlignment="Center" 
                            VerticalAlignment="Center">
                <ContentControl.Resources>
                    <DataTemplate DataType="{x:Type vmDialogs:OmnisearchViewModel}">
                        <viewsDialogs:OmnisearchDialog/>
                    </DataTemplate>
                </ContentControl.Resources>
            </ContentControl>
        </Grid>
    </Grid>
</ui:FluentWindow>
/// Windows End of MainWindow.xaml ///

/// Windows Start of MainWindow.xaml.cs ///
﻿using skinhunter.ViewModels.Windows;
using Wpf.Ui;
using Wpf.Ui.Abstractions; // Para INavigationViewPageProvider e INavigationWindow
using Wpf.Ui.Appearance;
using Wpf.Ui.Controls;
using Microsoft.Extensions.DependencyInjection;

namespace skinhunter.Views.Windows
{
    public partial class MainWindow : INavigationWindow // Asegurarse que : INavigationWindow está aquí
    {
        public MainWindowViewModel ViewModel { get; }
        private readonly IServiceProvider _serviceProvider; // Para el método SetServiceProvider

        public MainWindow(
            MainWindowViewModel viewModel,
            IServiceProvider serviceProvider,
            INavigationService navigationService // El INavigationService global
        )
        {
            ViewModel = viewModel;
            DataContext = this;
            _serviceProvider = serviceProvider; // Guardar para SetServiceProvider si fuera necesario directamente por WPF-UI internamente

            SystemThemeWatcher.Watch(this);

            InitializeComponent();

            // Configurar el INavigationView con el PageService (INavigationViewPageProvider)
            var pageProvider = _serviceProvider.GetRequiredService<INavigationViewPageProvider>();
            SetPageService(pageProvider); // Este método es de INavigationWindow

            // Configurar el servicio de navegación con el control de navegación de esta ventana
            navigationService.SetNavigationControl(RootNavigation);

            // El método SetServiceProvider de la INTERFAZ INavigationWindow.
            // Este método es para un caso de uso donde el INavigationViewPageProvider
            // es creado sin conocimiento del IServiceProvider y necesita ser inyectado después.
            // Dado que AddNavigationViewPageProvider() ya lo configura con DI,
            // esta llamada podría no ser estrictamente necesaria para *nuestro* código,
            // pero es parte de la interfaz y algunas lógicas internas de WPF-UI podrían esperarlo.
            SetServiceProvider(serviceProvider);
        }

        #region INavigationWindow methods

        public INavigationView GetNavigation() => RootNavigation;

        public bool Navigate(Type pageType) => RootNavigation.Navigate(pageType);

        // Implementación explícita o implícita de SetPageService
        public void SetPageService(INavigationViewPageProvider pageProvider)
        {
            RootNavigation.SetPageProviderService(pageProvider);
        }

        // Implementación explícita o implícita de SetServiceProvider
        public void SetServiceProvider(IServiceProvider serviceProvider)
        {
            // Aunque nuestro INavigationViewPageProvider ya está configurado con DI,
            // la interfaz INavigationWindow lo requiere.
            // Aquí podríamos hacer algo si fuera necesario, o simplemente cumplir la interfaz.
            // El RootNavigation.SetServiceProvider() podría ser relevante si INavigationView lo tuviera.
            // Por ahora, cumplimos la interfaz. Si el INavigationView necesita el provider directamente,
            // ya se lo pasamos con SetPageProviderService.
            RootNavigation.SetServiceProvider(serviceProvider); // NavigationView también tiene este método.
        }

        public void ShowWindow() => Show();

        public void CloseWindow() => Close();

        #endregion INavigationWindow methods

        protected override void OnClosed(EventArgs e)
        {
            base.OnClosed(e);
            Application.Current.Shutdown();
        }
    }
}
/// Windows End of MainWindow.xaml.cs ///

/// Windows Start of MainWindow.xaml ///
﻿<ui:FluentWindow
    x:Class="skinhunter.Views.Windows.MainWindow"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:local="clr-namespace:skinhunter.Views.Windows"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:ui="http://schemas.lepo.co/wpfui/2022/xaml"
    xmlns:vmWindows="clr-namespace:skinhunter.ViewModels.Windows"
    xmlns:vmDialogs="clr-namespace:skinhunter.ViewModels.Dialogs"
    xmlns:viewsDialogs="clr-namespace:skinhunter.Views.Dialogs"
    xmlns:converters="clr-namespace:skinhunter.Converters"
    Title="{Binding ViewModel.ApplicationTitle, Mode=OneWay}"
    Width="1280"
    Height="720" MinHeight="600" MinWidth="1000"
    d:DataContext="{d:DesignInstance Type=vmWindows:MainWindowViewModel, IsDesignTimeCreatable=True}"
    ExtendsContentIntoTitleBar="True"
    Foreground="{DynamicResource TextFillColorPrimaryBrush}"
    WindowBackdropType="Mica"
    WindowCornerPreference="Round"
    WindowStartupLocation="CenterScreen"
    mc:Ignorable="d">
    <Window.Resources>
        <converters:NullToVisibilityConverter x:Key="NullToVisibilityConverter"/>
    </Window.Resources>
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
        </Grid.RowDefinitions>
        <ui:NavigationView
            x:Name="RootNavigation"
            Grid.Row="1"
            IsBackButtonVisible="Visible"
            IsPaneToggleVisible="True"
            MenuItemsSource="{Binding ViewModel.MenuItems, Mode=OneWay}"
            FooterMenuItemsSource="{Binding ViewModel.FooterMenuItems, Mode=OneWay}"
            PaneDisplayMode="LeftFluent"
            HeaderVisibility="Collapsed" 
            Padding="0">
            <ui:NavigationView.ContentOverlay>
                <Grid>
                    <ui:SnackbarPresenter x:Name="SnackbarPresenter" />
                </Grid>
            </ui:NavigationView.ContentOverlay>
        </ui:NavigationView>

        <ContentPresenter
            x:Name="RootContentDialog"
            Grid.Row="0"
            Grid.RowSpan="2" />

        <ui:TitleBar
            x:Name="TitleBar"
            Title="{Binding ViewModel.ApplicationTitle}"
            Grid.Row="0"
            CloseWindowByDoubleClickOnIcon="True">
            <ui:TitleBar.Icon>
                <ui:ImageIcon Source="pack://application:,,,/Assets/logo.png" />
            </ui:TitleBar.Icon>
        </ui:TitleBar>

        <Grid Grid.Row="0" Grid.RowSpan="2" 
              Background="#A0000000"
              Visibility="{Binding ViewModel.DialogViewModel, Converter={StaticResource NullToVisibilityConverter}, FallbackValue=Collapsed}">
            <ContentControl Content="{Binding ViewModel.DialogViewModel}" HorizontalAlignment="Center" VerticalAlignment="Center">
                <ContentControl.Resources>
                    <DataTemplate DataType="{x:Type vmDialogs:SkinDetailViewModel}">
                        <viewsDialogs:SkinDetailDialog/>
                    </DataTemplate>
                </ContentControl.Resources>
            </ContentControl>
        </Grid>

        <Grid Grid.Row="0" Grid.RowSpan="2" 
              Background="#A0000000" 
              Visibility="{Binding ViewModel.OmnisearchDialogViewModel, Converter={StaticResource NullToVisibilityConverter}, FallbackValue=Collapsed}">
            <ContentControl Content="{Binding ViewModel.OmnisearchDialogViewModel}" 
                            HorizontalAlignment="Center" 
                            VerticalAlignment="Center">
                <ContentControl.Resources>
                    <DataTemplate DataType="{x:Type vmDialogs:OmnisearchViewModel}">
                        <viewsDialogs:OmnisearchDialog/>
                    </DataTemplate>
                </ContentControl.Resources>
            </ContentControl>
        </Grid>
    </Grid>
</ui:FluentWindow>
/// Windows End of MainWindow.xaml ///

/// Windows Start of MainWindow.xaml.cs ///
﻿using skinhunter.ViewModels.Windows;
using Wpf.Ui;
using Wpf.Ui.Abstractions; // Para INavigationViewPageProvider e INavigationWindow
using Wpf.Ui.Appearance;
using Wpf.Ui.Controls;
using Microsoft.Extensions.DependencyInjection;

namespace skinhunter.Views.Windows
{
    public partial class MainWindow : INavigationWindow // Asegurarse que : INavigationWindow está aquí
    {
        public MainWindowViewModel ViewModel { get; }
        private readonly IServiceProvider _serviceProvider; // Para el método SetServiceProvider

        public MainWindow(
            MainWindowViewModel viewModel,
            IServiceProvider serviceProvider,
            INavigationService navigationService // El INavigationService global
        )
        {
            ViewModel = viewModel;
            DataContext = this;
            _serviceProvider = serviceProvider; // Guardar para SetServiceProvider si fuera necesario directamente por WPF-UI internamente

            SystemThemeWatcher.Watch(this);

            InitializeComponent();

            // Configurar el INavigationView con el PageService (INavigationViewPageProvider)
            var pageProvider = _serviceProvider.GetRequiredService<INavigationViewPageProvider>();
            SetPageService(pageProvider); // Este método es de INavigationWindow

            // Configurar el servicio de navegación con el control de navegación de esta ventana
            navigationService.SetNavigationControl(RootNavigation);

            // El método SetServiceProvider de la INTERFAZ INavigationWindow.
            // Este método es para un caso de uso donde el INavigationViewPageProvider
            // es creado sin conocimiento del IServiceProvider y necesita ser inyectado después.
            // Dado que AddNavigationViewPageProvider() ya lo configura con DI,
            // esta llamada podría no ser estrictamente necesaria para *nuestro* código,
            // pero es parte de la interfaz y algunas lógicas internas de WPF-UI podrían esperarlo.
            SetServiceProvider(serviceProvider);
        }

        #region INavigationWindow methods

        public INavigationView GetNavigation() => RootNavigation;

        public bool Navigate(Type pageType) => RootNavigation.Navigate(pageType);

        // Implementación explícita o implícita de SetPageService
        public void SetPageService(INavigationViewPageProvider pageProvider)
        {
            RootNavigation.SetPageProviderService(pageProvider);
        }

        // Implementación explícita o implícita de SetServiceProvider
        public void SetServiceProvider(IServiceProvider serviceProvider)
        {
            // Aunque nuestro INavigationViewPageProvider ya está configurado con DI,
            // la interfaz INavigationWindow lo requiere.
            // Aquí podríamos hacer algo si fuera necesario, o simplemente cumplir la interfaz.
            // El RootNavigation.SetServiceProvider() podría ser relevante si INavigationView lo tuviera.
            // Por ahora, cumplimos la interfaz. Si el INavigationView necesita el provider directamente,
            // ya se lo pasamos con SetPageProviderService.
            RootNavigation.SetServiceProvider(serviceProvider); // NavigationView también tiene este método.
        }

        public void ShowWindow() => Show();

        public void CloseWindow() => Close();

        #endregion INavigationWindow methods

        protected override void OnClosed(EventArgs e)
        {
            base.OnClosed(e);
            Application.Current.Shutdown();
        }
    }
}
/// Windows End of MainWindow.xaml.cs ///

/// Pages Start of ChampionDetailPage.xaml ///
<Page
    x:Class="skinhunter.Views.Pages.ChampionDetailPage"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:ui="http://schemas.lepo.co/wpfui/2022/xaml"
    xmlns:vm="clr-namespace:skinhunter.ViewModels.Pages"
    xmlns:m="clr-namespace:skinhunter.Models"
    xmlns:converters="clr-namespace:skinhunter.Converters"
    mc:Ignorable="d"
    x:Name="ChampionDetailPageSelf" 
    d:DataContext="{d:DesignInstance Type=vm:ChampionDetailPageViewModel, IsDesignTimeCreatable=False}"
    Foreground="{DynamicResource TextFillColorPrimaryBrush}">
    <Page.Resources>
        <converters:BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
        <converters:InverseBooleanToVisibilityConverter x:Key="InverseBooleanToVisibilityConverter"/>
        <converters:NullToVisibilityConverter x:Key="NullToVisibilityConverter"/>

        <Storyboard x:Key="FadeInContentStoryboard">
            <DoubleAnimation
                Storyboard.TargetProperty="Opacity"
                From="0.0" To="1.0" Duration="0:0:0.5" />
        </Storyboard>
    </Page.Resources>
    <Grid Margin="28,12,28,20" DataContext="{Binding ViewModel, ElementName=ChampionDetailPageSelf}">
        <Grid x:Name="PageContentGrid" Opacity="0">
            <Grid.Style>
                <Style TargetType="Grid">
                    <Setter Property="Visibility" Value="Collapsed" />
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding IsLoading, FallbackValue=True}" Value="False">
                            <Setter Property="Visibility" Value="Visible"/>
                            <Setter Property="Opacity" Value="0"/>
                            <DataTrigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource FadeInContentStoryboard}"/>
                            </DataTrigger.EnterActions>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </Grid.Style>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="*"/>
            </Grid.RowDefinitions>

            <StackPanel Grid.Row="0" Orientation="Horizontal" Margin="0,0,0,15">
                <ui:Button Command="{Binding GoBackCommand}" Appearance="Secondary" VerticalAlignment="Center">
                    <ui:Button.Icon>
                        <ui:SymbolIcon Symbol="ArrowLeft24" />
                    </ui:Button.Icon>
                </ui:Button>
            </StackPanel>

            <Border Grid.Row="1" Padding="20" Background="{DynamicResource ControlFillColorDefaultBrush}" CornerRadius="8" Margin="0,0,0,20" VerticalAlignment="Center" HorizontalAlignment="Center"
                    Visibility="{Binding Champion, Converter={StaticResource NullToVisibilityConverter}}">
                <StackPanel Orientation="Horizontal" HorizontalAlignment="Left">
                    <Border Width="120" Height="120" CornerRadius="4" Margin="0,0,25,0" Background="{DynamicResource ControlFillColorTertiaryBrush}" ClipToBounds="True">
                        <Image Source="{Binding Champion.ChampionImageSource}" Stretch="Uniform" RenderOptions.BitmapScalingMode="Fant"/>
                    </Border>
                    <StackPanel VerticalAlignment="Center" MaxWidth="600" HorizontalAlignment="Center">
                        <TextBlock Text="{Binding Champion.Name, FallbackValue='Champion Details'}" FontSize="24" FontWeight="SemiBold" VerticalAlignment="Center" Margin="0,0,0,0" Foreground="{DynamicResource TextFillColorPrimaryBrush}"/>
                        <TextBlock Text="{Binding Champion.Title}" Foreground="{DynamicResource TextFillColorSecondaryBrush}" FontSize="18" FontStyle="Italic" Margin="0,0,0,8" TextWrapping="Wrap"/>
                        <TextBlock Text="{Binding Champion.ShortBio}" Foreground="{DynamicResource TextFillColorTertiaryBrush}" FontSize="14" TextWrapping="WrapWithOverflow"/>
                    </StackPanel>
                </StackPanel>
            </Border>

            <ScrollViewer Grid.Row="2" VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Disabled" Focusable="True">
                <ItemsControl ItemsSource="{Binding Skins}"
                              VirtualizingPanel.IsVirtualizing="True" VirtualizingPanel.VirtualizationMode="Recycling"
                              HorizontalAlignment="Stretch">
                    <ItemsControl.ItemsPanel>
                        <ItemsPanelTemplate>
                            <WrapPanel Orientation="Horizontal" HorizontalAlignment="Center"/>
                        </ItemsPanelTemplate>
                    </ItemsControl.ItemsPanel>
                    <ItemsControl.ItemTemplate>
                        <DataTemplate DataType="{x:Type m:Skin}">
                            <ui:CardAction
                                Padding="0" Margin="8" Width="210" Height="260"
                                HorizontalContentAlignment="Stretch" VerticalContentAlignment="Stretch"
                                Background="Transparent" BorderThickness="1"
                                IsChevronVisible="False" Cursor="Hand"
                                BorderBrush="{DynamicResource CardStrokeColorDefaultBrush}"
                                Command="{Binding DataContext.SelectSkinCommand, ElementName=ChampionDetailPageSelf}"
                                CommandParameter="{Binding}">
                                <Grid>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="*"/>
                                        <RowDefinition Height="Auto"/>
                                    </Grid.RowDefinitions>
                                    <Border CornerRadius="5,5,0,0" Background="{DynamicResource ControlFillColorInputActiveBrush}">
                                        <Image Source="{Binding TileImageUrl}" Stretch="UniformToFill" VerticalAlignment="Top" RenderOptions.BitmapScalingMode="HighQuality"/>
                                    </Border>
                                    <Image Source="pack://application:,,,/Assets/legacy-icon.png" Width="24" Height="24" Opacity="0.8"
                                            HorizontalAlignment="Left" VerticalAlignment="Top" Margin="10,8,0,0"
                                            Visibility="{Binding IsLegacy, Converter={StaticResource BooleanToVisibilityConverter}}"/>
                                    <Image Source="pack://application:,,,/Assets/chroma-icon.png" Width="24" Height="24" Opacity="0.8"
                                            HorizontalAlignment="Right" VerticalAlignment="Top" Margin="0,8,10,0"
                                            Visibility="{Binding HasChromas, Converter={StaticResource BooleanToVisibilityConverter}}"/>
                                    <Border Grid.Row="1" Padding="10,8" Background="{DynamicResource CardBackgroundFillColorSecondaryBrush}" CornerRadius="0,0,5,5">
                                        <StackPanel Orientation="Horizontal" HorizontalAlignment="Center">
                                            <Image Source="{Binding RarityImageUrl}" Width="16" Height="16" Margin="0,0,8,0" VerticalAlignment="Center"
                                                   Visibility="{Binding RarityImageUrl, Converter={StaticResource NullToVisibilityConverter}}"/>
                                            <TextBlock Text="{Binding Name}" FontSize="13" FontWeight="Medium" VerticalAlignment="Center" TextTrimming="CharacterEllipsis" TextAlignment="Center" MaxWidth="170"/>
                                        </StackPanel>
                                    </Border>
                                </Grid>
                            </ui:CardAction>
                        </DataTemplate>
                    </ItemsControl.ItemTemplate>
                </ItemsControl>
            </ScrollViewer>
        </Grid>
        <ui:ProgressRing IsIndeterminate="True" HorizontalAlignment="Center" VerticalAlignment="Center"
                         Visibility="{Binding IsLoading, Converter={StaticResource BooleanToVisibilityConverter}, FallbackValue=Collapsed}" />
    </Grid>
</Page>
/// Pages End of ChampionDetailPage.xaml ///

/// Pages Start of ChampionDetailPage.xaml.cs ///
﻿using skinhunter.ViewModels.Pages;
using Wpf.Ui.Abstractions.Controls;

namespace skinhunter.Views.Pages
{
    public partial class ChampionDetailPage : INavigableView<ChampionDetailPageViewModel>
    {
        public ChampionDetailPageViewModel ViewModel { get; }

        public ChampionDetailPage(ChampionDetailPageViewModel viewModel)
        {
            ViewModel = viewModel;
            DataContext = ViewModel;
            InitializeComponent();
        }
    }
}
/// Pages End of ChampionDetailPage.xaml.cs ///

/// Pages Start of ChampionGridPage.xaml ///
<Page
    x:Class="skinhunter.Views.Pages.ChampionGridPage"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:ui="http://schemas.lepo.co/wpfui/2022/xaml"
    xmlns:vm="clr-namespace:skinhunter.ViewModels.Pages"
    xmlns:m="clr-namespace:skinhunter.Models"
    xmlns:converters="clr-namespace:skinhunter.Converters"
    mc:Ignorable="d"
    d:DataContext="{d:DesignInstance Type=vm:ChampionGridPageViewModel, IsDesignTimeCreatable=False}"
    Foreground="{DynamicResource TextFillColorPrimaryBrush}">
    <Page.Resources>
        <converters:BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
        <!-- Eliminado el Style explícito para ui:TextBox para depender del global -->
        <Style TargetType="ComboBox" BasedOn="{StaticResource {x:Type ComboBox}}">
            <Setter Property="MinWidth" Value="150"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="Height" Value="36"/>
        </Style>
        <Storyboard x:Key="FadeInContentStoryboard">
            <DoubleAnimation
                Storyboard.TargetProperty="Opacity"
                From="0.0" To="1.0" Duration="0:0:0.3" />
        </Storyboard>
    </Page.Resources>
    <Grid Margin="28,12,28,20">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>

        <TextBlock Grid.Row="0" Text="Champions" FontSize="24" FontWeight="SemiBold" Margin="0,0,0,15" Foreground="{DynamicResource TextFillColorPrimaryBrush}"/>

        <StackPanel Grid.Row="1" Orientation="Horizontal" Margin="0,0,0,20">
            <!-- ui:TextBox sin estilo explícito aquí, confiando en ControlsDictionary -->
            <ui:TextBox PlaceholderText="Search Champions..."
                        Text="{Binding ViewModel.SearchText, UpdateSourceTrigger=PropertyChanged}"
                        MinWidth="250" Margin="0,0,15,0" Height="36" VerticalContentAlignment="Center">
                <ui:TextBox.Icon>
                    <ui:SymbolIcon Symbol="Search24" />
                </ui:TextBox.Icon>
            </ui:TextBox>

            <TextBlock Text="Role:" VerticalAlignment="Center" Margin="20,0,8,0" Foreground="{DynamicResource TextFillColorSecondaryBrush}"/>
            <ComboBox ItemsSource="{Binding ViewModel.AllRoles}" 
                      SelectedItem="{Binding ViewModel.SelectedRole, Mode=TwoWay}"/>
        </StackPanel>

        <Grid Grid.Row="2">
            <ui:ProgressRing IsIndeterminate="True" HorizontalAlignment="Center" VerticalAlignment="Center"
                             Visibility="{Binding ViewModel.IsLoading, Converter={StaticResource BooleanToVisibilityConverter}, FallbackValue=Collapsed}" />

            <ScrollViewer x:Name="ChampionsScrollViewer" VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Disabled" Focusable="True">
                <ScrollViewer.Style>
                    <Style TargetType="ScrollViewer">
                        <Setter Property="Opacity" Value="0"/>
                        <Setter Property="Visibility" Value="Collapsed" />
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding ViewModel.ShowContentWithAnimation}" Value="True">
                                <Setter Property="Visibility" Value="Visible"/>
                                <DataTrigger.EnterActions>
                                    <BeginStoryboard Storyboard="{StaticResource FadeInContentStoryboard}"/>
                                </DataTrigger.EnterActions>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding ViewModel.ShowContentWithAnimation}" Value="False">
                                <Setter Property="Visibility" Value="Collapsed"/>
                                <Setter Property="Opacity" Value="0"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </ScrollViewer.Style>
                <ItemsControl ItemsSource="{Binding ViewModel.ChampionsView}"
                              VirtualizingPanel.IsVirtualizing="True" VirtualizingPanel.VirtualizationMode="Recycling"
                              HorizontalAlignment="Stretch" VerticalAlignment="Top">
                    <ItemsControl.ItemsPanel>
                        <ItemsPanelTemplate>
                            <WrapPanel Orientation="Horizontal" HorizontalAlignment="Center"/>
                        </ItemsPanelTemplate>
                    </ItemsControl.ItemsPanel>
                    <ItemsControl.ItemTemplate>
                        <DataTemplate DataType="{x:Type m:ChampionSummary}">
                            <ui:CardAction
                                    Padding="0" Margin="8" Width="100" Height="130" 
                                    HorizontalContentAlignment="Stretch" VerticalContentAlignment="Stretch"
                                    Background="Transparent" BorderThickness="1"
                                    IsChevronVisible="False" 
                                    Cursor="Hand"
                                    BorderBrush="{DynamicResource ControlStrokeColorDefaultBrush}"
                                    Command="{Binding DataContext.ViewModel.SelectChampionCommand, RelativeSource={RelativeSource AncestorType={x:Type Page}}}"
                                    CommandParameter="{Binding}">
                                <Grid>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="90"/>
                                        <RowDefinition Height="Auto"/>
                                    </Grid.RowDefinitions>
                                    <Border CornerRadius="5,5,0,0" Background="{DynamicResource ControlFillColorInputActiveBrush}">
                                        <Image Source="{Binding ChampionImageSource}" Stretch="Uniform" Margin="5"
                                                   RenderOptions.BitmapScalingMode="Fant"/>
                                    </Border>
                                    <Border Grid.Row="1" Padding="8,5" MinHeight="40" Background="{DynamicResource CardBackgroundFillColorSecondaryBrush}" CornerRadius="0,0,5,5">
                                        <TextBlock Text="{Binding Name}" HorizontalAlignment="Center" VerticalAlignment="Center"
                                                   Foreground="{DynamicResource TextFillColorPrimaryBrush}" FontSize="12" 
                                                   TextTrimming="CharacterEllipsis" TextAlignment="Center" TextWrapping="Wrap"/>
                                    </Border>
                                </Grid>
                            </ui:CardAction>
                        </DataTemplate>
                    </ItemsControl.ItemTemplate>
                </ItemsControl>
            </ScrollViewer>
        </Grid>
    </Grid>
</Page>
/// Pages End of ChampionGridPage.xaml ///

/// Pages Start of ChampionGridPage.xaml.cs ///
﻿using skinhunter.ViewModels.Pages;
using Wpf.Ui.Abstractions.Controls; // Para INavigableView

namespace skinhunter.Views.Pages
{
    public partial class ChampionGridPage : INavigableView<ChampionGridPageViewModel>
    {
        // Esta propiedad ViewModel es llenada por DI cuando la página se crea.
        public ChampionGridPageViewModel ViewModel { get; }

        public ChampionGridPage(ChampionGridPageViewModel viewModel)
        {
            ViewModel = viewModel; // El ViewModel inyectado se asigna a la propiedad ViewModel.
            DataContext = this;    // <<--- ¡ESTA LÍNEA ES CRUCIAL!
                                   // Establece el DataContext de la página a sí misma.
                                   // Esto permite que el XAML use bindings como {Binding ViewModel.SearchText}

            InitializeComponent();
        }
    }
}
/// Pages End of ChampionGridPage.xaml.cs ///

/// Pages Start of DashboardPage.xaml ///
﻿<Page
    x:Class="skinhunter.Views.Pages.DashboardPage"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:local="clr-namespace:skinhunter.Views.Pages"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:ui="http://schemas.lepo.co/wpfui/2022/xaml"
    Title="DashboardPage"
    d:DataContext="{d:DesignInstance local:DashboardPage,
                                     IsDesignTimeCreatable=False}"
    d:DesignHeight="450"
    d:DesignWidth="800"
    ui:Design.Background="{DynamicResource ApplicationBackgroundBrush}"
    ui:Design.Foreground="{DynamicResource TextFillColorPrimaryBrush}"
    Foreground="{DynamicResource TextFillColorPrimaryBrush}"
    mc:Ignorable="d">

    <Grid VerticalAlignment="Top">
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="Auto" />
            <ColumnDefinition Width="Auto" />
        </Grid.ColumnDefinitions>

        <ui:Button
            Grid.Column="0"
            Command="{Binding ViewModel.CounterIncrementCommand, Mode=OneWay}"
            Content="Click me!"
            Icon="Fluent24" />
        <TextBlock
            Grid.Column="1"
            Margin="12,0,0,0"
            VerticalAlignment="Center"
            Text="{Binding ViewModel.Counter, Mode=OneWay}" />
    </Grid>
</Page>

/// Pages End of DashboardPage.xaml ///

/// Pages Start of DashboardPage.xaml.cs ///
﻿using skinhunter.ViewModels.Pages;
using Wpf.Ui.Abstractions.Controls;

namespace skinhunter.Views.Pages
{
    public partial class DashboardPage : INavigableView<DashboardViewModel>
    {
        public DashboardViewModel ViewModel { get; }

        public DashboardPage(DashboardViewModel viewModel)
        {
            ViewModel = viewModel;
            DataContext = this;

            InitializeComponent();
        }
    }
}

/// Pages End of DashboardPage.xaml.cs ///

/// Pages Start of DataPage.xaml ///
<Page
    x:Class="skinhunter.Views.Pages.DataPage"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:local="clr-namespace:skinhunter.Views.Pages"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:models="clr-namespace:skinhunter.Models"
    xmlns:ui="http://schemas.lepo.co/wpfui/2022/xaml"
    Title="DataPage"
    d:DataContext="{d:DesignInstance local:DataPage,
                                     IsDesignTimeCreatable=False}"
    d:DesignHeight="450"
    d:DesignWidth="800"
    ui:Design.Background="{DynamicResource ApplicationBackgroundBrush}"
    ui:Design.Foreground="{DynamicResource TextFillColorPrimaryBrush}"
    Foreground="{DynamicResource TextFillColorPrimaryBrush}"
    ScrollViewer.CanContentScroll="False"
    mc:Ignorable="d">

    <Grid>
        <ui:VirtualizingItemsControl
            Foreground="{DynamicResource TextFillColorSecondaryBrush}"
            ItemsSource="{Binding ViewModel.Colors, Mode=OneWay}"
            VirtualizingPanel.CacheLengthUnit="Item">
            <ItemsControl.ItemTemplate>
                <DataTemplate DataType="{x:Type models:DataColor}">
                    <ui:Button
                        Width="80"
                        Height="80"
                        Margin="2"
                        Padding="0"
                        HorizontalAlignment="Stretch"
                        VerticalAlignment="Stretch"
                        Appearance="Secondary"
                        Background="{Binding Color, Mode=OneWay}"
                        FontSize="25"
                        Icon="Fluent24" />
                </DataTemplate>
            </ItemsControl.ItemTemplate>
        </ui:VirtualizingItemsControl>
    </Grid>
</Page>

/// Pages End of DataPage.xaml ///

/// Pages Start of DataPage.xaml.cs ///
﻿using skinhunter.ViewModels.Pages;
using Wpf.Ui.Abstractions.Controls;

namespace skinhunter.Views.Pages
{
    public partial class DataPage : INavigableView<DataViewModel>
    {
        public DataViewModel ViewModel { get; }

        public DataPage(DataViewModel viewModel)
        {
            ViewModel = viewModel;
            DataContext = this;

            InitializeComponent();
        }
    }
}

/// Pages End of DataPage.xaml.cs ///

/// Pages Start of SettingsPage.xaml ///
﻿<Page
    x:Class="skinhunter.Views.Pages.SettingsPage"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:helpers="clr-namespace:skinhunter.Helpers"
    xmlns:local="clr-namespace:skinhunter.Views.Pages"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:ui="http://schemas.lepo.co/wpfui/2022/xaml"
    Title="SettingsPage"
    d:DataContext="{d:DesignInstance local:SettingsPage,
                                     IsDesignTimeCreatable=False}"
    d:DesignHeight="450"
    d:DesignWidth="800"
    ui:Design.Background="{DynamicResource ApplicationBackgroundBrush}"
    ui:Design.Foreground="{DynamicResource TextFillColorPrimaryBrush}"
    Foreground="{DynamicResource TextFillColorPrimaryBrush}"
    mc:Ignorable="d">
    <Page.Resources>
        <helpers:EnumToBooleanConverter x:Key="EnumToBooleanConverter" />
    </Page.Resources>

    <StackPanel>
        <TextBlock
            FontSize="20"
            FontWeight="Medium"
            Text="Personalization" />
        <TextBlock Margin="0,12,0,0" Text="Theme" />
        <RadioButton
            Margin="0,12,0,0"
            Command="{Binding ViewModel.ChangeThemeCommand, Mode=OneWay}"
            CommandParameter="theme_light"
            Content="Light"
            GroupName="themeSelect"
            IsChecked="{Binding ViewModel.CurrentTheme, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter=Light, Mode=OneWay}" />
        <RadioButton
            Margin="0,8,0,0"
            Command="{Binding ViewModel.ChangeThemeCommand, Mode=OneWay}"
            CommandParameter="theme_dark"
            Content="Dark"
            GroupName="themeSelect"
            IsChecked="{Binding ViewModel.CurrentTheme, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter=Dark, Mode=OneWay}" />

        <TextBlock
            Margin="0,24,0,0"
            FontSize="20"
            FontWeight="Medium"
            Text="About skinhunter" />
        <TextBlock Margin="0,12,0,0" Text="{Binding ViewModel.AppVersion, Mode=OneWay}" />
    </StackPanel>
</Page>

/// Pages End of SettingsPage.xaml ///

/// Pages Start of SettingsPage.xaml.cs ///
﻿using skinhunter.ViewModels.Pages;
using Wpf.Ui.Abstractions.Controls;

namespace skinhunter.Views.Pages
{
    public partial class SettingsPage : INavigableView<SettingsViewModel>
    {
        public SettingsViewModel ViewModel { get; }

        public SettingsPage(SettingsViewModel viewModel)
        {
            ViewModel = viewModel;
            DataContext = this;

            InitializeComponent();
        }
    }
}

/// Pages End of SettingsPage.xaml.cs ///

/// Dialogs Start of OmnisearchDialog.xaml ///
<UserControl x:Class="skinhunter.Views.Dialogs.OmnisearchDialog"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:ui="http://schemas.lepo.co/wpfui/2022/xaml"
             xmlns:vm="clr-namespace:skinhunter.ViewModels.Dialogs"
             xmlns:m="clr-namespace:skinhunter.Models"
             xmlns:converters="clr-namespace:skinhunter.Converters"
             mc:Ignorable="d" 
             d:DataContext="{d:DesignInstance Type=vm:OmnisearchViewModel, IsDesignTimeCreatable=False}"
             Width="560" MaxHeight="600" MinHeight="150"
             d:DesignHeight="600" d:DesignWidth="560">
    <UserControl.Resources>
        <converters:BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
        <converters:InverseBooleanToVisibilityConverter x:Key="InverseBooleanToVisibilityConverter"/>
        <converters:NullToVisibilityConverter x:Key="NullToVisibilityConverter"/>
        <Style x:Key="ButtonTransparentStyle" TargetType="Button">
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="Padding" Value="0"/>
            <Setter Property="Cursor" Value="Hand"/>
            <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" CornerRadius="4" x:Name="Bd">
                            <ContentPresenter/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="Bd" Property="Background" Value="{DynamicResource ControlFillColorSecondaryBrush}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </UserControl.Resources>
    <Border Background="{DynamicResource ApplicationBackgroundBrush}" CornerRadius="8" BorderBrush="{DynamicResource CardStrokeColorDefaultBrush}" BorderThickness="1">
        <Grid>
            <Grid Visibility="{Binding IsLoading, Converter={StaticResource InverseBooleanToVisibilityConverter}, FallbackValue=Collapsed}">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>

                <DockPanel Grid.Row="0" Margin="20,15,15,10" LastChildFill="True">
                    <ui:Button DockPanel.Dock="Right" Command="{Binding CloseOmnisearchDialogCommand}" Appearance="Transparent" ToolTipService.ToolTip="Close" Width="32" Height="32">
                        <ui:Button.Icon>
                            <ui:SymbolIcon Symbol="Dismiss24"/>
                        </ui:Button.Icon>
                    </ui:Button>
                    <TextBlock Text="Search" FontSize="20" FontWeight="Medium" VerticalAlignment="Center" Foreground="{DynamicResource TextFillColorPrimaryBrush}"/>
                </DockPanel>

                <Border Grid.Row="1" Background="{DynamicResource ApplicationBackgroundBrush}" Padding="15,12" Margin="20,5,20,15" CornerRadius="6">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>

                        <ui:TextBox Grid.Column="0" PlaceholderText="Search..." IconPlacement="Left"
                                 Text="{Binding Query, UpdateSourceTrigger=PropertyChanged, Delay=400}"
                                 Height="40" VerticalContentAlignment="Center" FontSize="15" Padding="35,0,5,0"
                                 BorderThickness="0.5" BorderBrush="{DynamicResource CardStrokeColorDefaultBrush}">
                            <ui:TextBox.Icon>
                                <ui:SymbolIcon Symbol="Search24"/>
                            </ui:TextBox.Icon>
                        </ui:TextBox>

                        <Popup Placement="Bottom" PlacementTarget="{Binding ElementName=FilterButton}" IsOpen="{Binding IsFilterPopupOpen, Mode=TwoWay}" AllowsTransparency="True" StaysOpen="False" VerticalOffset="5" HorizontalOffset="-10">
                            <Border Background="{DynamicResource LayerFillColorDefaultBrush}" BorderBrush="{DynamicResource CardStrokeColorDefaultBrush}" BorderThickness="1" Padding="12" CornerRadius="4" Margin="0,5,0,0">
                                <StackPanel>
                                    <CheckBox IsChecked="{Binding ShowChampionsFilter}" Content="Champions" Foreground="{DynamicResource TextFillColorPrimaryBrush}" Margin="0,0,0,8"/>
                                    <CheckBox IsChecked="{Binding ShowSkinsFilter}" Content="Skins" Foreground="{DynamicResource TextFillColorPrimaryBrush}"/>
                                </StackPanel>
                            </Border>
                        </Popup>

                        <ui:Button x:Name="FilterButton" Grid.Column="1" Appearance="Transparent" Margin="8,0,0,0" Width="40" Height="40"
                                Command="{Binding ToggleFilterPopupCommand}" ToolTipService.ToolTip="Filters">
                            <ui:Button.Icon>
                                <ui:SymbolIcon Symbol="Filter24"/>
                            </ui:Button.Icon>
                        </ui:Button>
                    </Grid>
                </Border>

                <Grid Grid.Row="2" Margin="20,0,20,20" MinHeight="100">
                    <ui:ProgressRing IsIndeterminate="True" 
                                 Visibility="{Binding IsLoadingSearchResults, Converter={StaticResource BooleanToVisibilityConverter}, FallbackValue=Collapsed}"
                                 Width="30" Height="30" VerticalAlignment="Center" HorizontalAlignment="Center"/>

                    <ScrollViewer VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Disabled" 
                                  Visibility="{Binding IsLoadingSearchResults, Converter={StaticResource InverseBooleanToVisibilityConverter}, FallbackValue=Visible}">
                        <ItemsControl ItemsSource="{Binding SearchResultsView}">
                            <ItemsControl.GroupStyle>
                                <GroupStyle>
                                    <GroupStyle.HeaderTemplate>
                                        <DataTemplate>
                                            <TextBlock Text="{Binding Name}" Foreground="{DynamicResource TextFillColorSecondaryBrush}" FontSize="12" FontWeight="Medium" Margin="0,8,0,3" Opacity="0.8"/>
                                        </DataTemplate>
                                    </GroupStyle.HeaderTemplate>
                                </GroupStyle>
                            </ItemsControl.GroupStyle>
                            <ItemsControl.ItemTemplate>
                                <DataTemplate DataType="{x:Type m:SearchResultItem}">
                                    <Button Command="{Binding DataContext.SelectResultCommand, RelativeSource={RelativeSource AncestorType={x:Type UserControl}}}"
                                            CommandParameter="{Binding}"
                                            Style="{StaticResource ButtonTransparentStyle}" Margin="0,2">
                                        <Border Padding="10,8">
                                            <Grid>
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="Auto"/>
                                                    <ColumnDefinition Width="*"/>
                                                </Grid.ColumnDefinitions>
                                                <Border Grid.Column="0" Width="48" Height="48" CornerRadius="3" Margin="0,0,15,0" Background="{DynamicResource ControlFillColorSecondaryBrush}">
                                                    <Grid>
                                                        <Border Background="{DynamicResource ControlFillColorTertiaryBrush}" Visibility="{Binding ImageSource, Converter={StaticResource NullToVisibilityConverter}, ConverterParameter=True, FallbackValue=Visible}"/>
                                                        <Image Source="{Binding ImageSource}" Stretch="Uniform" RenderOptions.BitmapScalingMode="Fant"/>
                                                    </Grid>
                                                </Border>
                                                <StackPanel Grid.Column="1" VerticalAlignment="Center">
                                                    <TextBlock Text="{Binding Name}" Foreground="{DynamicResource TextFillColorPrimaryBrush}" FontSize="14" FontWeight="Normal" TextTrimming="CharacterEllipsis"/>
                                                    <TextBlock Text="{Binding DisplayType}" Foreground="{DynamicResource TextFillColorSecondaryBrush}" FontSize="11"/>
                                                </StackPanel>
                                            </Grid>
                                        </Border>
                                    </Button>
                                </DataTemplate>
                            </ItemsControl.ItemTemplate>
                        </ItemsControl>
                    </ScrollViewer>
                </Grid>
            </Grid>
            <ui:ProgressRing IsIndeterminate="True" HorizontalAlignment="Center" VerticalAlignment="Center"
                              Visibility="{Binding IsLoading, Converter={StaticResource BooleanToVisibilityConverter}, FallbackValue=Collapsed}" />
        </Grid>
    </Border>
</UserControl>
/// Dialogs End of OmnisearchDialog.xaml ///

/// Dialogs Start of OmnisearchDialog.xaml.cs ///
﻿using skinhunter.ViewModels.Dialogs;

namespace skinhunter.Views.Dialogs
{
    public partial class OmnisearchDialog : System.Windows.Controls.UserControl
    {
        public OmnisearchViewModel? ViewModel => DataContext as OmnisearchViewModel;
        public OmnisearchDialog()
        {
            InitializeComponent();
        }
    }
}
/// Dialogs End of OmnisearchDialog.xaml.cs ///

/// Dialogs Start of SkinDetailDialog.xaml ///
<UserControl x:Class="skinhunter.Views.Dialogs.SkinDetailDialog"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:ui="http://schemas.lepo.co/wpfui/2022/xaml"
             xmlns:vm="clr-namespace:skinhunter.ViewModels.Dialogs"
             xmlns:m="clr-namespace:skinhunter.Models"
             xmlns:converters="clr-namespace:skinhunter.Converters"
             mc:Ignorable="d"
             d:DataContext="{d:DesignInstance Type=vm:SkinDetailViewModel, IsDesignTimeCreatable=False}"
             Width="850" MaxHeight="650" d:DesignWidth="850">
    <UserControl.Resources>
        <converters:BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
        <converters:InverseBooleanToVisibilityConverter x:Key="InverseBooleanToVisibilityConverter"/>
        <converters:NullToVisibilityConverter x:Key="NullToVisibilityConverter"/>
        <converters:ChromaToButtonTextConverter x:Key="ChromaToButtonTextConverter"/>
        <Style x:Key="CardBorderStyle" TargetType="Border">
            <Setter Property="Background" Value="{DynamicResource CardBackgroundFillColorDefaultBrush}"/>
            <Setter Property="BorderBrush" Value="{DynamicResource CardStrokeColorDefaultBrush}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="CornerRadius" Value="4"/>
            <Setter Property="Padding" Value="5"/>
        </Style>
        <Style x:Key="RadioButtonCardStyle" TargetType="RadioButton">
            <Setter Property="Foreground" Value="{DynamicResource TextFillColorPrimaryBrush}"/>
            <Setter Property="Background" Value="{DynamicResource CardBackgroundFillColorDefaultBrush}"/>
            <Setter Property="BorderBrush" Value="{DynamicResource CardStrokeColorDefaultBrush}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Padding" Value="0"/>
            <Setter Property="Cursor" Value="Hand"/>
            <Setter Property="Margin" Value="4"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Width" Value="85"/>
            <Setter Property="Height" Value="85"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="RadioButton">
                        <Border x:Name="border"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="4">
                            <ContentPresenter Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="True">
                                <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource AccentFillColorDefaultBrush}"/>
                                <Setter TargetName="border" Property="BorderThickness" Value="2"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource ControlFillColorSecondaryBrush}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </UserControl.Resources>
    <Border Background="{DynamicResource ApplicationBackgroundBrush}" CornerRadius="8" BorderBrush="{DynamicResource CardStrokeColorDefaultBrush}" BorderThickness="1">
        <Grid>
            <Grid Margin="20" Visibility="{Binding IsLoading, Converter={StaticResource InverseBooleanToVisibilityConverter}, FallbackValue=Collapsed}">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>

                <DockPanel Grid.Row="0" Grid.ColumnSpan="2" Margin="0,0,0,15" LastChildFill="False">
                    <ui:Button DockPanel.Dock="Right" Command="{Binding CloseDialogCommand}" Appearance="Transparent" ToolTipService.ToolTip="Close">
                        <ui:Button.Icon>
                            <ui:SymbolIcon Symbol="Dismiss24"/>
                        </ui:Button.Icon>
                    </ui:Button>
                    <StackPanel DockPanel.Dock="Left" Orientation="Horizontal">
                        <Image Source="{Binding SelectedSkin.RarityImageUrl}" Width="20" Height="20" Margin="0,0,8,0" VerticalAlignment="Center"
                               Visibility="{Binding SelectedSkin.RarityImageUrl, Converter={StaticResource NullToVisibilityConverter}}"/>
                        <TextBlock Text="{Binding SelectedSkin.Name}" Foreground="{DynamicResource TextFillColorPrimaryBrush}" FontSize="20" FontWeight="Bold" VerticalAlignment="Center"/>
                    </StackPanel>
                </DockPanel>

                <StackPanel Grid.Row="1" Grid.Column="0" Margin="0,0,25,0" MaxWidth="400">
                    <Border Style="{StaticResource CardBorderStyle}" Padding="0">
                        <Grid>
                            <Image Source="{Binding SelectedSkin.SplashImageUrl}" Height="240" Stretch="UniformToFill" VerticalAlignment="Top" />
                        </Grid>
                    </Border>
                    <ScrollViewer MaxHeight="150" VerticalScrollBarVisibility="Auto" Margin="0,15,0,0">
                        <TextBlock Text="{Binding SelectedSkin.Description, FallbackValue='This skin does not have a description.'}"
                                   Foreground="{DynamicResource TextFillColorSecondaryBrush}" FontSize="13" TextWrapping="Wrap"/>
                    </ScrollViewer>
                    <Border Background="#44FFFF00" BorderBrush="#FFFFCC00" BorderThickness="1" CornerRadius="3" Padding="8,5" Margin="0,15,0,0"
                            Visibility="{Binding SelectedSkin.IsLegacy, Converter={StaticResource BooleanToVisibilityConverter}}">
                        <TextBlock Text="This skin may not work properly due to game updates" FontSize="11" Foreground="#FFFFEEAA" TextWrapping="Wrap"/>
                    </Border>
                </StackPanel>

                <DockPanel Grid.Row="1" Grid.Column="1">
                    <StackPanel DockPanel.Dock="Top">
                        <TextBlock Margin="0,0,0,10" Foreground="{DynamicResource TextFillColorSecondaryBrush}">
                            <Run Text="View skin on "/>
                            <Hyperlink NavigateUri="{Binding KhadaViewerUrl}" RequestNavigate="Hyperlink_RequestNavigate" Foreground="{DynamicResource AccentTextFillColorPrimaryBrush}">
                                <Run Text="Model viewer"/>
                            </Hyperlink>
                        </TextBlock>
                    </StackPanel>
                    <Separator DockPanel.Dock="Top" Margin="0,0,0,15" Background="{DynamicResource CardStrokeColorDefaultBrush}"/>

                    <Border DockPanel.Dock="Bottom" Margin="0,15,0,0" Background="{DynamicResource InfoBadgeBackground}" BorderBrush="{DynamicResource InfoBadgeBackground}" BorderThickness="1" Padding="8,5" CornerRadius="3">
                        <TextBlock FontSize="12" Foreground="{DynamicResource TextFillColorSecondaryBrush}">
                             <Run Text="This is going to consume a credit"/>
                             <Run Text="{Binding UserCredits, StringFormat='({0} credits left)'}" Foreground="LightGreen"/>
                        </TextBlock>
                    </Border>

                    <StackPanel Orientation="Vertical">
                        <TextBlock Text="Chromas" Foreground="{DynamicResource TextFillColorPrimaryBrush}" FontSize="16" FontWeight="SemiBold" Margin="0,0,0,8"/>
                        <TabControl Padding="0" Margin="0,0,0,0">
                            <TabItem Header="Circles">
                                <StackPanel Orientation="Vertical" VerticalAlignment="Center" HorizontalAlignment="Center">
                                    <TextBlock Text="Select a variation to download." Foreground="{DynamicResource TextFillColorSecondaryBrush}" FontSize="12" Margin="0,8,0,8" FontStyle="Italic"/>
                                    <ScrollViewer VerticalScrollBarVisibility="Auto" MaxHeight="260" Padding="5,0,30,0" HorizontalScrollBarVisibility="Disabled">
                                        <ItemsControl ItemsSource="{Binding AvailableChromas}">
                                            <ItemsControl.ItemsPanel>
                                                <ItemsPanelTemplate>
                                                    <WrapPanel Orientation="Horizontal" ItemWidth="95" ItemHeight="105"/>
                                                </ItemsPanelTemplate>
                                            </ItemsControl.ItemsPanel>
                                            <ItemsControl.ItemTemplate>
                                                <DataTemplate DataType="{x:Type m:Chroma}">
                                                    <RadioButton GroupName="ChromaSelectionCircles" Style="{StaticResource RadioButtonCardStyle}"
                                                                 IsChecked="{Binding IsSelected, Mode=TwoWay}"
                                                                 Command="{Binding DataContext.ToggleChromaSelectionCommand, RelativeSource={RelativeSource AncestorType={x:Type UserControl}}}"
                                                                 CommandParameter="{Binding}">
                                                        <StackPanel VerticalAlignment="Center" HorizontalAlignment="Center">
                                                            <Ellipse Width="50" Height="50" Stroke="{DynamicResource CardStrokeColorDefaultBrush}" StrokeThickness="1" Fill="{Binding ColorBrush}" Margin="0,5,0,5"/>
                                                            <TextBlock Text="{Binding Name}" HorizontalAlignment="Center" FontSize="11" TextTrimming="CharacterEllipsis" Margin="0,0,0,5" MaxWidth="75" TextAlignment="Center" TextWrapping="Wrap"/>
                                                        </StackPanel>
                                                    </RadioButton>
                                                </DataTemplate>
                                            </ItemsControl.ItemTemplate>
                                        </ItemsControl>
                                    </ScrollViewer>
                                </StackPanel>
                            </TabItem>
                            <TabItem Header="Images">
                                <StackPanel Orientation="Vertical" VerticalAlignment="Center" HorizontalAlignment="Center">
                                    <TextBlock Text="Select a variation to download." Foreground="{DynamicResource TextFillColorSecondaryBrush}" FontSize="12" Margin="0,8,0,8" FontStyle="Italic"/>
                                    <ScrollViewer VerticalScrollBarVisibility="Auto" MaxHeight="260" Padding="5,0,30,0" HorizontalScrollBarVisibility="Disabled">
                                        <ItemsControl ItemsSource="{Binding AvailableChromas}">
                                            <ItemsControl.ItemsPanel>
                                                <ItemsPanelTemplate>
                                                    <WrapPanel Orientation="Horizontal" ItemWidth="95" ItemHeight="105"/>
                                                </ItemsPanelTemplate>
                                            </ItemsControl.ItemsPanel>
                                            <ItemsControl.ItemTemplate>
                                                <DataTemplate DataType="{x:Type m:Chroma}">
                                                    <RadioButton GroupName="ChromaSelectionImages" Style="{StaticResource RadioButtonCardStyle}"
                                                                 IsChecked="{Binding IsSelected, Mode=TwoWay}"
                                                                 Command="{Binding DataContext.ToggleChromaSelectionCommand, RelativeSource={RelativeSource AncestorType={x:Type UserControl}}}"
                                                                 CommandParameter="{Binding}">
                                                        <StackPanel VerticalAlignment="Center" HorizontalAlignment="Center">
                                                            <Image Source="{Binding ImageUrl}" Width="60" Height="60" Stretch="Uniform" Margin="0,5,0,5" RenderOptions.BitmapScalingMode="HighQuality"/>
                                                            <TextBlock Text="{Binding Name}" HorizontalAlignment="Center" FontSize="11" TextTrimming="CharacterEllipsis" Margin="0,0,0,5" MaxWidth="75" TextAlignment="Center" TextWrapping="Wrap"/>
                                                        </StackPanel>
                                                    </RadioButton>
                                                </DataTemplate>
                                            </ItemsControl.ItemTemplate>
                                        </ItemsControl>
                                    </ScrollViewer>
                                </StackPanel>
                            </TabItem>
                        </TabControl>
                    </StackPanel>
                </DockPanel>

                <Grid Grid.Row="2" Grid.ColumnSpan="2" Margin="0,20,0,0">
                    <ui:Button Content="Close" HorizontalAlignment="Left" Width="90" Appearance="Secondary"
                            Command="{Binding CloseDialogCommand}"/>
                    <ui:Button Content="{Binding SelectedChroma, Converter={StaticResource ChromaToButtonTextConverter}, FallbackValue='Download Skin'}"
                             Appearance="Primary" HorizontalAlignment="Right" Width="150"
                             Command="{Binding DownloadSkinCommand}"
                             IsEnabled="{Binding CanDownload}">
                        <ui:Button.Icon>
                            <ui:SymbolIcon Symbol="ArrowDownload24" Foreground="{DynamicResource TextOnAccentFillColorPrimaryBrush}"/>
                        </ui:Button.Icon>
                    </ui:Button>
                </Grid>
            </Grid>
            <ui:ProgressRing IsIndeterminate="True" HorizontalAlignment="Center" VerticalAlignment="Center"
                              Visibility="{Binding IsLoading, Converter={StaticResource BooleanToVisibilityConverter}, FallbackValue=Collapsed}" />
        </Grid>
    </Border>
</UserControl>
/// Dialogs End of SkinDetailDialog.xaml ///

/// Dialogs Start of SkinDetailDialog.xaml.cs ///
﻿using System.Windows.Navigation;
using System.Diagnostics;

namespace skinhunter.Views.Dialogs
{
    public partial class SkinDetailDialog : System.Windows.Controls.UserControl
    {
        public SkinDetailDialog()
        {
            InitializeComponent();
        }

        private void Hyperlink_RequestNavigate(object sender, RequestNavigateEventArgs e)
        {
            try
            {
                Process.Start(new ProcessStartInfo(e.Uri.AbsoluteUri) { UseShellExecute = true });
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"Failed to open hyperlink: {ex.Message}");
                System.Windows.MessageBox.Show($"Could not open link: {e.Uri.AbsoluteUri}", "Error", MessageBoxButton.OK, MessageBoxImage.Warning);
            }
            e.Handled = true;
        }
    }
}
/// Dialogs End of SkinDetailDialog.xaml.cs ///

/// ViewModels Start of ViewModelBase.cs ///
﻿
namespace skinhunter.ViewModels
{
    public abstract partial class ViewModelBase : ObservableObject
    {
        [ObservableProperty]
        [NotifyPropertyChangedFor(nameof(IsNotLoading))]
        private bool _isLoading;

        public bool IsNotLoading => !IsLoading;
    }
}
/// ViewModels End of ViewModelBase.cs ///

/// Dialogs Start of OmnisearchViewModel.cs ///
﻿using skinhunter.Models;
using skinhunter.Services;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Data;
using System.ComponentModel;
using System.Diagnostics;
using System.Threading;
using Microsoft.Extensions.DependencyInjection;
using System.Collections;


namespace skinhunter.ViewModels.Dialogs
{
    public partial class OmnisearchViewModel : ViewModelBase
    {
        private readonly ICustomNavigationService? _customNavigationService;
        private readonly IServiceProvider? _serviceProvider;
        private List<ChampionSummary> _allChampionsMasterList = [];
        private List<Skin> _allSkinsMasterList = [];
        private Dictionary<int, ChampionSummary> _championMap = [];

        [ObservableProperty]
        private string? _query;

        [ObservableProperty]
        private bool _showChampionsFilter = true;

        [ObservableProperty]
        private bool _showSkinsFilter = true;

        [ObservableProperty]
        private bool _isFilterPopupOpen;

        [ObservableProperty]
        private bool _isLoadingSearchResults;


        public ObservableCollection<SearchResultItem> SearchResults { get; } = [];
        public ICollectionView SearchResultsView { get; }

        public OmnisearchViewModel()
        {
            if (DesignerProperties.GetIsInDesignMode(new DependencyObject()))
            {
                Query = "Search...";
            }
            _customNavigationService = null;
            _serviceProvider = null;
            SearchResultsView = CollectionViewSource.GetDefaultView(SearchResults);
            if (SearchResultsView.GroupDescriptions is not null)
            {
                SearchResultsView.GroupDescriptions.Add(new PropertyGroupDescription("DisplayType"));
            }
        }

        public OmnisearchViewModel(ICustomNavigationService customNavigationService, IServiceProvider serviceProvider)
        {
            _customNavigationService = customNavigationService ?? throw new ArgumentNullException(nameof(customNavigationService));
            _serviceProvider = serviceProvider ?? throw new ArgumentNullException(nameof(serviceProvider));
            SearchResultsView = CollectionViewSource.GetDefaultView(SearchResults);
            if (SearchResultsView.GroupDescriptions is not null)
            {
                SearchResultsView.GroupDescriptions.Add(new PropertyGroupDescription("DisplayType"));
            }
        }

        private bool _isDataLoaded = false;

        public async Task EnsureDataLoadedAsync()
        {
            if (_isDataLoaded) return;
            if (_serviceProvider is null) return;

            IsLoading = true;
            try
            {
                var champsTask = CdragonDataService.GetChampionSummariesAsync();
                var skinsTask = CdragonDataService.GetAllSkinsAsync();
                await Task.WhenAll(champsTask, skinsTask);

                var champs = await champsTask;
                if (champs is not null)
                {
                    _allChampionsMasterList = champs;
                    _championMap = champs.ToDictionary(c => c.Id);
                }

                var skinsDict = await skinsTask;
                if (skinsDict is not null)
                {
                    _allSkinsMasterList = skinsDict.Values
                        .Where(s => {
                            bool isBaseSkinName = false;
                            if (_championMap.TryGetValue(s.ChampionId, out var parentChamp))
                            {
                                isBaseSkinName = s.Name.Equals(parentChamp.Name, StringComparison.OrdinalIgnoreCase) ||
                                                 s.Name.Equals($"Base {parentChamp.Name}", StringComparison.OrdinalIgnoreCase);
                            }
                            return !isBaseSkinName && !s.Name.Contains("Original", StringComparison.OrdinalIgnoreCase);
                        })
                        .OrderBy(s => s.Name)
                        .ToList();
                }
                _isDataLoaded = true;
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"[OmnisearchViewModel] Error cargando datos maestros: {ex.Message}");
            }
            finally
            {
                IsLoading = false;
            }
        }

        partial void OnQueryChanged(string? value)
        {
            PerformSearch();
        }

        partial void OnShowChampionsFilterChanged(bool value)
        {
            PerformSearch();
        }

        partial void OnShowSkinsFilterChanged(bool value)
        {
            PerformSearch();
        }

        private CancellationTokenSource _searchCts = new();

        private async void PerformSearch()
        {
            _searchCts.Cancel();
            _searchCts = new();
            var token = _searchCts.Token;
            var currentQuery = Query;

            if (string.IsNullOrWhiteSpace(currentQuery) || currentQuery.Length < 1)
            {
                SearchResults.Clear();
                IsLoadingSearchResults = false;
                return;
            }

            if (!_isDataLoaded && _serviceProvider is not null)
            {
                IsLoadingSearchResults = true;
                await EnsureDataLoadedAsync();
                if (token.IsCancellationRequested || !_isDataLoaded)
                {
                    IsLoadingSearchResults = false;
                    SearchResults.Clear();
                    return;
                }
            }
            else if (!_isDataLoaded && _serviceProvider is null)
            {
                return;
            }

            SearchResults.Clear();
            IsLoadingSearchResults = true;

            try
            {
                List<SearchResultItem> newRawResults = await Task.Run(() => {
                    if (token.IsCancellationRequested) return [];

                    List<SearchResultItem> filteredResults = [];
                    if (ShowChampionsFilter)
                    {
                        filteredResults.AddRange(_allChampionsMasterList
                            .Where(c => c.Name.Contains(currentQuery, StringComparison.OrdinalIgnoreCase))
                            .Select(c => new SearchResultItem(c)));
                    }
                    if (ShowSkinsFilter)
                    {
                        filteredResults.AddRange(_allSkinsMasterList
                            .Where(s => s.Name.Contains(currentQuery, StringComparison.OrdinalIgnoreCase))
                            .Select(s => new SearchResultItem(s, _championMap.TryGetValue(s.ChampionId, out var champ) ? champ : null)));
                    }
                    return filteredResults.OrderBy(r => r.Type).ThenBy(r => r.Name).Take(25).ToList();
                }, token);

                if (token.IsCancellationRequested)
                {
                    IsLoadingSearchResults = false;
                    return;
                }

                foreach (var item in newRawResults)
                {
                    SearchResults.Add(item);
                }
                if (SearchResults.Any())
                {
                    _ = Task.Run(async () =>
                    {
                        var imageLoadTasks = SearchResults.Select(item => item.LoadImageAsync()).ToList();
                        try
                        {
                            await Task.WhenAll(imageLoadTasks);
                        }
                        catch (Exception imgEx)
                        {
                            Debug.WriteLine($"[OmnisearchViewModel] Error durante carga de imágenes en lote: {imgEx.Message}");
                        }
                    }, token);
                }
            }
            catch (TaskCanceledException) { }
            catch (Exception ex) { Debug.WriteLine($"[OmnisearchViewModel] Error durante la búsqueda: {ex.Message}"); }
            finally
            {
                IsLoadingSearchResults = false;
            }
        }

        [RelayCommand]
        private void SelectResult(SearchResultItem? selectedItem)
        {
            if (selectedItem is null || _customNavigationService is null) return;
            CloseOmnisearchDialog();
            if (selectedItem.Type == SearchResultType.Champion)
            {
                _customNavigationService.NavigateToChampionDetail(selectedItem.ChampionId);
            }
            else if (selectedItem.Type == SearchResultType.Skin && selectedItem.OriginalSkinObject is not null)
            {
                _customNavigationService.ShowSkinDetailDialog(selectedItem.OriginalSkinObject);
            }
        }

        [RelayCommand]
        private void CloseOmnisearchDialog()
        {
            IsFilterPopupOpen = false;
            _customNavigationService?.CloseOmnisearchDialog();
        }

        [RelayCommand]
        private void ToggleFilterPopup()
        {
            IsFilterPopupOpen = !IsFilterPopupOpen;
        }
    }
}
/// Dialogs End of OmnisearchViewModel.cs ///

/// Dialogs Start of SkinDetailViewModel.cs ///
﻿using skinhunter.Models;
using skinhunter.Services;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.Extensions.DependencyInjection;
using System.Diagnostics;


namespace skinhunter.ViewModels.Dialogs
{
    public partial class SkinDetailViewModel : ViewModelBase
    {
        private readonly ICustomNavigationService _customNavigationService;

        [ObservableProperty]
        private Skin? _selectedSkin;

        public ObservableCollection<Chroma> AvailableChromas { get; } = [];

        [ObservableProperty]
        [NotifyPropertyChangedFor(nameof(IsDefaultSelected))]
        [NotifyPropertyChangedFor(nameof(KhadaViewerUrl))]
        private Chroma? _selectedChroma;

        [ObservableProperty]
        private int _userCredits = 5;

        public bool IsDefaultSelected => SelectedChroma == null;

        public string? KhadaViewerUrl
        {
            get
            {
                if (SelectedSkin == null) return null;
                int skinId = SelectedSkin.Id;
                int? chromaId = SelectedChroma?.Id;
                string url = $"https://modelviewer.lol/model-viewer?id={skinId}";
                if (chromaId.HasValue && chromaId.Value != 0 && chromaId.Value / 1000 == skinId)
                {
                    url += $"&chroma={chromaId.Value}";
                }
                return url;
            }
        }

        public SkinDetailViewModel(ICustomNavigationService customNavigationService)
        {
            _customNavigationService = customNavigationService;
        }

        public async Task LoadSkinAsync(Skin skin)
        {
            IsLoading = true;

            await CdragonDataService.EnrichSkinWithSupabaseChromaDataAsync(skin);
            SelectedSkin = skin;

            AvailableChromas.Clear();

            if (SelectedSkin.Chromas != null && SelectedSkin.Chromas.Any())
            {
                foreach (var chroma in SelectedSkin.Chromas)
                {
                    if (chroma != null)
                    {
                        chroma.IsSelected = false;
                        AvailableChromas.Add(chroma);
                    }
                }
            }
            else
            {
            }

            SelectedChroma = null;
            DownloadSkinCommand.NotifyCanExecuteChanged();
            IsLoading = false;
        }

        public bool CanDownload()
        {
            return UserCredits > 0;
        }

        [RelayCommand(CanExecute = nameof(CanDownload))]
        private async Task DownloadSkinAsync()
        {
            IsLoading = true;
            var skinOrChromaName = IsDefaultSelected ? SelectedSkin?.Name : SelectedChroma?.Name;
            var idToDownload = IsDefaultSelected ? SelectedSkin?.Id : SelectedChroma?.Id;

            await Task.Delay(1500);

            UserCredits--;
            DownloadSkinCommand.NotifyCanExecuteChanged();

            IsLoading = false;
            System.Windows.MessageBox.Show($"'{skinOrChromaName}' (ID: {idToDownload}) download initiated!", "Download", MessageBoxButton.OK, MessageBoxImage.Information);

            CloseDialog();
        }

        [RelayCommand]
        private void CloseDialog()
        {
            _customNavigationService.CloseDialog();
        }

        private void SetDefaultSelection()
        {
            SelectedChroma = null;
            RefreshChromaSelections(null);
        }

        [RelayCommand]
        private void ToggleChromaSelection(Chroma? clickedChroma)
        {
            if (clickedChroma == null) return;

            if (SelectedChroma == clickedChroma)
            {
                SetDefaultSelection();
            }
            else
            {
                SelectedChroma = clickedChroma;
                RefreshChromaSelections(SelectedChroma);
            }
            DownloadSkinCommand.NotifyCanExecuteChanged();
        }

        private void RefreshChromaSelections(Chroma? selected)
        {
            foreach (var ch in AvailableChromas)
            {
                ch.IsSelected = (ch == selected);
            }
        }
    }
}
/// Dialogs End of SkinDetailViewModel.cs ///

/// Pages Start of ChampionDetailPageViewModel.cs ///
﻿using skinhunter.Models;
using skinhunter.Services;
using System.Collections.ObjectModel;
using System.Threading.Tasks;
using System.Linq;
using System.Diagnostics;
using Wpf.Ui.Abstractions.Controls;

namespace skinhunter.ViewModels.Pages
{
    public partial class ChampionDetailPageViewModel : ViewModelBase, INavigationAware
    {
        private readonly ICustomNavigationService _customNavigationService;

        [ObservableProperty]
        private ChampionDetail? _champion;

        [ObservableProperty]
        private ObservableCollection<Skin> _skins = [];

        // Ya no necesitamos _navigationParameterInternal si lo obtenemos del servicio

        public ChampionDetailPageViewModel(ICustomNavigationService customNavigationService)
        {
            _customNavigationService = customNavigationService;
            Debug.WriteLine($"[ChampionDetailPageViewModel] Constructor. HashCode: {this.GetHashCode()}");
        }

        public void OnNavigatedTo(object? parameter)
        {
            // Aunque no usemos el 'parameter' directamente de aquí si es null,
            // es bueno tener el método por si WPF UI lo necesita para otros propósitos internos.
            // El parámetro real se obtendrá de _customNavigationService.
            Debug.WriteLine($"[ChampionDetailPageViewModel.OnNavigatedTo] (WPF UI Parameter): '{parameter}', Type: {parameter?.GetType().FullName}");
        }

        public async Task OnNavigatedToAsync()
        {
            // Obtener el parámetro del servicio personalizado
            object? consumedParameter = _customNavigationService.ConsumeNavigationParameter();
            Debug.WriteLine($"[ChampionDetailPageViewModel.OnNavigatedToAsync] HashCode: {this.GetHashCode()}. Consumed Parameter from service: '{consumedParameter}', Type: {consumedParameter?.GetType().FullName}");

            Skins.Clear();
            Champion = null;
            IsLoading = true;

            if (consumedParameter is int champId && champId != -1)
            {
                Debug.WriteLine($"[ChampionDetailPageViewModel.OnNavigatedToAsync] Valid championId from service: {champId}. Loading champion...");
                await LoadChampionAsync(champId);
            }
            else
            {
                Debug.WriteLine($"[ChampionDetailPageViewModel.OnNavigatedToAsync] Invalid or missing championId from service. Consumed parameter value: '{consumedParameter}'. Setting IsLoading = false.");
                IsLoading = false;
            }
        }

        public Task OnNavigatedFromAsync()
        {
            Debug.WriteLine($"[ChampionDetailPageViewModel.OnNavigatedFromAsync] HashCode: {this.GetHashCode()}. Navigating away from champion: {Champion?.Name}");
            Champion = null;
            Skins.Clear();
            IsLoading = false;
            // _customNavigationService.ConsumeNavigationParameter(); // Opcional: asegurar que se limpie si no se consumió, aunque ya lo hace al consumir.
            return Task.CompletedTask;
        }

        private async Task LoadChampionAsync(int championId)
        {
            Debug.WriteLine($"[ChampionDetailPageViewModel.LoadChampionAsync] HashCode: {this.GetHashCode()}. Loading champion ID: {championId}");
            var details = await CdragonDataService.GetChampionDetailsAsync(championId);

            if (details != null)
            {
                Champion = details;
                Debug.WriteLine($"[ChampionDetailPageViewModel.LoadChampionAsync] Loaded champion: {Champion?.Name}. Skin count from service: {details.Skins?.Count ?? 0}");
                if (details.Skins != null)
                {
                    Skins.Clear();
                    foreach (var skin in details.Skins.Where(s =>
                                !s.Name.Equals(details.Name, StringComparison.OrdinalIgnoreCase) &&
                                !s.Name.Equals($"Base {details.Name}", StringComparison.OrdinalIgnoreCase) &&
                                !s.Name.Contains("Original", StringComparison.OrdinalIgnoreCase)))
                    {
                        Skins.Add(skin);
                    }
                    Debug.WriteLine($"[ChampionDetailPageViewModel.LoadChampionAsync] Filtered skins added. Total skins in collection: {Skins.Count}");
                }
            }
            else
            {
                Debug.WriteLine($"[ChampionDetailPageViewModel.LoadChampionAsync] Failed to load details for Champion ID: {championId}");
                System.Windows.MessageBox.Show($"Failed to load details for Champion ID: {championId}", "Error", System.Windows.MessageBoxButton.OK, System.Windows.MessageBoxImage.Error);
            }
            IsLoading = false;
            Debug.WriteLine($"[ChampionDetailPageViewModel.LoadChampionAsync] Finished loading. IsLoading: {IsLoading}");
        }

        [RelayCommand]
        private void SelectSkin(Skin? skin)
        {
            if (skin != null)
            {
                _customNavigationService.ShowSkinDetailDialog(skin);
            }
        }

        [RelayCommand]
        private void GoBack()
        {
            _customNavigationService.GoBack();
        }
    }
}
/// Pages End of ChampionDetailPageViewModel.cs ///

/// Pages Start of ChampionGridPageViewModel.cs ///
﻿using skinhunter.Models;
using skinhunter.Services;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Diagnostics;
using System.Windows.Threading;
using Wpf.Ui.Abstractions.Controls;

namespace skinhunter.ViewModels.Pages
{
    public partial class ChampionGridPageViewModel : ViewModelBase, INavigationAware
    {
        private readonly ICustomNavigationService _customNavigationService;
        private readonly ObservableCollection<ChampionSummary> _allChampions = new();

        [ObservableProperty]
        private string? _searchText;

        [ObservableProperty]
        private ObservableCollection<string> _allRoles = new();

        [ObservableProperty]
        private string? _selectedRole = "All";

        public ICollectionView ChampionsView { get; }

        // Esta propiedad controlará explícitamente la animación de "fade-in"
        [ObservableProperty]
        private bool _showContentWithAnimation;

        private bool _dataLoadedAtLeastOnce = false;

        public ChampionGridPageViewModel(ICustomNavigationService customNavigationService)
        {
            _customNavigationService = customNavigationService;
            ChampionsView = CollectionViewSource.GetDefaultView(_allChampions);
            ChampionsView.Filter = FilterChampions;
            AllRoles.Add("All");
        }

        public async Task OnNavigatedToAsync()
        {
            ShowContentWithAnimation = false; // Ocultar contenido para preparar animación

            if (!_dataLoadedAtLeastOnce || !_allChampions.Any()) // Cargar solo si es la primera vez en la vida de la app o si se vació
            {
                IsLoading = true;
                await LoadChampionsAsync(); // LoadChampionsAsync pondrá IsLoading = false
                _dataLoadedAtLeastOnce = true;
            }
            else
            {
                IsLoading = false; // Los datos ya están, no hay "carga"
            }

            // Después de que IsLoading es definitivamente false (ya sea por carga o por caché)
            // Activamos la animación
            if (!IsLoading)
            {
                ShowContentWithAnimation = true;
            }
        }

        public Task OnNavigatedFromAsync()
        {
            ShowContentWithAnimation = false; // Ocultar al salir para que la próxima vez pueda animar
            return Task.CompletedTask;
        }

        public void OnNavigatedTo(object? parameter)
        {
        }

        public void ReleaseResourcesForTray()
        {
            IsLoading = true;
            if (_allChampions.Any())
            {
                var championsToRelease = _allChampions.ToList();
                System.Windows.Application.Current?.Dispatcher.Invoke(() => _allChampions.Clear());

                foreach (var champ in championsToRelease)
                {
                    champ.ReleaseImage();
                }
                System.Windows.Application.Current?.Dispatcher.Invoke(() => ChampionsView?.Refresh());
            }
            // _dataLoadedAtLeastOnce sigue siendo true, pero _allChampions está vacío
            // para que OnNavigatedToAsync recargue
            IsLoading = false;
        }

        partial void OnSearchTextChanged(string? value)
        {
            System.Windows.Application.Current?.Dispatcher.InvokeAsync(() => ChampionsView.Refresh(), DispatcherPriority.Background);
        }

        partial void OnSelectedRoleChanged(string? value)
        {
            System.Windows.Application.Current?.Dispatcher.InvokeAsync(() => ChampionsView.Refresh(), DispatcherPriority.Background);
        }

        private bool FilterChampions(object item)
        {
            if (!(item is ChampionSummary champ)) return false;

            bool textMatch = string.IsNullOrWhiteSpace(SearchText) ||
                             champ.Name.Contains(SearchText, StringComparison.OrdinalIgnoreCase);

            bool roleMatch = string.IsNullOrEmpty(SelectedRole) ||
                             SelectedRole.Equals("All", StringComparison.OrdinalIgnoreCase) ||
                             (champ.Roles != null && champ.Roles.Any(r => r.Equals(SelectedRole, StringComparison.OrdinalIgnoreCase)));

            return textMatch && roleMatch;
        }

        private void PopulateRoles()
        {
            var uniqueRoles = new HashSet<string>(StringComparer.OrdinalIgnoreCase);
            if (_allChampions.Any())
            {
                foreach (var champ in _allChampions)
                {
                    if (champ.Roles != null)
                    {
                        foreach (var role in champ.Roles)
                        {
                            if (!string.IsNullOrWhiteSpace(role))
                            {
                                uniqueRoles.Add(role);
                            }
                        }
                    }
                }
            }

            var sortedRoles = uniqueRoles.OrderBy(r => r).ToList();

            System.Windows.Application.Current?.Dispatcher.Invoke(() => {
                string? actualCurrentSelection = SelectedRole;
                AllRoles.Clear();
                AllRoles.Add("All");
                foreach (var role in sortedRoles)
                {
                    string displayRole = role.Length > 0 ? char.ToUpper(role[0]) + role.Substring(1) : role;
                    AllRoles.Add(displayRole);
                }

                if (!string.IsNullOrEmpty(actualCurrentSelection) && AllRoles.Contains(actualCurrentSelection))
                {
                    SelectedRole = actualCurrentSelection;
                }
                else
                {
                    SelectedRole = "All";
                }
            });
        }

        [RelayCommand]
        public async Task LoadChampionsAsync()
        {
            if (!IsLoading) IsLoading = true; // Asegurar que esté en loading

            var champs = await CdragonDataService.GetChampionSummariesAsync();
            if (champs != null)
            {
                var tempChamps = champs.OrderBy(c => c.Name).ToList();
                System.Windows.Application.Current?.Dispatcher.Invoke(() =>
                {
                    _allChampions.Clear();
                    foreach (var champ in tempChamps)
                    {
                        if (champ.Roles == null) champ.Roles = new List<string>();
                        _allChampions.Add(champ);
                    }
                });
                PopulateRoles();
                System.Windows.Application.Current?.Dispatcher.Invoke(() => ChampionsView.Refresh());
            }
            else
            {
                System.Windows.Application.Current?.Dispatcher.Invoke(() => {
                    System.Windows.MessageBox.Show("Failed to load champions.", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                });
            }
            IsLoading = false;
        }

        [RelayCommand]
        private void SelectChampion(ChampionSummary? champion)
        {
            if (champion != null)
            {
                _customNavigationService.NavigateToChampionDetail(champion.Id);
            }
        }
    }
}
/// Pages End of ChampionGridPageViewModel.cs ///

/// Pages Start of DashboardViewModel.cs ///
﻿namespace skinhunter.ViewModels.Pages // Este debe coincidir con el using en App.xaml.cs
{
    public partial class DashboardViewModel : ObservableObject
    {
        [ObservableProperty]
        private int _counter;

        [RelayCommand]
        private void CounterIncrement()
        {
            Counter++;
        }
    }
}
/// Pages End of DashboardViewModel.cs ///

/// Pages Start of DataViewModel.cs ///
﻿using System.Windows.Media;
using skinhunter.Models;
using Wpf.Ui.Abstractions.Controls;
using System.Collections.Generic;
using System.Linq;

namespace skinhunter.ViewModels.Pages
{
    public partial class DataViewModel : ObservableObject, INavigationAware
    {
        private bool _isInitialized = false;

        [ObservableProperty]
        private IEnumerable<DataColor> _colors = Enumerable.Empty<DataColor>();

        public Task OnNavigatedToAsync()
        {
            if (!_isInitialized)
                InitializeViewModel();
            return Task.CompletedTask;
        }

        public Task OnNavigatedFromAsync()
        {
            return Task.CompletedTask;
        }

        public void OnNavigatedTo(object? parameter)
        {
            // No parameter expected for this page currently
        }

        private void InitializeViewModel()
        {
            var random = new Random();
            var colorCollection = new List<DataColor>();

            for (int i = 0; i < 8192; i++)
                colorCollection.Add(
                    new DataColor
                    {
                        Color = new SolidColorBrush(
                            Color.FromArgb(
                                (byte)200,
                                (byte)random.Next(0, 250),
                                (byte)random.Next(0, 250),
                                (byte)random.Next(0, 250)
                            )
                        )
                    }
                );
            Colors = colorCollection;
            _isInitialized = true;
        }
    }
}
/// Pages End of DataViewModel.cs ///

/// Pages Start of SettingsViewModel.cs ///
﻿using Wpf.Ui.Abstractions.Controls;
using Wpf.Ui.Appearance;

namespace skinhunter.ViewModels.Pages
{
    public partial class SettingsViewModel : ObservableObject, INavigationAware
    {
        private bool _isInitialized = false;

        [ObservableProperty]
        private string _appVersion = string.Empty;

        [ObservableProperty]
        private ApplicationTheme _currentTheme = ApplicationTheme.Unknown;

        public Task OnNavigatedToAsync()
        {
            if (!_isInitialized)
                InitializeViewModel();
            return Task.CompletedTask;
        }

        public Task OnNavigatedFromAsync()
        {
            return Task.CompletedTask;
        }

        public void OnNavigatedTo(object? parameter)
        {
            // No parameter expected for this page currently
        }

        private void InitializeViewModel()
        {
            CurrentTheme = ApplicationThemeManager.GetAppTheme();
            AppVersion = $"skinhunter - {GetAssemblyVersion()}";
            _isInitialized = true;
        }

        private string GetAssemblyVersion()
        {
            return System.Reflection.Assembly.GetExecutingAssembly().GetName().Version?.ToString()
                ?? String.Empty;
        }

        [RelayCommand]
        private void ChangeTheme(string parameter)
        {
            ApplicationTheme newTheme;
            switch (parameter.ToLowerInvariant())
            {
                case "theme_light":
                    newTheme = ApplicationTheme.Light;
                    break;
                case "theme_dark":
                    newTheme = ApplicationTheme.Dark;
                    break;
                default:
                    return;
            }

            if (CurrentTheme == newTheme)
                return;

            ApplicationThemeManager.Apply(newTheme);
            CurrentTheme = newTheme;
        }
    }
}
/// Pages End of SettingsViewModel.cs ///

/// Windows Start of MainWindowViewModel.cs ///
﻿using System.Collections.ObjectModel;
using Wpf.Ui.Controls;
using skinhunter.Services;
using Microsoft.Extensions.DependencyInjection;
using skinhunter.ViewModels.Dialogs;

namespace skinhunter.ViewModels.Windows
{
    public partial class MainWindowViewModel : ViewModelBase
    {
        private ICustomNavigationService? _customNavigationService;

        [ObservableProperty]
        private string _applicationTitle = "Skin Hunter";

        [ObservableProperty]
        private ObservableCollection<object> _menuItems;

        [ObservableProperty]
        private ObservableCollection<object> _footerMenuItems;

        [ObservableProperty]
        private ObservableCollection<MenuItem> _trayMenuItems;

        [ObservableProperty]
        private ViewModelBase? _dialogViewModel;

        [ObservableProperty]
        private OmnisearchViewModel? _omnisearchDialogViewModel;

        public MainWindowViewModel()
        {
            _menuItems = new ObservableCollection<object>
            {
                new NavigationViewItem() { Content = "Champions (Design)", Icon = new SymbolIcon { Symbol = SymbolRegular.AppsListDetail24 } },
                new NavigationViewItem() { Content = "Search (Design)", Icon = new SymbolIcon { Symbol = SymbolRegular.Search24 } },
                new NavigationViewItem() { Content = "Installed (Design)", Icon = new SymbolIcon { Symbol = SymbolRegular.Save24 } },
                new NavigationViewItem() { Content = "Profile (Design)", Icon = new SymbolIcon { Symbol = SymbolRegular.Person24 } }
            };
            _footerMenuItems = new ObservableCollection<object>
            {
                new NavigationViewItem() { Content = "Settings (Design)", Icon = new SymbolIcon { Symbol = SymbolRegular.Settings24 } }
            };
            _trayMenuItems = new ObservableCollection<MenuItem>
            {
                new MenuItem { Header = "Champions (Design)" }
            };
        }

        public MainWindowViewModel(ICustomNavigationService customNavigationService) : this()
        {
            _customNavigationService = customNavigationService;

            _menuItems = new ObservableCollection<object>()
            {
                new NavigationViewItem()
                {
                    Content = "Champions",
                    Icon = new SymbolIcon { Symbol = SymbolRegular.AppsListDetail24 },
                    TargetPageType = typeof(Views.Pages.ChampionGridPage)
                },
                new NavigationViewItem()
                {
                    Content = "Search",
                    Icon = new SymbolIcon { Symbol = SymbolRegular.Search24 },
                    Command = new RelayCommand(() => _customNavigationService.ShowOmnisearchDialog())
                },
                new NavigationViewItem()
                {
                    Content = "Installed",
                    Icon = new SymbolIcon { Symbol = SymbolRegular.Save24 },
                    TargetPageType = typeof(Views.Pages.DashboardPage)
                },
                 new NavigationViewItem()
                {
                    Content = "Profile",
                    Icon = new SymbolIcon { Symbol = SymbolRegular.Person24 },
                    TargetPageType = typeof(Views.Pages.DataPage)
                }
            };

            _footerMenuItems = new ObservableCollection<object>()
            {
                new NavigationViewItem()
                {
                    Content = "Settings",
                    Icon = new SymbolIcon { Symbol = SymbolRegular.Settings24 },
                    TargetPageType = typeof(Views.Pages.SettingsPage)
                }
            };
        }
    }
}
/// Windows End of MainWindowViewModel.cs ///

/// Windows Start of MainWindowViewModel.cs ///
﻿using System.Collections.ObjectModel;
using Wpf.Ui.Controls;
using skinhunter.Services;
using Microsoft.Extensions.DependencyInjection;
using skinhunter.ViewModels.Dialogs;

namespace skinhunter.ViewModels.Windows
{
    public partial class MainWindowViewModel : ViewModelBase
    {
        private ICustomNavigationService? _customNavigationService;

        [ObservableProperty]
        private string _applicationTitle = "Skin Hunter";

        [ObservableProperty]
        private ObservableCollection<object> _menuItems;

        [ObservableProperty]
        private ObservableCollection<object> _footerMenuItems;

        [ObservableProperty]
        private ObservableCollection<MenuItem> _trayMenuItems;

        [ObservableProperty]
        private ViewModelBase? _dialogViewModel;

        [ObservableProperty]
        private OmnisearchViewModel? _omnisearchDialogViewModel;

        public MainWindowViewModel()
        {
            _menuItems = new ObservableCollection<object>
            {
                new NavigationViewItem() { Content = "Champions (Design)", Icon = new SymbolIcon { Symbol = SymbolRegular.AppsListDetail24 } },
                new NavigationViewItem() { Content = "Search (Design)", Icon = new SymbolIcon { Symbol = SymbolRegular.Search24 } },
                new NavigationViewItem() { Content = "Installed (Design)", Icon = new SymbolIcon { Symbol = SymbolRegular.Save24 } },
                new NavigationViewItem() { Content = "Profile (Design)", Icon = new SymbolIcon { Symbol = SymbolRegular.Person24 } }
            };
            _footerMenuItems = new ObservableCollection<object>
            {
                new NavigationViewItem() { Content = "Settings (Design)", Icon = new SymbolIcon { Symbol = SymbolRegular.Settings24 } }
            };
            _trayMenuItems = new ObservableCollection<MenuItem>
            {
                new MenuItem { Header = "Champions (Design)" }
            };
        }

        public MainWindowViewModel(ICustomNavigationService customNavigationService) : this()
        {
            _customNavigationService = customNavigationService;

            _menuItems = new ObservableCollection<object>()
            {
                new NavigationViewItem()
                {
                    Content = "Champions",
                    Icon = new SymbolIcon { Symbol = SymbolRegular.AppsListDetail24 },
                    TargetPageType = typeof(Views.Pages.ChampionGridPage)
                },
                new NavigationViewItem()
                {
                    Content = "Search",
                    Icon = new SymbolIcon { Symbol = SymbolRegular.Search24 },
                    Command = new RelayCommand(() => _customNavigationService.ShowOmnisearchDialog())
                },
                new NavigationViewItem()
                {
                    Content = "Installed",
                    Icon = new SymbolIcon { Symbol = SymbolRegular.Save24 },
                    TargetPageType = typeof(Views.Pages.DashboardPage)
                },
                 new NavigationViewItem()
                {
                    Content = "Profile",
                    Icon = new SymbolIcon { Symbol = SymbolRegular.Person24 },
                    TargetPageType = typeof(Views.Pages.DataPage)
                }
            };

            _footerMenuItems = new ObservableCollection<object>()
            {
                new NavigationViewItem()
                {
                    Content = "Settings",
                    Icon = new SymbolIcon { Symbol = SymbolRegular.Settings24 },
                    TargetPageType = typeof(Views.Pages.SettingsPage)
                }
            };
        }
    }
}
/// Windows End of MainWindowViewModel.cs ///

/// Pages Start of ChampionDetailPageViewModel.cs ///
﻿using skinhunter.Models;
using skinhunter.Services;
using System.Collections.ObjectModel;
using System.Threading.Tasks;
using System.Linq;
using System.Diagnostics;
using Wpf.Ui.Abstractions.Controls;

namespace skinhunter.ViewModels.Pages
{
    public partial class ChampionDetailPageViewModel : ViewModelBase, INavigationAware
    {
        private readonly ICustomNavigationService _customNavigationService;

        [ObservableProperty]
        private ChampionDetail? _champion;

        [ObservableProperty]
        private ObservableCollection<Skin> _skins = [];

        // Ya no necesitamos _navigationParameterInternal si lo obtenemos del servicio

        public ChampionDetailPageViewModel(ICustomNavigationService customNavigationService)
        {
            _customNavigationService = customNavigationService;
            Debug.WriteLine($"[ChampionDetailPageViewModel] Constructor. HashCode: {this.GetHashCode()}");
        }

        public void OnNavigatedTo(object? parameter)
        {
            // Aunque no usemos el 'parameter' directamente de aquí si es null,
            // es bueno tener el método por si WPF UI lo necesita para otros propósitos internos.
            // El parámetro real se obtendrá de _customNavigationService.
            Debug.WriteLine($"[ChampionDetailPageViewModel.OnNavigatedTo] (WPF UI Parameter): '{parameter}', Type: {parameter?.GetType().FullName}");
        }

        public async Task OnNavigatedToAsync()
        {
            // Obtener el parámetro del servicio personalizado
            object? consumedParameter = _customNavigationService.ConsumeNavigationParameter();
            Debug.WriteLine($"[ChampionDetailPageViewModel.OnNavigatedToAsync] HashCode: {this.GetHashCode()}. Consumed Parameter from service: '{consumedParameter}', Type: {consumedParameter?.GetType().FullName}");

            Skins.Clear();
            Champion = null;
            IsLoading = true;

            if (consumedParameter is int champId && champId != -1)
            {
                Debug.WriteLine($"[ChampionDetailPageViewModel.OnNavigatedToAsync] Valid championId from service: {champId}. Loading champion...");
                await LoadChampionAsync(champId);
            }
            else
            {
                Debug.WriteLine($"[ChampionDetailPageViewModel.OnNavigatedToAsync] Invalid or missing championId from service. Consumed parameter value: '{consumedParameter}'. Setting IsLoading = false.");
                IsLoading = false;
            }
        }

        public Task OnNavigatedFromAsync()
        {
            Debug.WriteLine($"[ChampionDetailPageViewModel.OnNavigatedFromAsync] HashCode: {this.GetHashCode()}. Navigating away from champion: {Champion?.Name}");
            Champion = null;
            Skins.Clear();
            IsLoading = false;
            // _customNavigationService.ConsumeNavigationParameter(); // Opcional: asegurar que se limpie si no se consumió, aunque ya lo hace al consumir.
            return Task.CompletedTask;
        }

        private async Task LoadChampionAsync(int championId)
        {
            Debug.WriteLine($"[ChampionDetailPageViewModel.LoadChampionAsync] HashCode: {this.GetHashCode()}. Loading champion ID: {championId}");
            var details = await CdragonDataService.GetChampionDetailsAsync(championId);

            if (details != null)
            {
                Champion = details;
                Debug.WriteLine($"[ChampionDetailPageViewModel.LoadChampionAsync] Loaded champion: {Champion?.Name}. Skin count from service: {details.Skins?.Count ?? 0}");
                if (details.Skins != null)
                {
                    Skins.Clear();
                    foreach (var skin in details.Skins.Where(s =>
                                !s.Name.Equals(details.Name, StringComparison.OrdinalIgnoreCase) &&
                                !s.Name.Equals($"Base {details.Name}", StringComparison.OrdinalIgnoreCase) &&
                                !s.Name.Contains("Original", StringComparison.OrdinalIgnoreCase)))
                    {
                        Skins.Add(skin);
                    }
                    Debug.WriteLine($"[ChampionDetailPageViewModel.LoadChampionAsync] Filtered skins added. Total skins in collection: {Skins.Count}");
                }
            }
            else
            {
                Debug.WriteLine($"[ChampionDetailPageViewModel.LoadChampionAsync] Failed to load details for Champion ID: {championId}");
                System.Windows.MessageBox.Show($"Failed to load details for Champion ID: {championId}", "Error", System.Windows.MessageBoxButton.OK, System.Windows.MessageBoxImage.Error);
            }
            IsLoading = false;
            Debug.WriteLine($"[ChampionDetailPageViewModel.LoadChampionAsync] Finished loading. IsLoading: {IsLoading}");
        }

        [RelayCommand]
        private void SelectSkin(Skin? skin)
        {
            if (skin != null)
            {
                _customNavigationService.ShowSkinDetailDialog(skin);
            }
        }

        [RelayCommand]
        private void GoBack()
        {
            _customNavigationService.GoBack();
        }
    }
}
/// Pages End of ChampionDetailPageViewModel.cs ///

/// Pages Start of ChampionGridPageViewModel.cs ///
﻿using skinhunter.Models;
using skinhunter.Services;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Diagnostics;
using System.Windows.Threading;
using Wpf.Ui.Abstractions.Controls;

namespace skinhunter.ViewModels.Pages
{
    public partial class ChampionGridPageViewModel : ViewModelBase, INavigationAware
    {
        private readonly ICustomNavigationService _customNavigationService;
        private readonly ObservableCollection<ChampionSummary> _allChampions = new();

        [ObservableProperty]
        private string? _searchText;

        [ObservableProperty]
        private ObservableCollection<string> _allRoles = new();

        [ObservableProperty]
        private string? _selectedRole = "All";

        public ICollectionView ChampionsView { get; }

        // Esta propiedad controlará explícitamente la animación de "fade-in"
        [ObservableProperty]
        private bool _showContentWithAnimation;

        private bool _dataLoadedAtLeastOnce = false;

        public ChampionGridPageViewModel(ICustomNavigationService customNavigationService)
        {
            _customNavigationService = customNavigationService;
            ChampionsView = CollectionViewSource.GetDefaultView(_allChampions);
            ChampionsView.Filter = FilterChampions;
            AllRoles.Add("All");
        }

        public async Task OnNavigatedToAsync()
        {
            ShowContentWithAnimation = false; // Ocultar contenido para preparar animación

            if (!_dataLoadedAtLeastOnce || !_allChampions.Any()) // Cargar solo si es la primera vez en la vida de la app o si se vació
            {
                IsLoading = true;
                await LoadChampionsAsync(); // LoadChampionsAsync pondrá IsLoading = false
                _dataLoadedAtLeastOnce = true;
            }
            else
            {
                IsLoading = false; // Los datos ya están, no hay "carga"
            }

            // Después de que IsLoading es definitivamente false (ya sea por carga o por caché)
            // Activamos la animación
            if (!IsLoading)
            {
                ShowContentWithAnimation = true;
            }
        }

        public Task OnNavigatedFromAsync()
        {
            ShowContentWithAnimation = false; // Ocultar al salir para que la próxima vez pueda animar
            return Task.CompletedTask;
        }

        public void OnNavigatedTo(object? parameter)
        {
        }

        public void ReleaseResourcesForTray()
        {
            IsLoading = true;
            if (_allChampions.Any())
            {
                var championsToRelease = _allChampions.ToList();
                System.Windows.Application.Current?.Dispatcher.Invoke(() => _allChampions.Clear());

                foreach (var champ in championsToRelease)
                {
                    champ.ReleaseImage();
                }
                System.Windows.Application.Current?.Dispatcher.Invoke(() => ChampionsView?.Refresh());
            }
            // _dataLoadedAtLeastOnce sigue siendo true, pero _allChampions está vacío
            // para que OnNavigatedToAsync recargue
            IsLoading = false;
        }

        partial void OnSearchTextChanged(string? value)
        {
            System.Windows.Application.Current?.Dispatcher.InvokeAsync(() => ChampionsView.Refresh(), DispatcherPriority.Background);
        }

        partial void OnSelectedRoleChanged(string? value)
        {
            System.Windows.Application.Current?.Dispatcher.InvokeAsync(() => ChampionsView.Refresh(), DispatcherPriority.Background);
        }

        private bool FilterChampions(object item)
        {
            if (!(item is ChampionSummary champ)) return false;

            bool textMatch = string.IsNullOrWhiteSpace(SearchText) ||
                             champ.Name.Contains(SearchText, StringComparison.OrdinalIgnoreCase);

            bool roleMatch = string.IsNullOrEmpty(SelectedRole) ||
                             SelectedRole.Equals("All", StringComparison.OrdinalIgnoreCase) ||
                             (champ.Roles != null && champ.Roles.Any(r => r.Equals(SelectedRole, StringComparison.OrdinalIgnoreCase)));

            return textMatch && roleMatch;
        }

        private void PopulateRoles()
        {
            var uniqueRoles = new HashSet<string>(StringComparer.OrdinalIgnoreCase);
            if (_allChampions.Any())
            {
                foreach (var champ in _allChampions)
                {
                    if (champ.Roles != null)
                    {
                        foreach (var role in champ.Roles)
                        {
                            if (!string.IsNullOrWhiteSpace(role))
                            {
                                uniqueRoles.Add(role);
                            }
                        }
                    }
                }
            }

            var sortedRoles = uniqueRoles.OrderBy(r => r).ToList();

            System.Windows.Application.Current?.Dispatcher.Invoke(() => {
                string? actualCurrentSelection = SelectedRole;
                AllRoles.Clear();
                AllRoles.Add("All");
                foreach (var role in sortedRoles)
                {
                    string displayRole = role.Length > 0 ? char.ToUpper(role[0]) + role.Substring(1) : role;
                    AllRoles.Add(displayRole);
                }

                if (!string.IsNullOrEmpty(actualCurrentSelection) && AllRoles.Contains(actualCurrentSelection))
                {
                    SelectedRole = actualCurrentSelection;
                }
                else
                {
                    SelectedRole = "All";
                }
            });
        }

        [RelayCommand]
        public async Task LoadChampionsAsync()
        {
            if (!IsLoading) IsLoading = true; // Asegurar que esté en loading

            var champs = await CdragonDataService.GetChampionSummariesAsync();
            if (champs != null)
            {
                var tempChamps = champs.OrderBy(c => c.Name).ToList();
                System.Windows.Application.Current?.Dispatcher.Invoke(() =>
                {
                    _allChampions.Clear();
                    foreach (var champ in tempChamps)
                    {
                        if (champ.Roles == null) champ.Roles = new List<string>();
                        _allChampions.Add(champ);
                    }
                });
                PopulateRoles();
                System.Windows.Application.Current?.Dispatcher.Invoke(() => ChampionsView.Refresh());
            }
            else
            {
                System.Windows.Application.Current?.Dispatcher.Invoke(() => {
                    System.Windows.MessageBox.Show("Failed to load champions.", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                });
            }
            IsLoading = false;
        }

        [RelayCommand]
        private void SelectChampion(ChampionSummary? champion)
        {
            if (champion != null)
            {
                _customNavigationService.NavigateToChampionDetail(champion.Id);
            }
        }
    }
}
/// Pages End of ChampionGridPageViewModel.cs ///

/// Pages Start of DashboardViewModel.cs ///
﻿namespace skinhunter.ViewModels.Pages // Este debe coincidir con el using en App.xaml.cs
{
    public partial class DashboardViewModel : ObservableObject
    {
        [ObservableProperty]
        private int _counter;

        [RelayCommand]
        private void CounterIncrement()
        {
            Counter++;
        }
    }
}
/// Pages End of DashboardViewModel.cs ///

/// Pages Start of DataViewModel.cs ///
﻿using System.Windows.Media;
using skinhunter.Models;
using Wpf.Ui.Abstractions.Controls;
using System.Collections.Generic;
using System.Linq;

namespace skinhunter.ViewModels.Pages
{
    public partial class DataViewModel : ObservableObject, INavigationAware
    {
        private bool _isInitialized = false;

        [ObservableProperty]
        private IEnumerable<DataColor> _colors = Enumerable.Empty<DataColor>();

        public Task OnNavigatedToAsync()
        {
            if (!_isInitialized)
                InitializeViewModel();
            return Task.CompletedTask;
        }

        public Task OnNavigatedFromAsync()
        {
            return Task.CompletedTask;
        }

        public void OnNavigatedTo(object? parameter)
        {
            // No parameter expected for this page currently
        }

        private void InitializeViewModel()
        {
            var random = new Random();
            var colorCollection = new List<DataColor>();

            for (int i = 0; i < 8192; i++)
                colorCollection.Add(
                    new DataColor
                    {
                        Color = new SolidColorBrush(
                            Color.FromArgb(
                                (byte)200,
                                (byte)random.Next(0, 250),
                                (byte)random.Next(0, 250),
                                (byte)random.Next(0, 250)
                            )
                        )
                    }
                );
            Colors = colorCollection;
            _isInitialized = true;
        }
    }
}
/// Pages End of DataViewModel.cs ///

/// Pages Start of SettingsViewModel.cs ///
﻿using Wpf.Ui.Abstractions.Controls;
using Wpf.Ui.Appearance;

namespace skinhunter.ViewModels.Pages
{
    public partial class SettingsViewModel : ObservableObject, INavigationAware
    {
        private bool _isInitialized = false;

        [ObservableProperty]
        private string _appVersion = string.Empty;

        [ObservableProperty]
        private ApplicationTheme _currentTheme = ApplicationTheme.Unknown;

        public Task OnNavigatedToAsync()
        {
            if (!_isInitialized)
                InitializeViewModel();
            return Task.CompletedTask;
        }

        public Task OnNavigatedFromAsync()
        {
            return Task.CompletedTask;
        }

        public void OnNavigatedTo(object? parameter)
        {
            // No parameter expected for this page currently
        }

        private void InitializeViewModel()
        {
            CurrentTheme = ApplicationThemeManager.GetAppTheme();
            AppVersion = $"skinhunter - {GetAssemblyVersion()}";
            _isInitialized = true;
        }

        private string GetAssemblyVersion()
        {
            return System.Reflection.Assembly.GetExecutingAssembly().GetName().Version?.ToString()
                ?? String.Empty;
        }

        [RelayCommand]
        private void ChangeTheme(string parameter)
        {
            ApplicationTheme newTheme;
            switch (parameter.ToLowerInvariant())
            {
                case "theme_light":
                    newTheme = ApplicationTheme.Light;
                    break;
                case "theme_dark":
                    newTheme = ApplicationTheme.Dark;
                    break;
                default:
                    return;
            }

            if (CurrentTheme == newTheme)
                return;

            ApplicationThemeManager.Apply(newTheme);
            CurrentTheme = newTheme;
        }
    }
}
/// Pages End of SettingsViewModel.cs ///

/// Dialogs Start of OmnisearchViewModel.cs ///
﻿using skinhunter.Models;
using skinhunter.Services;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Data;
using System.ComponentModel;
using System.Diagnostics;
using System.Threading;
using Microsoft.Extensions.DependencyInjection;
using System.Collections;


namespace skinhunter.ViewModels.Dialogs
{
    public partial class OmnisearchViewModel : ViewModelBase
    {
        private readonly ICustomNavigationService? _customNavigationService;
        private readonly IServiceProvider? _serviceProvider;
        private List<ChampionSummary> _allChampionsMasterList = [];
        private List<Skin> _allSkinsMasterList = [];
        private Dictionary<int, ChampionSummary> _championMap = [];

        [ObservableProperty]
        private string? _query;

        [ObservableProperty]
        private bool _showChampionsFilter = true;

        [ObservableProperty]
        private bool _showSkinsFilter = true;

        [ObservableProperty]
        private bool _isFilterPopupOpen;

        [ObservableProperty]
        private bool _isLoadingSearchResults;


        public ObservableCollection<SearchResultItem> SearchResults { get; } = [];
        public ICollectionView SearchResultsView { get; }

        public OmnisearchViewModel()
        {
            if (DesignerProperties.GetIsInDesignMode(new DependencyObject()))
            {
                Query = "Search...";
            }
            _customNavigationService = null;
            _serviceProvider = null;
            SearchResultsView = CollectionViewSource.GetDefaultView(SearchResults);
            if (SearchResultsView.GroupDescriptions is not null)
            {
                SearchResultsView.GroupDescriptions.Add(new PropertyGroupDescription("DisplayType"));
            }
        }

        public OmnisearchViewModel(ICustomNavigationService customNavigationService, IServiceProvider serviceProvider)
        {
            _customNavigationService = customNavigationService ?? throw new ArgumentNullException(nameof(customNavigationService));
            _serviceProvider = serviceProvider ?? throw new ArgumentNullException(nameof(serviceProvider));
            SearchResultsView = CollectionViewSource.GetDefaultView(SearchResults);
            if (SearchResultsView.GroupDescriptions is not null)
            {
                SearchResultsView.GroupDescriptions.Add(new PropertyGroupDescription("DisplayType"));
            }
        }

        private bool _isDataLoaded = false;

        public async Task EnsureDataLoadedAsync()
        {
            if (_isDataLoaded) return;
            if (_serviceProvider is null) return;

            IsLoading = true;
            try
            {
                var champsTask = CdragonDataService.GetChampionSummariesAsync();
                var skinsTask = CdragonDataService.GetAllSkinsAsync();
                await Task.WhenAll(champsTask, skinsTask);

                var champs = await champsTask;
                if (champs is not null)
                {
                    _allChampionsMasterList = champs;
                    _championMap = champs.ToDictionary(c => c.Id);
                }

                var skinsDict = await skinsTask;
                if (skinsDict is not null)
                {
                    _allSkinsMasterList = skinsDict.Values
                        .Where(s => {
                            bool isBaseSkinName = false;
                            if (_championMap.TryGetValue(s.ChampionId, out var parentChamp))
                            {
                                isBaseSkinName = s.Name.Equals(parentChamp.Name, StringComparison.OrdinalIgnoreCase) ||
                                                 s.Name.Equals($"Base {parentChamp.Name}", StringComparison.OrdinalIgnoreCase);
                            }
                            return !isBaseSkinName && !s.Name.Contains("Original", StringComparison.OrdinalIgnoreCase);
                        })
                        .OrderBy(s => s.Name)
                        .ToList();
                }
                _isDataLoaded = true;
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"[OmnisearchViewModel] Error cargando datos maestros: {ex.Message}");
            }
            finally
            {
                IsLoading = false;
            }
        }

        partial void OnQueryChanged(string? value)
        {
            PerformSearch();
        }

        partial void OnShowChampionsFilterChanged(bool value)
        {
            PerformSearch();
        }

        partial void OnShowSkinsFilterChanged(bool value)
        {
            PerformSearch();
        }

        private CancellationTokenSource _searchCts = new();

        private async void PerformSearch()
        {
            _searchCts.Cancel();
            _searchCts = new();
            var token = _searchCts.Token;
            var currentQuery = Query;

            if (string.IsNullOrWhiteSpace(currentQuery) || currentQuery.Length < 1)
            {
                SearchResults.Clear();
                IsLoadingSearchResults = false;
                return;
            }

            if (!_isDataLoaded && _serviceProvider is not null)
            {
                IsLoadingSearchResults = true;
                await EnsureDataLoadedAsync();
                if (token.IsCancellationRequested || !_isDataLoaded)
                {
                    IsLoadingSearchResults = false;
                    SearchResults.Clear();
                    return;
                }
            }
            else if (!_isDataLoaded && _serviceProvider is null)
            {
                return;
            }

            SearchResults.Clear();
            IsLoadingSearchResults = true;

            try
            {
                List<SearchResultItem> newRawResults = await Task.Run(() => {
                    if (token.IsCancellationRequested) return [];

                    List<SearchResultItem> filteredResults = [];
                    if (ShowChampionsFilter)
                    {
                        filteredResults.AddRange(_allChampionsMasterList
                            .Where(c => c.Name.Contains(currentQuery, StringComparison.OrdinalIgnoreCase))
                            .Select(c => new SearchResultItem(c)));
                    }
                    if (ShowSkinsFilter)
                    {
                        filteredResults.AddRange(_allSkinsMasterList
                            .Where(s => s.Name.Contains(currentQuery, StringComparison.OrdinalIgnoreCase))
                            .Select(s => new SearchResultItem(s, _championMap.TryGetValue(s.ChampionId, out var champ) ? champ : null)));
                    }
                    return filteredResults.OrderBy(r => r.Type).ThenBy(r => r.Name).Take(25).ToList();
                }, token);

                if (token.IsCancellationRequested)
                {
                    IsLoadingSearchResults = false;
                    return;
                }

                foreach (var item in newRawResults)
                {
                    SearchResults.Add(item);
                }
                if (SearchResults.Any())
                {
                    _ = Task.Run(async () =>
                    {
                        var imageLoadTasks = SearchResults.Select(item => item.LoadImageAsync()).ToList();
                        try
                        {
                            await Task.WhenAll(imageLoadTasks);
                        }
                        catch (Exception imgEx)
                        {
                            Debug.WriteLine($"[OmnisearchViewModel] Error durante carga de imágenes en lote: {imgEx.Message}");
                        }
                    }, token);
                }
            }
            catch (TaskCanceledException) { }
            catch (Exception ex) { Debug.WriteLine($"[OmnisearchViewModel] Error durante la búsqueda: {ex.Message}"); }
            finally
            {
                IsLoadingSearchResults = false;
            }
        }

        [RelayCommand]
        private void SelectResult(SearchResultItem? selectedItem)
        {
            if (selectedItem is null || _customNavigationService is null) return;
            CloseOmnisearchDialog();
            if (selectedItem.Type == SearchResultType.Champion)
            {
                _customNavigationService.NavigateToChampionDetail(selectedItem.ChampionId);
            }
            else if (selectedItem.Type == SearchResultType.Skin && selectedItem.OriginalSkinObject is not null)
            {
                _customNavigationService.ShowSkinDetailDialog(selectedItem.OriginalSkinObject);
            }
        }

        [RelayCommand]
        private void CloseOmnisearchDialog()
        {
            IsFilterPopupOpen = false;
            _customNavigationService?.CloseOmnisearchDialog();
        }

        [RelayCommand]
        private void ToggleFilterPopup()
        {
            IsFilterPopupOpen = !IsFilterPopupOpen;
        }
    }
}
/// Dialogs End of OmnisearchViewModel.cs ///

/// Dialogs Start of SkinDetailViewModel.cs ///
﻿using skinhunter.Models;
using skinhunter.Services;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.Extensions.DependencyInjection;
using System.Diagnostics;


namespace skinhunter.ViewModels.Dialogs
{
    public partial class SkinDetailViewModel : ViewModelBase
    {
        private readonly ICustomNavigationService _customNavigationService;

        [ObservableProperty]
        private Skin? _selectedSkin;

        public ObservableCollection<Chroma> AvailableChromas { get; } = [];

        [ObservableProperty]
        [NotifyPropertyChangedFor(nameof(IsDefaultSelected))]
        [NotifyPropertyChangedFor(nameof(KhadaViewerUrl))]
        private Chroma? _selectedChroma;

        [ObservableProperty]
        private int _userCredits = 5;

        public bool IsDefaultSelected => SelectedChroma == null;

        public string? KhadaViewerUrl
        {
            get
            {
                if (SelectedSkin == null) return null;
                int skinId = SelectedSkin.Id;
                int? chromaId = SelectedChroma?.Id;
                string url = $"https://modelviewer.lol/model-viewer?id={skinId}";
                if (chromaId.HasValue && chromaId.Value != 0 && chromaId.Value / 1000 == skinId)
                {
                    url += $"&chroma={chromaId.Value}";
                }
                return url;
            }
        }

        public SkinDetailViewModel(ICustomNavigationService customNavigationService)
        {
            _customNavigationService = customNavigationService;
        }

        public async Task LoadSkinAsync(Skin skin)
        {
            IsLoading = true;

            await CdragonDataService.EnrichSkinWithSupabaseChromaDataAsync(skin);
            SelectedSkin = skin;

            AvailableChromas.Clear();

            if (SelectedSkin.Chromas != null && SelectedSkin.Chromas.Any())
            {
                foreach (var chroma in SelectedSkin.Chromas)
                {
                    if (chroma != null)
                    {
                        chroma.IsSelected = false;
                        AvailableChromas.Add(chroma);
                    }
                }
            }
            else
            {
            }

            SelectedChroma = null;
            DownloadSkinCommand.NotifyCanExecuteChanged();
            IsLoading = false;
        }

        public bool CanDownload()
        {
            return UserCredits > 0;
        }

        [RelayCommand(CanExecute = nameof(CanDownload))]
        private async Task DownloadSkinAsync()
        {
            IsLoading = true;
            var skinOrChromaName = IsDefaultSelected ? SelectedSkin?.Name : SelectedChroma?.Name;
            var idToDownload = IsDefaultSelected ? SelectedSkin?.Id : SelectedChroma?.Id;

            await Task.Delay(1500);

            UserCredits--;
            DownloadSkinCommand.NotifyCanExecuteChanged();

            IsLoading = false;
            System.Windows.MessageBox.Show($"'{skinOrChromaName}' (ID: {idToDownload}) download initiated!", "Download", MessageBoxButton.OK, MessageBoxImage.Information);

            CloseDialog();
        }

        [RelayCommand]
        private void CloseDialog()
        {
            _customNavigationService.CloseDialog();
        }

        private void SetDefaultSelection()
        {
            SelectedChroma = null;
            RefreshChromaSelections(null);
        }

        [RelayCommand]
        private void ToggleChromaSelection(Chroma? clickedChroma)
        {
            if (clickedChroma == null) return;

            if (SelectedChroma == clickedChroma)
            {
                SetDefaultSelection();
            }
            else
            {
                SelectedChroma = clickedChroma;
                RefreshChromaSelections(SelectedChroma);
            }
            DownloadSkinCommand.NotifyCanExecuteChanged();
        }

        private void RefreshChromaSelections(Chroma? selected)
        {
            foreach (var ch in AvailableChromas)
            {
                ch.IsSelected = (ch == selected);
            }
        }
    }
}
/// Dialogs End of SkinDetailViewModel.cs ///

/// Services Start of ApplicationHostService.cs ///
﻿using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using skinhunter.Views.Pages; // Asegúrate que este using está
using Wpf.Ui;


namespace skinhunter.Services
{
    public class ApplicationHostService : IHostedService
    {
        private readonly IServiceProvider _serviceProvider;
        private INavigationWindow? _navigationWindow;

        public ApplicationHostService(IServiceProvider serviceProvider)
        {
            _serviceProvider = serviceProvider;
        }

        public async Task StartAsync(CancellationToken cancellationToken)
        {
            await HandleActivationAsync();
        }

        public async Task StopAsync(CancellationToken cancellationToken)
        {
            await Task.CompletedTask;
        }

        private async Task HandleActivationAsync()
        {
            if (!Application.Current.Windows.OfType<skinhunter.Views.Windows.MainWindow>().Any())
            {
                _navigationWindow = _serviceProvider.GetService<INavigationWindow>();
                _navigationWindow!.ShowWindow();

                // Navegación inicial
                // El INavigationService ya debería estar configurado con el control de navegación
                // en el constructor de MainWindow.
                var navigationService = _serviceProvider.GetRequiredService<INavigationService>();

                // Puedes obtener el primer item del ViewModel de MainWindow si es allí donde los defines
                var mainWindowViewModel = _serviceProvider.GetRequiredService<ViewModels.Windows.MainWindowViewModel>();
                var firstMenuItem = mainWindowViewModel.MenuItems.FirstOrDefault() as Wpf.Ui.Controls.NavigationViewItem;

                if (firstMenuItem?.TargetPageType != null)
                {
                    navigationService.Navigate(firstMenuItem.TargetPageType);
                }
                else
                {
                    // Fallback si no hay items de menú o el primero no es navegable
                    navigationService.Navigate(typeof(Views.Pages.ChampionGridPage));
                }
            }
            await Task.CompletedTask;
        }
    }
}
/// Services End of ApplicationHostService.cs ///

/// Services Start of CdragonDataService.cs ///
﻿using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Threading.Tasks;
using skinhunter.Models;
using System.Linq;
using System.IO;
using System.Net.Http.Headers;
using System.Diagnostics;

namespace skinhunter.Services
{
    public static class CdragonDataService
    {
        private static readonly HttpClient _httpClient = CreateHttpClient();
        private static readonly JsonSerializerOptions _jsonOptions = new() { PropertyNameCaseInsensitive = true };

        private const string CdragonBaseUrl = "https://raw.communitydragon.org/latest";
        private const string DataRoot = $"{CdragonBaseUrl}/plugins/rcp-be-lol-game-data/global/default";
        private static string? _cdragonVersion;

        private const string SupabaseUrl = "https://odlqwkgewzxxmbsqutja.supabase.co";
        private const string SupabaseAnonKey = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im9kbHF3a2dld3p4eG1ic3F1dGphIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzQyMTM2NzcsImV4cCI6MjA0OTc4OTY3N30.qka6a71bavDeUQgy_BKoVavaClRQa_gT36Au7oO9AF0";
        private const string SupabaseStorageBasePath = "/storage/v1/object/public";

        private static HttpClient CreateHttpClient() => new();

        private static async Task<string> GetCdragonVersionAsync()
        {
            if (_cdragonVersion == null)
            {
                try
                {
                    var metaUrl = $"{CdragonBaseUrl}/content-metadata.json";
                    using var request = new HttpRequestMessage(HttpMethod.Get, metaUrl);
                    using var response = await _httpClient.SendAsync(request);
                    response.EnsureSuccessStatusCode();
                    using var json = await response.Content.ReadAsStreamAsync();
                    var metadata = await JsonSerializer.DeserializeAsync<Dictionary<string, JsonElement>>(json, _jsonOptions);
                    if (metadata != null && metadata.TryGetValue("version", out var versionElement))
                    {
                        _cdragonVersion = versionElement.GetString() ?? "latest";
                    }
                    else { _cdragonVersion = "latest"; }
                }
                catch (Exception ex)
                {
                    Debug.WriteLine($"[CdragonDataService] Error fetching CDRAGON version: {ex.Message}");
                    _cdragonVersion = "latest";
                }
            }
            return _cdragonVersion;
        }

        private static async Task<T?> FetchDataAsync<T>(string fullUrl, bool isSupabase = false) where T : class
        {
            var httpClientToUse = _httpClient;
            try
            {
                using var request = new HttpRequestMessage(HttpMethod.Get, fullUrl);
                if (isSupabase)
                {
                    request.Headers.TryAddWithoutValidation("apikey", SupabaseAnonKey);
                }

                using var response = await httpClientToUse.SendAsync(request);
                response.EnsureSuccessStatusCode();
                byte[] contentBytes = await response.Content.ReadAsByteArrayAsync();
                if (contentBytes == null || contentBytes.Length == 0) return null;
                using var memoryStream = new MemoryStream(contentBytes);
                return await JsonSerializer.DeserializeAsync<T>(memoryStream, _jsonOptions);
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"[CdragonDataService] Error fetching/parsing {Path.GetFileNameWithoutExtension(fullUrl)}: {ex.Message}");
            }
            return null;
        }

        private static async Task<SupabaseChampionData?> FetchChampionDataFromSupabaseAsync(int championId)
        {
            string supabaseFileUrl = $"{SupabaseUrl}{SupabaseStorageBasePath}/api_json/{championId}.json";
            return await FetchDataAsync<SupabaseChampionData>(supabaseFileUrl, isSupabase: true);
        }

        public static async Task<List<ChampionSummary>?> GetChampionSummariesAsync()
        {
            _ = await GetCdragonVersionAsync();
            var url = $"{DataRoot}/v1/champion-summary.json";
            var summaries = await FetchDataAsync<List<ChampionSummary>>(url);
            return summaries?.Where(c => c.Id != -1).OrderBy(c => c.Name).ToList();
        }

        public static async Task<Dictionary<string, Skin>?> GetAllSkinsAsync()
        {
            _ = await GetCdragonVersionAsync();
            var url = $"{DataRoot}/v1/skins.json";
            return await FetchDataAsync<Dictionary<string, Skin>>(url);
        }

        public static async Task EnrichSkinWithSupabaseChromaDataAsync(Skin wpfSkinToEnrich)
        {
            if (wpfSkinToEnrich == null) return;

            var championDataFromSupabase = await FetchChampionDataFromSupabaseAsync(wpfSkinToEnrich.ChampionId);

            if (championDataFromSupabase?.Skins == null)
            {
                return;
            }

            SupabaseSkinData? supabaseSkinData = championDataFromSupabase.Skins.FirstOrDefault(s => s.Id == wpfSkinToEnrich.Id);

            if (supabaseSkinData?.Chromas != null && supabaseSkinData.Chromas.Any())
            {
                var newWpfChromas = new List<Chroma>();
                foreach (var supabaseChromaSource in supabaseSkinData.Chromas)
                {
                    if (supabaseChromaSource != null)
                    {
                        var newWpfChroma = new Models.Chroma
                        {
                            Id = supabaseChromaSource.Id,
                            Name = supabaseChromaSource.Name,
                            ChromaPath = supabaseChromaSource.ChromaPath,
                            Colors = supabaseChromaSource.Colors != null ? new List<string>(supabaseChromaSource.Colors) : null
                        };
                        newWpfChromas.Add(newWpfChroma);
                    }
                }
                wpfSkinToEnrich.Chromas = newWpfChromas.OrderBy(c => c.Id).ToList();
            }
            else
            {
            }
        }

        public static async Task<ChampionDetail?> GetChampionDetailsAsync(int championId)
        {
            _ = await GetCdragonVersionAsync();
            var detailsUrl = $"{DataRoot}/v1/champions/{championId}.json";
            var championDetailWpf = await FetchDataAsync<ChampionDetail>(detailsUrl);
            if (championDetailWpf == null) return null;

            var allSkinsFromCdragon = await GetAllSkinsAsync();
            var skinsForThisChampionWpf = new List<Skin>();

            if (allSkinsFromCdragon != null)
            {
                foreach (var cdragonSkinEntry in allSkinsFromCdragon.Where(kvp => kvp.Value.ChampionId == championId))
                {
                    Skin cdragonSkinObject = cdragonSkinEntry.Value;

                    var currentWpfSkin = new Skin
                    {
                        Id = cdragonSkinObject.Id,
                        Name = cdragonSkinObject.Name,
                        TilePath = cdragonSkinObject.TilePath,
                        SplashPath = cdragonSkinObject.SplashPath,
                        RarityGemPath = cdragonSkinObject.RarityGemPath,
                        IsLegacy = cdragonSkinObject.IsLegacy,
                        Description = cdragonSkinObject.Description,
                        Chromas = []
                    };

                    if (cdragonSkinObject.Chromas != null && cdragonSkinObject.Chromas.Any())
                    {
                        foreach (var cdragonChromaSource in cdragonSkinObject.Chromas)
                        {
                            if (cdragonChromaSource != null)
                            {
                                currentWpfSkin.Chromas.Add(new Models.Chroma
                                {
                                    Id = cdragonChromaSource.Id,
                                    Name = cdragonChromaSource.Name,
                                    ChromaPath = cdragonChromaSource.ChromaPath,
                                    Colors = cdragonChromaSource.Colors != null ? new List<string>(cdragonChromaSource.Colors) : null
                                });
                            }
                        }
                    }

                    await EnrichSkinWithSupabaseChromaDataAsync(currentWpfSkin);

                    currentWpfSkin.Chromas = currentWpfSkin.Chromas.OrderBy(c => c.Id).ToList();
                    skinsForThisChampionWpf.Add(currentWpfSkin);
                }
            }
            championDetailWpf.Skins = skinsForThisChampionWpf.OrderBy(s => s.Name).ToList();
            return championDetailWpf;
        }

        public static string GetAssetUrl(string? relativePath)
        {
            if (string.IsNullOrWhiteSpace(relativePath))
                return "pack://application:,,,/Assets/placeholder.png";
            if (Uri.TryCreate(relativePath, UriKind.Absolute, out Uri? uriResult) && (uriResult.Scheme == Uri.UriSchemeHttp || uriResult.Scheme == Uri.UriSchemeHttps))
                return relativePath;
            const string apiAssetPrefix = "/lol-game-data/assets";
            if (relativePath.StartsWith(apiAssetPrefix, StringComparison.OrdinalIgnoreCase))
                return $"{DataRoot}/{relativePath[apiAssetPrefix.Length..].TrimStart('/')}".ToLowerInvariant();
            return $"{DataRoot}/{relativePath.TrimStart('/')}".ToLowerInvariant();
        }
    }
}
/// Services End of CdragonDataService.cs ///

/// Services Start of CustomNavigationService.cs ///
﻿using skinhunter.ViewModels;
using skinhunter.Models;
using System;
using Microsoft.Extensions.DependencyInjection;
using System.Threading.Tasks;
using Wpf.Ui;
using skinhunter.ViewModels.Windows;
using skinhunter.ViewModels.Dialogs;
using skinhunter.Views.Pages;
using System.Diagnostics;

namespace skinhunter.Services
{
    public interface ICustomNavigationService
    {
        void NavigateToChampionDetail(int championId);
        void ShowSkinDetailDialog(Skin skin);
        void ShowOmnisearchDialog();
        void CloseDialog();
        void CloseOmnisearchDialog();
        void GoBack();
        object? ConsumeNavigationParameter();
    }

    public class CustomNavigationService : ICustomNavigationService
    {
        private readonly IServiceProvider _serviceProvider;
        private readonly INavigationService _wpfUiNavigationService;
        private MainWindowViewModel? _mainWindowViewModelCache;
        private object? _pendingNavigationParameter;

        public CustomNavigationService(IServiceProvider serviceProvider, INavigationService wpfUiNavigationService)
        {
            _serviceProvider = serviceProvider;
            _wpfUiNavigationService = wpfUiNavigationService;
        }

        private MainWindowViewModel MainVM => _mainWindowViewModelCache ??= _serviceProvider.GetRequiredService<MainWindowViewModel>();

        public void NavigateToChampionDetail(int championId)
        {
            Debug.WriteLine($"[CustomNavigationService.NavigateToChampionDetail] Storing parameter: {championId} and navigating to ChampionDetailPage");
            _pendingNavigationParameter = championId;
            _wpfUiNavigationService.Navigate(typeof(ChampionDetailPage));
        }

        public object? ConsumeNavigationParameter()
        {
            var parameter = _pendingNavigationParameter;
            _pendingNavigationParameter = null;
            Debug.WriteLine($"[CustomNavigationService.ConsumeNavigationParameter] Parameter consumed: {parameter}");
            return parameter;
        }

        public void ShowSkinDetailDialog(Skin skin)
        {
            var skinDetailVM = _serviceProvider.GetRequiredService<SkinDetailViewModel>();
            MainVM.DialogViewModel = skinDetailVM;
            _ = skinDetailVM.LoadSkinAsync(skin);
        }

        public async void ShowOmnisearchDialog()
        {
            var omnisearchVM = _serviceProvider.GetRequiredService<OmnisearchViewModel>();
            MainVM.OmnisearchDialogViewModel = omnisearchVM;
            if (omnisearchVM is not null)
            {
                await omnisearchVM.EnsureDataLoadedAsync();
            }
        }

        public void CloseDialog()
        {
            MainVM.DialogViewModel = null;
        }

        public void CloseOmnisearchDialog()
        {
            var omniVM = MainVM.OmnisearchDialogViewModel;
            if (omniVM is not null)
            {
                omniVM.IsFilterPopupOpen = false;
            }
            MainVM.OmnisearchDialogViewModel = null;
        }

        public void GoBack()
        {
            if (MainVM.DialogViewModel is not null || MainVM.OmnisearchDialogViewModel is not null)
            {
                CloseDialog();
                CloseOmnisearchDialog();
                return;
            }
            _wpfUiNavigationService.GoBack();
        }
    }
}
/// Services End of CustomNavigationService.cs ///

/// Resources Start of Translations.cs ///
namespace skinhunter.Resources
{
    public partial class Translations
    {
    }
}

/// Resources End of Translations.cs ///

/// Models Start of AppConfig.cs ///
﻿namespace skinhunter.Models
{
    public class AppConfig
    {
        public string? ConfigurationsFolder { get; set; }

        public string? AppPropertiesFileName { get; set; }
    }
}
/// Models End of AppConfig.cs ///

/// Models Start of ChampionDetail.cs ///
﻿using System.Collections.Generic;
using System.Text.Json.Serialization;

namespace skinhunter.Models
{
    public class ChampionDetail : ChampionSummary
    {
        [JsonPropertyName("title")]
        public string Title { get; set; } = string.Empty;

        [JsonPropertyName("shortBio")]
        public string ShortBio { get; set; } = string.Empty;

        [JsonIgnore]
        public List<Skin> Skins { get; set; } = new List<Skin>();
    }
}
/// Models End of ChampionDetail.cs ///

/// Models Start of ChampionSummary.cs ///
﻿using skinhunter.Services;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Net.Http;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Media.Imaging;


namespace skinhunter.Models
{
    public partial class ChampionSummary : ObservableObject
    {
        [JsonPropertyName("id")]
        public int Id { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; } = string.Empty;

        [JsonPropertyName("alias")]
        public string Alias { get; set; } = string.Empty;

        [JsonPropertyName("squarePortraitPath")]
        public string SquarePortraitPath { get; set; } = string.Empty;

        [JsonPropertyName("roles")]
        public List<string>? Roles { get; set; }

        private BitmapImage? _championImageSourceField;

        [JsonIgnore]
        public BitmapImage? ChampionImageSource
        {
            get
            {
                if (_championImageSourceField == null || _championImageSourceField == _placeholderImage)
                {
                    if (!_isImageLoading && !string.IsNullOrEmpty(OriginalImageUrl) && !OriginalImageUrl.StartsWith("pack:"))
                    {
                        _ = LoadImageAsync();
                    }
                    return _placeholderImage;
                }
                return _championImageSourceField;
            }
            private set
            {
                SetProperty(ref _championImageSourceField, value);
            }
        }

        public void ReleaseImage()
        {
            Debug.WriteLine($"[ChampionSummary] Liberando imagen para {Name}");
            if (System.Windows.Application.Current != null)
            {
                System.Windows.Application.Current.Dispatcher.Invoke(() =>
                {
                    if (_championImageSourceField != _placeholderImage)
                    {
                        CancelCurrentLoad();
                        ChampionImageSource = _placeholderImage;
                        Debug.WriteLine($"[ChampionSummary] Imagen para {Name} establecida a placeholder.");
                    }
                });
            }
            else
            {
                if (_championImageSourceField != _placeholderImage)
                {
                    CancelCurrentLoad();
                    _championImageSourceField = _placeholderImage;
                    OnPropertyChanged(nameof(ChampionImageSource));
                    Debug.WriteLine($"[ChampionSummary] Imagen para {Name} establecida a placeholder (sin Dispatcher).");
                }
            }
        }


        [JsonIgnore]
        private volatile bool _isImageLoading = false;
        [JsonIgnore]
        private static readonly HttpClient _httpClient = new HttpClient { Timeout = TimeSpan.FromSeconds(15) };
        [JsonIgnore]
        private static readonly Dictionary<string, BitmapImage> _imageCache = new Dictionary<string, BitmapImage>(StringComparer.OrdinalIgnoreCase);
        [JsonIgnore]
        private static readonly BitmapImage? _placeholderImage = LoadPlaceholderImage();

        private CancellationTokenSource? _cancellationTokenSource;

        private async Task LoadImageAsync()
        {
            if (_isImageLoading) return;
            _isImageLoading = true;

            _cancellationTokenSource?.Cancel();
            _cancellationTokenSource = new CancellationTokenSource();
            var token = _cancellationTokenSource.Token;

            string imageUrl = OriginalImageUrl;
            BitmapImage? finalImage = null;

            if (string.IsNullOrEmpty(imageUrl) || imageUrl.StartsWith("pack:"))
            {
                finalImage = _placeholderImage;
            }
            else
            {
                lock (_imageCache)
                {
                    if (_imageCache.TryGetValue(imageUrl, out var cachedImageFromLock))
                    {
                        finalImage = cachedImageFromLock;
                    }
                }

                if (finalImage == null)
                {
                    try
                    {
                        using var request = new HttpRequestMessage(HttpMethod.Get, imageUrl);
                        using var response = await _httpClient.SendAsync(request, HttpCompletionOption.ResponseHeadersRead, token);
                        response.EnsureSuccessStatusCode();
                        byte[] imageData = await response.Content.ReadAsByteArrayAsync(token);

                        if (token.IsCancellationRequested)
                        {
                            _isImageLoading = false;
                            if (System.Windows.Application.Current != null)
                                System.Windows.Application.Current.Dispatcher.Invoke(() => ChampionImageSource = _placeholderImage);
                            else
                                ChampionImageSource = _placeholderImage;
                            return;
                        }

                        var bitmap = new BitmapImage();
                        using (var stream = new MemoryStream(imageData))
                        {
                            bitmap.BeginInit();
                            bitmap.CacheOption = BitmapCacheOption.OnLoad;
                            bitmap.DecodePixelWidth = 80;
                            bitmap.StreamSource = stream;
                            bitmap.EndInit();
                        }
                        bitmap.Freeze();
                        finalImage = bitmap;

                        lock (_imageCache)
                        {
                            _imageCache.TryAdd(imageUrl, finalImage);
                        }
                    }
                    catch (OperationCanceledException)
                    {
                        finalImage = _placeholderImage;
                    }
                    catch (Exception)
                    {
                        finalImage = _placeholderImage;
                    }
                }
            }

            if (System.Windows.Application.Current != null)
            {
                System.Windows.Application.Current.Dispatcher.Invoke(() =>
                {
                    if (!token.IsCancellationRequested)
                    {
                        ChampionImageSource = finalImage ?? _placeholderImage;
                    }
                    else
                    {
                        ChampionImageSource = _placeholderImage;
                    }
                });
            }
            else
            {
                ChampionImageSource = finalImage ?? _placeholderImage;
            }
            _isImageLoading = false;
        }

        public void CancelCurrentLoad()
        {
            if (_isImageLoading)
            {
                _cancellationTokenSource?.Cancel();
                _isImageLoading = false;
            }
        }

        [JsonIgnore]
        public string OriginalImageUrl => CdragonDataService.GetAssetUrl(SquarePortraitPath);

        [JsonIgnore]
        public string Key => Alias?.ToLowerInvariant() ?? string.Empty;

        private static BitmapImage? LoadPlaceholderImage()
        {
            try
            {
                var placeholder = new BitmapImage();
                placeholder.BeginInit();
                placeholder.UriSource = new Uri("pack://application:,,,/Assets/placeholder.png", UriKind.Absolute);
                placeholder.DecodePixelWidth = 80;
                placeholder.CacheOption = BitmapCacheOption.OnLoad;
                placeholder.EndInit();
                placeholder.Freeze();
                return placeholder;
            }
            catch (Exception)
            {
                return null;
            }
        }
    }
}
/// Models End of ChampionSummary.cs ///

/// Models Start of Chroma.cs ///
﻿using System.Text.Json.Serialization;
using System.Collections.Generic;
using System.Windows.Media;

namespace skinhunter.Models
{
    public partial class Chroma : ObservableObject
    {
        [JsonPropertyName("id")]
        public int Id { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; } = string.Empty;

        [JsonPropertyName("chromaPath")]
        public string ChromaPath { get; set; } = string.Empty;

        [JsonPropertyName("colors")]
        public List<string>? Colors { get; set; }

        [JsonIgnore]
        public string ImageUrl => Services.CdragonDataService.GetAssetUrl(ChromaPath);

        [JsonIgnore]
        public System.Windows.Media.Brush? ColorBrush
        {
            get
            {
                if (Colors == null || Colors.Count == 0) return System.Windows.Media.Brushes.Gray;
                if (Colors.Count == 1)
                {
                    try { return new SolidColorBrush((System.Windows.Media.Color)System.Windows.Media.ColorConverter.ConvertFromString(Colors[0])); }
                    catch { return System.Windows.Media.Brushes.Gray; }
                }
                try
                {
                    var gradient = new LinearGradientBrush
                    {
                        StartPoint = new System.Windows.Point(0, 0.5),
                        EndPoint = new System.Windows.Point(1, 0.5)
                    };
                    gradient.GradientStops.Add(new GradientStop((System.Windows.Media.Color)System.Windows.Media.ColorConverter.ConvertFromString(Colors[0]), 0.0));
                    gradient.GradientStops.Add(new GradientStop((System.Windows.Media.Color)System.Windows.Media.ColorConverter.ConvertFromString(Colors[1]), 1.0));
                    return gradient;
                }
                catch { return System.Windows.Media.Brushes.Gray; }
            }
        }

        [ObservableProperty]
        [JsonIgnore]
        private bool _isSelected;
    }
}
/// Models End of Chroma.cs ///

/// Models Start of DataColor.cs ///
﻿using System.Windows.Media;

namespace skinhunter.Models
{
    public struct DataColor
    {
        public Brush Color { get; set; }
    }
}

/// Models End of DataColor.cs ///

/// Models Start of SearchResultItem.cs ///
﻿using skinhunter.Services;
using System.Windows.Media.Imaging;
using System.Threading.Tasks;
using System.Diagnostics;
using System.Windows.Media;


namespace skinhunter.Models
{
    public enum SearchResultType
    {
        Champion,
        Skin
    }

    public partial class SearchResultItem : ObservableObject
    {
        public int Id { get; }
        public string Name { get; }
        public SearchResultType Type { get; }
        public string DisplayType { get; }

        [ObservableProperty]
        private BitmapImage? _imageSource;

        private readonly string? _imagePath;

        public int ChampionId { get; }
        public Skin? OriginalSkinObject { get; }
        public ChampionSummary? OriginalChampionObject { get; }


        public SearchResultItem(ChampionSummary champion)
        {
            Id = champion.Id;
            Name = champion.Name;
            Type = SearchResultType.Champion;
            DisplayType = "Champion";
            _imagePath = champion.SquarePortraitPath;
            ChampionId = champion.Id;
            OriginalChampionObject = champion;
        }

        public SearchResultItem(Skin skin, ChampionSummary? parentChampion)
        {
            Id = skin.Id;
            Name = skin.Name;
            Type = SearchResultType.Skin;
            DisplayType = "Champion Skin";
            _imagePath = skin.TilePath;
            ChampionId = skin.ChampionId;
            OriginalSkinObject = skin;
            OriginalChampionObject = parentChampion;
        }

        private bool _isImageLoadingOrLoaded = false;

        public async Task LoadImageAsync()
        {
            if (_isImageLoadingOrLoaded || string.IsNullOrEmpty(_imagePath))
            {
                return;
            }

            _isImageLoadingOrLoaded = true;

            BitmapImage? loadedBitmap = null;
            Uri? imageUri = null;

            try
            {
                string fullUrl = CdragonDataService.GetAssetUrl(_imagePath);
                if (Uri.TryCreate(fullUrl, UriKind.Absolute, out imageUri))
                {

                    if (System.Windows.Application.Current != null)
                    {
                        await System.Windows.Application.Current.Dispatcher.InvokeAsync(() =>
                        {
                            BitmapImage bitmap = new();
                            bitmap.BeginInit();
                            bitmap.UriSource = imageUri;
                            bitmap.DecodePixelWidth = 64;
                            bitmap.CacheOption = BitmapCacheOption.OnLoad;
                            try
                            {
                                bitmap.EndInit();
                                if (bitmap.CanFreeze)
                                {
                                    bitmap.Freeze();
                                }
                                loadedBitmap = bitmap;
                            }
                            catch (Exception exEndInit)
                            {
                                Debug.WriteLine($"Error en EndInit para imagen {imageUri}: {exEndInit.Message}");
                                loadedBitmap = null;
                            }
                        });
                    }
                }
                else
                {
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"Error creando Uri o despachando carga de imagen {_imagePath}: {ex.Message}");
                loadedBitmap = null;
            }

            ImageSource = loadedBitmap;
        }
    }
}
/// Models End of SearchResultItem.cs ///

/// Models Start of Skin.cs ///
﻿using System.Text.Json.Serialization;
using System.Collections.Generic;
using System.Linq;

namespace skinhunter.Models
{
    public class Skin
    {
        [JsonPropertyName("id")]
        public int Id { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; } = string.Empty;

        [JsonPropertyName("tilePath")]
        public string TilePath { get; set; } = string.Empty;

        [JsonPropertyName("splashPath")]
        public string SplashPath { get; set; } = string.Empty;

        [JsonPropertyName("rarityGemPath")]
        public string? RarityGemPath { get; set; }

        [JsonPropertyName("isLegacy")]
        public bool IsLegacy { get; set; }

        [JsonPropertyName("description")]
        public string? Description { get; set; }

        [JsonPropertyName("chromas")]
        public List<Chroma>? Chromas { get; set; }

        [JsonIgnore]
        public string TileImageUrl => Services.CdragonDataService.GetAssetUrl(TilePath);
        [JsonIgnore]
        public string SplashImageUrl => Services.CdragonDataService.GetAssetUrl(SplashPath);
        [JsonIgnore]
        public string? RarityImageUrl => RarityGemPath != null ? Services.CdragonDataService.GetAssetUrl(RarityGemPath) : null;
        [JsonIgnore]
        public string RarityName => GetRarityNameFromPath(RarityGemPath);

        [JsonIgnore]
        public int ChampionId => Id / 1000;

        [JsonIgnore]
        public bool HasChromas => Chromas?.Any() ?? false;

        public Skin() { }


        private static string GetRarityNameFromPath(string? path)
        {
            if (string.IsNullOrEmpty(path)) return "Standard";
            if (path.Contains("ultimate")) return "Ultimate";
            if (path.Contains("mythic")) return "Mythic";
            if (path.Contains("legendary")) return "Legendary";
            if (path.Contains("epic")) return "Epic";
            if (path.Contains("transcendent")) return "Transcendent";
            if (path.Contains("exalted")) return "Exalted";
            return "Unknown";
        }
    }
}
/// Models End of Skin.cs ///

/// Models Start of SupabaseDataModels.cs ///
﻿using System.Collections.Generic;
using System.Text.Json.Serialization;

namespace skinhunter.Models
{
    public class SupabaseChampionData
    {
        [JsonPropertyName("id")]
        public int Id { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; } = string.Empty;


        [JsonPropertyName("skins")]
        public List<SupabaseSkinData>? Skins { get; set; }
    }

    public class SupabaseSkinData
    {
        [JsonPropertyName("id")]
        public int Id { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; } = string.Empty;


        [JsonPropertyName("chromas")]
        public List<SupabaseChromaData>? Chromas { get; set; }
    }

    public class SupabaseChromaData
    {
        [JsonPropertyName("id")]
        public int Id { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; } = string.Empty;

        [JsonPropertyName("chromaPath")]
        public string ChromaPath { get; set; } = string.Empty;

        [JsonPropertyName("colors")]
        public List<string>? Colors { get; set; }
    }
}
/// Models End of SupabaseDataModels.cs ///

/// Helpers Start of EnumToBooleanConverter.cs ///
﻿using System.Globalization;
using System.Windows.Data;
using Wpf.Ui.Appearance;

namespace skinhunter.Helpers
{
    internal class EnumToBooleanConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (parameter is not String enumString)
            {
                throw new ArgumentException("ExceptionEnumToBooleanConverterParameterMustBeAnEnumName");
            }

            if (!Enum.IsDefined(typeof(ApplicationTheme), value))
            {
                throw new ArgumentException("ExceptionEnumToBooleanConverterValueMustBeAnEnum");
            }

            var enumValue = Enum.Parse(typeof(ApplicationTheme), enumString);

            return enumValue.Equals(value);
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (parameter is not String enumString)
            {
                throw new ArgumentException("ExceptionEnumToBooleanConverterParameterMustBeAnEnumName");
            }

            return Enum.Parse(typeof(ApplicationTheme), enumString);
        }
    }
}

/// Helpers End of EnumToBooleanConverter.cs ///

/// Converters Start of BooleanToVisibilityConverter.cs ///
﻿using System;
using System.Globalization;
using System.Windows;
using System.Windows.Data;

namespace skinhunter.Converters
{
    [ValueConversion(typeof(bool), typeof(Visibility))]
    public class BooleanToVisibilityConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            bool flag = false;
            if (value is bool b)
            {
                flag = b;
            }
            else if (value is bool?)
            {
                bool? nullable = (bool?)value;
                flag = nullable.HasValue && nullable.Value;
            }

            bool inverse = (parameter as string) == "Inverse";
            if (inverse)
            {
                flag = !flag;
            }

            return flag ? Visibility.Visible : Visibility.Collapsed;
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            bool inverse = (parameter as string) == "Inverse";
            bool flag = (value is Visibility visibility) && visibility == Visibility.Visible;

            if (inverse)
            {
                flag = !flag;
            }
            return flag;
        }
    }
}
/// Converters End of BooleanToVisibilityConverter.cs ///

/// Converters Start of ChromaToButtonTextConverter.cs ///
﻿using System;
using System.Globalization;
using System.Windows.Data;
using skinhunter.Models;

namespace skinhunter.Converters
{
    public class ChromaToButtonTextConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            return value is Chroma ? "Download Chroma" : "Download Skin";
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
    }
}
/// Converters End of ChromaToButtonTextConverter.cs ///

/// Converters Start of InverseBooleanToVisibilityConverter.cs ///
﻿using System;
using System.Globalization;
using System.Windows;
using System.Windows.Data;

namespace skinhunter.Converters
{
    [ValueConversion(typeof(bool), typeof(Visibility))]
    public class InverseBooleanToVisibilityConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            bool flag = false;
            if (value is bool b)
            {
                flag = b;
            }
            else if (value is bool?)
            {
                bool? nullable = (bool?)value;
                flag = nullable.HasValue && nullable.Value;
            }

            return !flag ? Visibility.Visible : Visibility.Collapsed;
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            return (value is Visibility visibility) && visibility != Visibility.Visible;
        }
    }
}
/// Converters End of InverseBooleanToVisibilityConverter.cs ///

/// Converters Start of ListToStringConverter.cs ///
﻿using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Windows.Data;

namespace skinhunter.Converters
{
    public class ListToStringConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (value is IEnumerable<string> list && list.Any())
            {
                return string.Join(", ", list.Select(r => r.Length > 0 ? char.ToUpper(r[0]) + r.Substring(1) : r));
            }
            return string.Empty;
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
    }
}
/// Converters End of ListToStringConverter.cs ///

/// Converters Start of NullOrEmptyToVisibilityConverter.cs ///
﻿using System;
using System.Collections;
using System.Globalization;
using System.Windows;
using System.Windows.Data;

namespace skinhunter.Converters
{
    [ValueConversion(typeof(object), typeof(Visibility))]
    public class NullOrEmptyToVisibilityConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            bool isNullOrEmpty;

            if (value == null)
            {
                isNullOrEmpty = true;
            }
            else if (value is string s)
            {
                isNullOrEmpty = string.IsNullOrEmpty(s);
            }
            else if (value is ICollection c)
            {
                isNullOrEmpty = c.Count == 0;
            }
            else
            {
                isNullOrEmpty = false;
            }

            bool collapseWhenNullOrEmpty = true;
            if (parameter is string paramString && bool.TryParse(paramString, out bool paramBool))
            {
                collapseWhenNullOrEmpty = paramBool;
            }
            else if (parameter is bool directBool)
            {
                collapseWhenNullOrEmpty = directBool;
            }


            if (collapseWhenNullOrEmpty)
            {
                return isNullOrEmpty ? Visibility.Collapsed : Visibility.Visible;
            }
            else
            {
                return isNullOrEmpty ? Visibility.Visible : Visibility.Collapsed;
            }
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
    }
}
/// Converters End of NullOrEmptyToVisibilityConverter.cs ///

/// Converters Start of NullToVisibilityConverter.cs ///
﻿using System;
using System.Globalization;
using System.Windows;
using System.Windows.Data;

namespace skinhunter.Converters
{
    [ValueConversion(typeof(object), typeof(Visibility))]
    public class NullToVisibilityConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            bool isNull = value == null;
            bool collapseWhenNull = true;

            if (parameter is string paramString && bool.TryParse(paramString, out bool paramBool))
            {
                collapseWhenNull = paramBool;
            }

            if (collapseWhenNull)
            {
                return isNull ? Visibility.Collapsed : Visibility.Visible;
            }
            else
            {
                return isNull ? Visibility.Visible : Visibility.Collapsed;
            }
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
    }
}
/// Converters End of NullToVisibilityConverter.cs ///

/// Converters Start of SkinIdToKhadaUrlConverter.cs ///
﻿using System;
using System.Globalization;
using System.Windows.Data;

namespace skinhunter.Converters
{
    public class SkinIdToKhadaUrlConverter : IValueConverter
    {
        private const string BaseKhadaUrl = "https://modelviewer.lol/model-viewer?id=";

        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (value is int skinId && skinId > 0)
            {
                string url = $"{BaseKhadaUrl}{skinId}";
                if (parameter is int chromaId && chromaId > 0 && chromaId / 1000 == skinId)
                {
                    url += $"&chroma={chromaId}";
                }
                return url;
            }
            return BaseKhadaUrl;
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
    }
}
/// Converters End of SkinIdToKhadaUrlConverter.cs ///

