/// shlauncher Start of Usings.cs ///
﻿global using System;
global using System.Windows;
global using CommunityToolkit.Mvvm.ComponentModel;
global using CommunityToolkit.Mvvm.Input;

/// shlauncher End of Usings.cs ///

/// shlauncher Start of App.xaml ///
﻿<Application
    x:Class="shlauncher.App"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:ui="http://schemas.lepo.co/wpfui/2022/xaml"
    DispatcherUnhandledException="OnDispatcherUnhandledException"
    Exit="OnExit"
    Startup="OnStartup">
    <Application.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ui:ThemesDictionary Theme="Light" />
                <ui:ControlsDictionary />
            </ResourceDictionary.MergedDictionaries>
        </ResourceDictionary>
    </Application.Resources>
</Application>

/// shlauncher End of App.xaml ///

/// shlauncher Start of App.xaml.cs ///
﻿using System.IO;
using System.Reflection;
using System.Windows.Threading;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using shlauncher.Services;
using shlauncher.ViewModels.Pages;
using shlauncher.ViewModels.Windows;
using shlauncher.Views.Pages;
using shlauncher.Views.Windows;
using Wpf.Ui;
using Wpf.Ui.DependencyInjection;

namespace shlauncher
{
    /// <summary>
    /// Interaction logic for App.xaml
    /// </summary>
    public partial class App
    {
        // The.NET Generic Host provides dependency injection, configuration, logging, and other services.
        // https://docs.microsoft.com/dotnet/core/extensions/generic-host
        // https://docs.microsoft.com/dotnet/core/extensions/dependency-injection
        // https://docs.microsoft.com/dotnet/core/extensions/configuration
        // https://docs.microsoft.com/dotnet/core/extensions/logging
        private static readonly IHost _host = Host
            .CreateDefaultBuilder()
            .ConfigureAppConfiguration(c => { c.SetBasePath(Path.GetDirectoryName(AppContext.BaseDirectory)); })
            .ConfigureServices((context, services) =>
            {
                services.AddNavigationViewPageProvider();

                services.AddHostedService<ApplicationHostService>();

                // Theme manipulation
                services.AddSingleton<IThemeService, ThemeService>();

                // TaskBar manipulation
                services.AddSingleton<ITaskBarService, TaskBarService>();

                // Service containing navigation, same as INavigationWindow... but without window
                services.AddSingleton<INavigationService, NavigationService>();

                // Main window with navigation
                services.AddSingleton<INavigationWindow, MainWindow>();
                services.AddSingleton<MainWindowViewModel>();

                services.AddSingleton<DashboardPage>();
                services.AddSingleton<DashboardViewModel>();
                services.AddSingleton<DataPage>();
                services.AddSingleton<DataViewModel>();
                services.AddSingleton<SettingsPage>();
                services.AddSingleton<SettingsViewModel>();
            }).Build();

        /// <summary>
        /// Gets services.
        /// </summary>
        public static IServiceProvider Services
        {
            get { return _host.Services; }
        }

        /// <summary>
        /// Occurs when the application is loading.
        /// </summary>
        private async void OnStartup(object sender, StartupEventArgs e)
        {
            await _host.StartAsync();
        }

        /// <summary>
        /// Occurs when the application is closing.
        /// </summary>
        private async void OnExit(object sender, ExitEventArgs e)
        {
            await _host.StopAsync();

            _host.Dispose();
        }

        /// <summary>
        /// Occurs when an exception is thrown by an application but not handled.
        /// </summary>
        private void OnDispatcherUnhandledException(object sender, DispatcherUnhandledExceptionEventArgs e)
        {
            // For more info see https://docs.microsoft.com/en-us/dotnet/api/system.windows.application.dispatcherunhandledexception?view=windowsdesktop-6.0
        }
    }
}

/// shlauncher End of App.xaml.cs ///

/// shlauncher Start of AssemblyInfo.cs ///
using System.Windows;

[assembly: ThemeInfo(
    ResourceDictionaryLocation.None, //where theme specific resource dictionaries are located
                                     //(used if a resource is not found in the page,
                                     // or application resource dictionaries)
    ResourceDictionaryLocation.SourceAssembly //where the generic resource dictionary is located
//(used if a resource is not found in the page,
// app, or any theme specific resource dictionaries)
)]

/// shlauncher End of AssemblyInfo.cs ///

/// shlauncher Start of shlauncher.csproj ///
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <OutputType>WinExe</OutputType>
    <TargetFramework>net9.0-windows</TargetFramework>
    <ApplicationManifest>app.manifest</ApplicationManifest>
    <ApplicationIcon>wpfui-icon.ico</ApplicationIcon>
    <UseWPF>true</UseWPF>
    <Nullable>enable</Nullable>
    <ImplicitUsings>enable</ImplicitUsings>
  </PropertyGroup>

  <ItemGroup>
    <Content Include="wpfui-icon.ico" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="WPF-UI" Version="4.0.2" />
    <PackageReference Include="WPF-UI.DependencyInjection" Version="4.0.2" />
    <PackageReference Include="Microsoft.Extensions.Hosting" Version="9.0.1" />
    <PackageReference Include="CommunityToolkit.Mvvm" Version="8.4.0 "/>
  </ItemGroup>

  <ItemGroup>
    <None Remove="Assets\wpfui-icon-256.png" />
    <None Remove="Assets\wpfui-icon-1024.png" />
  </ItemGroup>

  <ItemGroup>
    <Resource Include="Assets\wpfui-icon-256.png" />
    <Resource Include="Assets\wpfui-icon-1024.png" />
  </ItemGroup>

</Project>

/// shlauncher End of shlauncher.csproj ///

/// shlauncher Start of shlauncher.sln ///
﻿
Microsoft Visual Studio Solution File, Format Version 12.00
# Visual Studio Version 17
VisualStudioVersion = 17.13.35931.197 d17.13
MinimumVisualStudioVersion = 10.0.40219.1
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "shlauncher", "shlauncher.csproj", "{52A3C67A-F474-4999-A569-9D6BE06F136D}"
EndProject
Global
	GlobalSection(SolutionConfigurationPlatforms) = preSolution
		Debug|Any CPU = Debug|Any CPU
		Release|Any CPU = Release|Any CPU
	EndGlobalSection
	GlobalSection(ProjectConfigurationPlatforms) = postSolution
		{52A3C67A-F474-4999-A569-9D6BE06F136D}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{52A3C67A-F474-4999-A569-9D6BE06F136D}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{52A3C67A-F474-4999-A569-9D6BE06F136D}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{52A3C67A-F474-4999-A569-9D6BE06F136D}.Release|Any CPU.Build.0 = Release|Any CPU
	EndGlobalSection
	GlobalSection(SolutionProperties) = preSolution
		HideSolutionNode = FALSE
	EndGlobalSection
	GlobalSection(ExtensibilityGlobals) = postSolution
		SolutionGuid = {08173B31-59AF-4D44-AFF8-CD187C0CF285}
	EndGlobalSection
EndGlobal

/// shlauncher End of shlauncher.sln ///

/// Pages Start of DashboardPage.xaml ///
﻿<Page
    x:Class="shlauncher.Views.Pages.DashboardPage"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:local="clr-namespace:shlauncher.Views.Pages"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:ui="http://schemas.lepo.co/wpfui/2022/xaml"
    Title="DashboardPage"
    d:DataContext="{d:DesignInstance local:DashboardPage,
                                     IsDesignTimeCreatable=False}"
    d:DesignHeight="450"
    d:DesignWidth="800"
    ui:Design.Background="{DynamicResource ApplicationBackgroundBrush}"
    ui:Design.Foreground="{DynamicResource TextFillColorPrimaryBrush}"
    Foreground="{DynamicResource TextFillColorPrimaryBrush}"
    mc:Ignorable="d">

    <Grid VerticalAlignment="Top">
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="Auto" />
            <ColumnDefinition Width="Auto" />
        </Grid.ColumnDefinitions>

        <ui:Button
            Grid.Column="0"
            Command="{Binding ViewModel.CounterIncrementCommand, Mode=OneWay}"
            Content="Click me!"
            Icon="Fluent24" />
        <TextBlock
            Grid.Column="1"
            Margin="12,0,0,0"
            VerticalAlignment="Center"
            Text="{Binding ViewModel.Counter, Mode=OneWay}" />
    </Grid>
</Page>

/// Pages End of DashboardPage.xaml ///

/// Pages Start of DashboardPage.xaml.cs ///
﻿using shlauncher.ViewModels.Pages;
using Wpf.Ui.Abstractions.Controls;

namespace shlauncher.Views.Pages
{
    public partial class DashboardPage : INavigableView<DashboardViewModel>
    {
        public DashboardViewModel ViewModel { get; }

        public DashboardPage(DashboardViewModel viewModel)
        {
            ViewModel = viewModel;
            DataContext = this;

            InitializeComponent();
        }
    }
}

/// Pages End of DashboardPage.xaml.cs ///

/// Pages Start of DataPage.xaml ///
<Page
    x:Class="shlauncher.Views.Pages.DataPage"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:local="clr-namespace:shlauncher.Views.Pages"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:models="clr-namespace:shlauncher.Models"
    xmlns:ui="http://schemas.lepo.co/wpfui/2022/xaml"
    Title="DataPage"
    d:DataContext="{d:DesignInstance local:DataPage,
                                     IsDesignTimeCreatable=False}"
    d:DesignHeight="450"
    d:DesignWidth="800"
    ui:Design.Background="{DynamicResource ApplicationBackgroundBrush}"
    ui:Design.Foreground="{DynamicResource TextFillColorPrimaryBrush}"
    Foreground="{DynamicResource TextFillColorPrimaryBrush}"
    ScrollViewer.CanContentScroll="False"
    mc:Ignorable="d">

    <Grid>
        <ui:VirtualizingItemsControl
            Foreground="{DynamicResource TextFillColorSecondaryBrush}"
            ItemsSource="{Binding ViewModel.Colors, Mode=OneWay}"
            VirtualizingPanel.CacheLengthUnit="Item">
            <ItemsControl.ItemTemplate>
                <DataTemplate DataType="{x:Type models:DataColor}">
                    <ui:Button
                        Width="80"
                        Height="80"
                        Margin="2"
                        Padding="0"
                        HorizontalAlignment="Stretch"
                        VerticalAlignment="Stretch"
                        Appearance="Secondary"
                        Background="{Binding Color, Mode=OneWay}"
                        FontSize="25"
                        Icon="Fluent24" />
                </DataTemplate>
            </ItemsControl.ItemTemplate>
        </ui:VirtualizingItemsControl>
    </Grid>
</Page>

/// Pages End of DataPage.xaml ///

/// Pages Start of DataPage.xaml.cs ///
﻿using shlauncher.ViewModels.Pages;
using Wpf.Ui.Abstractions.Controls;

namespace shlauncher.Views.Pages
{
    public partial class DataPage : INavigableView<DataViewModel>
    {
        public DataViewModel ViewModel { get; }

        public DataPage(DataViewModel viewModel)
        {
            ViewModel = viewModel;
            DataContext = this;

            InitializeComponent();
        }
    }
}

/// Pages End of DataPage.xaml.cs ///

/// Pages Start of SettingsPage.xaml ///
﻿<Page
    x:Class="shlauncher.Views.Pages.SettingsPage"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:helpers="clr-namespace:shlauncher.Helpers"
    xmlns:local="clr-namespace:shlauncher.Views.Pages"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:ui="http://schemas.lepo.co/wpfui/2022/xaml"
    Title="SettingsPage"
    d:DataContext="{d:DesignInstance local:SettingsPage,
                                     IsDesignTimeCreatable=False}"
    d:DesignHeight="450"
    d:DesignWidth="800"
    ui:Design.Background="{DynamicResource ApplicationBackgroundBrush}"
    ui:Design.Foreground="{DynamicResource TextFillColorPrimaryBrush}"
    Foreground="{DynamicResource TextFillColorPrimaryBrush}"
    mc:Ignorable="d">
    <Page.Resources>
        <helpers:EnumToBooleanConverter x:Key="EnumToBooleanConverter" />
    </Page.Resources>

    <StackPanel>
        <TextBlock
            FontSize="20"
            FontWeight="Medium"
            Text="Personalization" />
        <TextBlock Margin="0,12,0,0" Text="Theme" />
        <RadioButton
            Margin="0,12,0,0"
            Command="{Binding ViewModel.ChangeThemeCommand, Mode=OneWay}"
            CommandParameter="theme_light"
            Content="Light"
            GroupName="themeSelect"
            IsChecked="{Binding ViewModel.CurrentTheme, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter=Light, Mode=OneWay}" />
        <RadioButton
            Margin="0,8,0,0"
            Command="{Binding ViewModel.ChangeThemeCommand, Mode=OneWay}"
            CommandParameter="theme_dark"
            Content="Dark"
            GroupName="themeSelect"
            IsChecked="{Binding ViewModel.CurrentTheme, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter=Dark, Mode=OneWay}" />

        <TextBlock
            Margin="0,24,0,0"
            FontSize="20"
            FontWeight="Medium"
            Text="About shlauncher" />
        <TextBlock Margin="0,12,0,0" Text="{Binding ViewModel.AppVersion, Mode=OneWay}" />
    </StackPanel>
</Page>

/// Pages End of SettingsPage.xaml ///

/// Pages Start of SettingsPage.xaml.cs ///
﻿using shlauncher.ViewModels.Pages;
using Wpf.Ui.Abstractions.Controls;

namespace shlauncher.Views.Pages
{
    public partial class SettingsPage : INavigableView<SettingsViewModel>
    {
        public SettingsViewModel ViewModel { get; }

        public SettingsPage(SettingsViewModel viewModel)
        {
            ViewModel = viewModel;
            DataContext = this;

            InitializeComponent();
        }
    }
}

/// Pages End of SettingsPage.xaml.cs ///

/// Windows Start of MainWindow.xaml ///
﻿<ui:FluentWindow
    x:Class="shlauncher.Views.Windows.MainWindow"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:local="clr-namespace:shlauncher.Views.Windows"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:ui="http://schemas.lepo.co/wpfui/2022/xaml"
    Title="{Binding ViewModel.ApplicationTitle, Mode=OneWay}"
    Width="1100"
    Height="650"
    d:DataContext="{d:DesignInstance local:MainWindow,
                                     IsDesignTimeCreatable=True}"
    d:DesignHeight="450"
    d:DesignWidth="800"
    ui:Design.Background="{DynamicResource ApplicationBackgroundBrush}"
    ui:Design.Foreground="{DynamicResource TextFillColorPrimaryBrush}"
    ExtendsContentIntoTitleBar="True"
    Foreground="{DynamicResource TextFillColorPrimaryBrush}"
    WindowBackdropType="Mica"
    WindowCornerPreference="Round"
    WindowStartupLocation="CenterScreen"
    mc:Ignorable="d">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
        </Grid.RowDefinitions>
        <ui:NavigationView
            x:Name="RootNavigation"
            Grid.Row="1"
            Padding="42,0,42,0"
            BreadcrumbBar="{Binding ElementName=BreadcrumbBar}"
            FooterMenuItemsSource="{Binding ViewModel.FooterMenuItems, Mode=OneWay}"
            FrameMargin="0"
            IsBackButtonVisible="Visible"
            IsPaneToggleVisible="True"
            MenuItemsSource="{Binding ViewModel.MenuItems, Mode=OneWay}"
            PaneDisplayMode="LeftFluent">
            <ui:NavigationView.Header>
                <ui:BreadcrumbBar x:Name="BreadcrumbBar" Margin="42,32,42,20" />
            </ui:NavigationView.Header>
            <ui:NavigationView.ContentOverlay>
                <Grid>
                    <ui:SnackbarPresenter x:Name="SnackbarPresenter" />
                </Grid>
            </ui:NavigationView.ContentOverlay>
        </ui:NavigationView>

        <ContentPresenter
            x:Name="RootContentDialog"
            Grid.Row="0"
            Grid.RowSpan="2" />

        <ui:TitleBar
            x:Name="TitleBar"
            Title="{Binding ViewModel.ApplicationTitle}"
            Grid.Row="0"
            CloseWindowByDoubleClickOnIcon="True">
            <ui:TitleBar.Icon>
                <ui:ImageIcon Source="pack://application:,,,/Assets/wpfui-icon-256.png" />
            </ui:TitleBar.Icon>
        </ui:TitleBar>
    </Grid>
</ui:FluentWindow>

/// Windows End of MainWindow.xaml ///

/// Windows Start of MainWindow.xaml.cs ///
﻿using shlauncher.ViewModels.Windows;
using Wpf.Ui;
using Wpf.Ui.Abstractions;
using Wpf.Ui.Appearance;
using Wpf.Ui.Controls;

namespace shlauncher.Views.Windows
{
    public partial class MainWindow : INavigationWindow
    {
        public MainWindowViewModel ViewModel { get; }

        public MainWindow(
            MainWindowViewModel viewModel,
            INavigationViewPageProvider navigationViewPageProvider,
            INavigationService navigationService
        )
        {
            ViewModel = viewModel;
            DataContext = this;

            SystemThemeWatcher.Watch(this);

            InitializeComponent();
            SetPageService(navigationViewPageProvider);

            navigationService.SetNavigationControl(RootNavigation);
        }

        #region INavigationWindow methods

        public INavigationView GetNavigation() => RootNavigation;

        public bool Navigate(Type pageType) => RootNavigation.Navigate(pageType);

        public void SetPageService(INavigationViewPageProvider navigationViewPageProvider) => RootNavigation.SetPageProviderService(navigationViewPageProvider);

        public void ShowWindow() => Show();

        public void CloseWindow() => Close();

        #endregion INavigationWindow methods

        /// <summary>
        /// Raises the closed event.
        /// </summary>
        protected override void OnClosed(EventArgs e)
        {
            base.OnClosed(e);

            // Make sure that closing this window will begin the process of closing the application.
            Application.Current.Shutdown();
        }

        INavigationView INavigationWindow.GetNavigation()
        {
            throw new NotImplementedException();
        }

        public void SetServiceProvider(IServiceProvider serviceProvider)
        {
            throw new NotImplementedException();
        }
    }
}

/// Windows End of MainWindow.xaml.cs ///

/// Windows Start of MainWindow.xaml ///
﻿<ui:FluentWindow
    x:Class="shlauncher.Views.Windows.MainWindow"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:local="clr-namespace:shlauncher.Views.Windows"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:ui="http://schemas.lepo.co/wpfui/2022/xaml"
    Title="{Binding ViewModel.ApplicationTitle, Mode=OneWay}"
    Width="1100"
    Height="650"
    d:DataContext="{d:DesignInstance local:MainWindow,
                                     IsDesignTimeCreatable=True}"
    d:DesignHeight="450"
    d:DesignWidth="800"
    ui:Design.Background="{DynamicResource ApplicationBackgroundBrush}"
    ui:Design.Foreground="{DynamicResource TextFillColorPrimaryBrush}"
    ExtendsContentIntoTitleBar="True"
    Foreground="{DynamicResource TextFillColorPrimaryBrush}"
    WindowBackdropType="Mica"
    WindowCornerPreference="Round"
    WindowStartupLocation="CenterScreen"
    mc:Ignorable="d">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
        </Grid.RowDefinitions>
        <ui:NavigationView
            x:Name="RootNavigation"
            Grid.Row="1"
            Padding="42,0,42,0"
            BreadcrumbBar="{Binding ElementName=BreadcrumbBar}"
            FooterMenuItemsSource="{Binding ViewModel.FooterMenuItems, Mode=OneWay}"
            FrameMargin="0"
            IsBackButtonVisible="Visible"
            IsPaneToggleVisible="True"
            MenuItemsSource="{Binding ViewModel.MenuItems, Mode=OneWay}"
            PaneDisplayMode="LeftFluent">
            <ui:NavigationView.Header>
                <ui:BreadcrumbBar x:Name="BreadcrumbBar" Margin="42,32,42,20" />
            </ui:NavigationView.Header>
            <ui:NavigationView.ContentOverlay>
                <Grid>
                    <ui:SnackbarPresenter x:Name="SnackbarPresenter" />
                </Grid>
            </ui:NavigationView.ContentOverlay>
        </ui:NavigationView>

        <ContentPresenter
            x:Name="RootContentDialog"
            Grid.Row="0"
            Grid.RowSpan="2" />

        <ui:TitleBar
            x:Name="TitleBar"
            Title="{Binding ViewModel.ApplicationTitle}"
            Grid.Row="0"
            CloseWindowByDoubleClickOnIcon="True">
            <ui:TitleBar.Icon>
                <ui:ImageIcon Source="pack://application:,,,/Assets/wpfui-icon-256.png" />
            </ui:TitleBar.Icon>
        </ui:TitleBar>
    </Grid>
</ui:FluentWindow>

/// Windows End of MainWindow.xaml ///

/// Windows Start of MainWindow.xaml.cs ///
﻿using shlauncher.ViewModels.Windows;
using Wpf.Ui;
using Wpf.Ui.Abstractions;
using Wpf.Ui.Appearance;
using Wpf.Ui.Controls;

namespace shlauncher.Views.Windows
{
    public partial class MainWindow : INavigationWindow
    {
        public MainWindowViewModel ViewModel { get; }

        public MainWindow(
            MainWindowViewModel viewModel,
            INavigationViewPageProvider navigationViewPageProvider,
            INavigationService navigationService
        )
        {
            ViewModel = viewModel;
            DataContext = this;

            SystemThemeWatcher.Watch(this);

            InitializeComponent();
            SetPageService(navigationViewPageProvider);

            navigationService.SetNavigationControl(RootNavigation);
        }

        #region INavigationWindow methods

        public INavigationView GetNavigation() => RootNavigation;

        public bool Navigate(Type pageType) => RootNavigation.Navigate(pageType);

        public void SetPageService(INavigationViewPageProvider navigationViewPageProvider) => RootNavigation.SetPageProviderService(navigationViewPageProvider);

        public void ShowWindow() => Show();

        public void CloseWindow() => Close();

        #endregion INavigationWindow methods

        /// <summary>
        /// Raises the closed event.
        /// </summary>
        protected override void OnClosed(EventArgs e)
        {
            base.OnClosed(e);

            // Make sure that closing this window will begin the process of closing the application.
            Application.Current.Shutdown();
        }

        INavigationView INavigationWindow.GetNavigation()
        {
            throw new NotImplementedException();
        }

        public void SetServiceProvider(IServiceProvider serviceProvider)
        {
            throw new NotImplementedException();
        }
    }
}

/// Windows End of MainWindow.xaml.cs ///

/// Pages Start of DashboardPage.xaml ///
﻿<Page
    x:Class="shlauncher.Views.Pages.DashboardPage"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:local="clr-namespace:shlauncher.Views.Pages"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:ui="http://schemas.lepo.co/wpfui/2022/xaml"
    Title="DashboardPage"
    d:DataContext="{d:DesignInstance local:DashboardPage,
                                     IsDesignTimeCreatable=False}"
    d:DesignHeight="450"
    d:DesignWidth="800"
    ui:Design.Background="{DynamicResource ApplicationBackgroundBrush}"
    ui:Design.Foreground="{DynamicResource TextFillColorPrimaryBrush}"
    Foreground="{DynamicResource TextFillColorPrimaryBrush}"
    mc:Ignorable="d">

    <Grid VerticalAlignment="Top">
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="Auto" />
            <ColumnDefinition Width="Auto" />
        </Grid.ColumnDefinitions>

        <ui:Button
            Grid.Column="0"
            Command="{Binding ViewModel.CounterIncrementCommand, Mode=OneWay}"
            Content="Click me!"
            Icon="Fluent24" />
        <TextBlock
            Grid.Column="1"
            Margin="12,0,0,0"
            VerticalAlignment="Center"
            Text="{Binding ViewModel.Counter, Mode=OneWay}" />
    </Grid>
</Page>

/// Pages End of DashboardPage.xaml ///

/// Pages Start of DashboardPage.xaml.cs ///
﻿using shlauncher.ViewModels.Pages;
using Wpf.Ui.Abstractions.Controls;

namespace shlauncher.Views.Pages
{
    public partial class DashboardPage : INavigableView<DashboardViewModel>
    {
        public DashboardViewModel ViewModel { get; }

        public DashboardPage(DashboardViewModel viewModel)
        {
            ViewModel = viewModel;
            DataContext = this;

            InitializeComponent();
        }
    }
}

/// Pages End of DashboardPage.xaml.cs ///

/// Pages Start of DataPage.xaml ///
<Page
    x:Class="shlauncher.Views.Pages.DataPage"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:local="clr-namespace:shlauncher.Views.Pages"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:models="clr-namespace:shlauncher.Models"
    xmlns:ui="http://schemas.lepo.co/wpfui/2022/xaml"
    Title="DataPage"
    d:DataContext="{d:DesignInstance local:DataPage,
                                     IsDesignTimeCreatable=False}"
    d:DesignHeight="450"
    d:DesignWidth="800"
    ui:Design.Background="{DynamicResource ApplicationBackgroundBrush}"
    ui:Design.Foreground="{DynamicResource TextFillColorPrimaryBrush}"
    Foreground="{DynamicResource TextFillColorPrimaryBrush}"
    ScrollViewer.CanContentScroll="False"
    mc:Ignorable="d">

    <Grid>
        <ui:VirtualizingItemsControl
            Foreground="{DynamicResource TextFillColorSecondaryBrush}"
            ItemsSource="{Binding ViewModel.Colors, Mode=OneWay}"
            VirtualizingPanel.CacheLengthUnit="Item">
            <ItemsControl.ItemTemplate>
                <DataTemplate DataType="{x:Type models:DataColor}">
                    <ui:Button
                        Width="80"
                        Height="80"
                        Margin="2"
                        Padding="0"
                        HorizontalAlignment="Stretch"
                        VerticalAlignment="Stretch"
                        Appearance="Secondary"
                        Background="{Binding Color, Mode=OneWay}"
                        FontSize="25"
                        Icon="Fluent24" />
                </DataTemplate>
            </ItemsControl.ItemTemplate>
        </ui:VirtualizingItemsControl>
    </Grid>
</Page>

/// Pages End of DataPage.xaml ///

/// Pages Start of DataPage.xaml.cs ///
﻿using shlauncher.ViewModels.Pages;
using Wpf.Ui.Abstractions.Controls;

namespace shlauncher.Views.Pages
{
    public partial class DataPage : INavigableView<DataViewModel>
    {
        public DataViewModel ViewModel { get; }

        public DataPage(DataViewModel viewModel)
        {
            ViewModel = viewModel;
            DataContext = this;

            InitializeComponent();
        }
    }
}

/// Pages End of DataPage.xaml.cs ///

/// Pages Start of SettingsPage.xaml ///
﻿<Page
    x:Class="shlauncher.Views.Pages.SettingsPage"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:helpers="clr-namespace:shlauncher.Helpers"
    xmlns:local="clr-namespace:shlauncher.Views.Pages"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:ui="http://schemas.lepo.co/wpfui/2022/xaml"
    Title="SettingsPage"
    d:DataContext="{d:DesignInstance local:SettingsPage,
                                     IsDesignTimeCreatable=False}"
    d:DesignHeight="450"
    d:DesignWidth="800"
    ui:Design.Background="{DynamicResource ApplicationBackgroundBrush}"
    ui:Design.Foreground="{DynamicResource TextFillColorPrimaryBrush}"
    Foreground="{DynamicResource TextFillColorPrimaryBrush}"
    mc:Ignorable="d">
    <Page.Resources>
        <helpers:EnumToBooleanConverter x:Key="EnumToBooleanConverter" />
    </Page.Resources>

    <StackPanel>
        <TextBlock
            FontSize="20"
            FontWeight="Medium"
            Text="Personalization" />
        <TextBlock Margin="0,12,0,0" Text="Theme" />
        <RadioButton
            Margin="0,12,0,0"
            Command="{Binding ViewModel.ChangeThemeCommand, Mode=OneWay}"
            CommandParameter="theme_light"
            Content="Light"
            GroupName="themeSelect"
            IsChecked="{Binding ViewModel.CurrentTheme, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter=Light, Mode=OneWay}" />
        <RadioButton
            Margin="0,8,0,0"
            Command="{Binding ViewModel.ChangeThemeCommand, Mode=OneWay}"
            CommandParameter="theme_dark"
            Content="Dark"
            GroupName="themeSelect"
            IsChecked="{Binding ViewModel.CurrentTheme, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter=Dark, Mode=OneWay}" />

        <TextBlock
            Margin="0,24,0,0"
            FontSize="20"
            FontWeight="Medium"
            Text="About shlauncher" />
        <TextBlock Margin="0,12,0,0" Text="{Binding ViewModel.AppVersion, Mode=OneWay}" />
    </StackPanel>
</Page>

/// Pages End of SettingsPage.xaml ///

/// Pages Start of SettingsPage.xaml.cs ///
﻿using shlauncher.ViewModels.Pages;
using Wpf.Ui.Abstractions.Controls;

namespace shlauncher.Views.Pages
{
    public partial class SettingsPage : INavigableView<SettingsViewModel>
    {
        public SettingsViewModel ViewModel { get; }

        public SettingsPage(SettingsViewModel viewModel)
        {
            ViewModel = viewModel;
            DataContext = this;

            InitializeComponent();
        }
    }
}

/// Pages End of SettingsPage.xaml.cs ///

/// Pages Start of DashboardViewModel.cs ///
﻿namespace shlauncher.ViewModels.Pages
{
    public partial class DashboardViewModel : ObservableObject
    {
        [ObservableProperty]
        private int _counter = 0;

        [RelayCommand]
        private void OnCounterIncrement()
        {
            Counter++;
        }
    }
}

/// Pages End of DashboardViewModel.cs ///

/// Pages Start of DataViewModel.cs ///
﻿using System.Windows.Media;
using shlauncher.Models;
using Wpf.Ui.Abstractions.Controls;

namespace shlauncher.ViewModels.Pages
{
    public partial class DataViewModel : ObservableObject, INavigationAware
    {
        private bool _isInitialized = false;

        [ObservableProperty]
        private IEnumerable<DataColor> _colors;

        public Task OnNavigatedToAsync()
        {
            if (!_isInitialized)
                InitializeViewModel();

            return Task.CompletedTask;
        }

        public Task OnNavigatedFromAsync() => Task.CompletedTask;

        private void InitializeViewModel()
        {
            var random = new Random();
            var colorCollection = new List<DataColor>();

            for (int i = 0; i < 8192; i++)
                colorCollection.Add(
                    new DataColor
                    {
                        Color = new SolidColorBrush(
                            Color.FromArgb(
                                (byte)200,
                                (byte)random.Next(0, 250),
                                (byte)random.Next(0, 250),
                                (byte)random.Next(0, 250)
                            )
                        )
                    }
                );

            Colors = colorCollection;

            _isInitialized = true;
        }
    }
}

/// Pages End of DataViewModel.cs ///

/// Pages Start of SettingsViewModel.cs ///
﻿using Wpf.Ui.Abstractions.Controls;
using Wpf.Ui.Appearance;

namespace shlauncher.ViewModels.Pages
{
    public partial class SettingsViewModel : ObservableObject, INavigationAware
    {
        private bool _isInitialized = false;

        [ObservableProperty]
        private string _appVersion = String.Empty;

        [ObservableProperty]
        private ApplicationTheme _currentTheme = ApplicationTheme.Unknown;

        public Task OnNavigatedToAsync()
        {
            if (!_isInitialized)
                InitializeViewModel();

            return Task.CompletedTask;
        }

        public Task OnNavigatedFromAsync() => Task.CompletedTask;

        private void InitializeViewModel()
        {
            CurrentTheme = ApplicationThemeManager.GetAppTheme();
            AppVersion = $"UiDesktopApp1 - {GetAssemblyVersion()}";

            _isInitialized = true;
        }

        private string GetAssemblyVersion()
        {
            return System.Reflection.Assembly.GetExecutingAssembly().GetName().Version?.ToString()
                ?? String.Empty;
        }

        [RelayCommand]
        private void OnChangeTheme(string parameter)
        {
            switch (parameter)
            {
                case "theme_light":
                    if (CurrentTheme == ApplicationTheme.Light)
                        break;

                    ApplicationThemeManager.Apply(ApplicationTheme.Light);
                    CurrentTheme = ApplicationTheme.Light;

                    break;

                default:
                    if (CurrentTheme == ApplicationTheme.Dark)
                        break;

                    ApplicationThemeManager.Apply(ApplicationTheme.Dark);
                    CurrentTheme = ApplicationTheme.Dark;

                    break;
            }
        }
    }
}

/// Pages End of SettingsViewModel.cs ///

/// Windows Start of MainWindowViewModel.cs ///
﻿using System.Collections.ObjectModel;
using Wpf.Ui.Controls;

namespace shlauncher.ViewModels.Windows
{
    public partial class MainWindowViewModel : ObservableObject
    {
        [ObservableProperty]
        private string _applicationTitle = "WPF UI - shlauncher";

        [ObservableProperty]
        private ObservableCollection<object> _menuItems = new()
        {
            new NavigationViewItem()
            {
                Content = "Home",
                Icon = new SymbolIcon { Symbol = SymbolRegular.Home24 },
                TargetPageType = typeof(Views.Pages.DashboardPage)
            },
            new NavigationViewItem()
            {
                Content = "Data",
                Icon = new SymbolIcon { Symbol = SymbolRegular.DataHistogram24 },
                TargetPageType = typeof(Views.Pages.DataPage)
            }
        };

        [ObservableProperty]
        private ObservableCollection<object> _footerMenuItems = new()
        {
            new NavigationViewItem()
            {
                Content = "Settings",
                Icon = new SymbolIcon { Symbol = SymbolRegular.Settings24 },
                TargetPageType = typeof(Views.Pages.SettingsPage)
            }
        };

        [ObservableProperty]
        private ObservableCollection<MenuItem> _trayMenuItems = new()
        {
            new MenuItem { Header = "Home", Tag = "tray_home" }
        };
    }
}

/// Windows End of MainWindowViewModel.cs ///

/// Windows Start of MainWindowViewModel.cs ///
﻿using System.Collections.ObjectModel;
using Wpf.Ui.Controls;

namespace shlauncher.ViewModels.Windows
{
    public partial class MainWindowViewModel : ObservableObject
    {
        [ObservableProperty]
        private string _applicationTitle = "WPF UI - shlauncher";

        [ObservableProperty]
        private ObservableCollection<object> _menuItems = new()
        {
            new NavigationViewItem()
            {
                Content = "Home",
                Icon = new SymbolIcon { Symbol = SymbolRegular.Home24 },
                TargetPageType = typeof(Views.Pages.DashboardPage)
            },
            new NavigationViewItem()
            {
                Content = "Data",
                Icon = new SymbolIcon { Symbol = SymbolRegular.DataHistogram24 },
                TargetPageType = typeof(Views.Pages.DataPage)
            }
        };

        [ObservableProperty]
        private ObservableCollection<object> _footerMenuItems = new()
        {
            new NavigationViewItem()
            {
                Content = "Settings",
                Icon = new SymbolIcon { Symbol = SymbolRegular.Settings24 },
                TargetPageType = typeof(Views.Pages.SettingsPage)
            }
        };

        [ObservableProperty]
        private ObservableCollection<MenuItem> _trayMenuItems = new()
        {
            new MenuItem { Header = "Home", Tag = "tray_home" }
        };
    }
}

/// Windows End of MainWindowViewModel.cs ///

/// Pages Start of DashboardViewModel.cs ///
﻿namespace shlauncher.ViewModels.Pages
{
    public partial class DashboardViewModel : ObservableObject
    {
        [ObservableProperty]
        private int _counter = 0;

        [RelayCommand]
        private void OnCounterIncrement()
        {
            Counter++;
        }
    }
}

/// Pages End of DashboardViewModel.cs ///

/// Pages Start of DataViewModel.cs ///
﻿using System.Windows.Media;
using shlauncher.Models;
using Wpf.Ui.Abstractions.Controls;

namespace shlauncher.ViewModels.Pages
{
    public partial class DataViewModel : ObservableObject, INavigationAware
    {
        private bool _isInitialized = false;

        [ObservableProperty]
        private IEnumerable<DataColor> _colors;

        public Task OnNavigatedToAsync()
        {
            if (!_isInitialized)
                InitializeViewModel();

            return Task.CompletedTask;
        }

        public Task OnNavigatedFromAsync() => Task.CompletedTask;

        private void InitializeViewModel()
        {
            var random = new Random();
            var colorCollection = new List<DataColor>();

            for (int i = 0; i < 8192; i++)
                colorCollection.Add(
                    new DataColor
                    {
                        Color = new SolidColorBrush(
                            Color.FromArgb(
                                (byte)200,
                                (byte)random.Next(0, 250),
                                (byte)random.Next(0, 250),
                                (byte)random.Next(0, 250)
                            )
                        )
                    }
                );

            Colors = colorCollection;

            _isInitialized = true;
        }
    }
}

/// Pages End of DataViewModel.cs ///

/// Pages Start of SettingsViewModel.cs ///
﻿using Wpf.Ui.Abstractions.Controls;
using Wpf.Ui.Appearance;

namespace shlauncher.ViewModels.Pages
{
    public partial class SettingsViewModel : ObservableObject, INavigationAware
    {
        private bool _isInitialized = false;

        [ObservableProperty]
        private string _appVersion = String.Empty;

        [ObservableProperty]
        private ApplicationTheme _currentTheme = ApplicationTheme.Unknown;

        public Task OnNavigatedToAsync()
        {
            if (!_isInitialized)
                InitializeViewModel();

            return Task.CompletedTask;
        }

        public Task OnNavigatedFromAsync() => Task.CompletedTask;

        private void InitializeViewModel()
        {
            CurrentTheme = ApplicationThemeManager.GetAppTheme();
            AppVersion = $"UiDesktopApp1 - {GetAssemblyVersion()}";

            _isInitialized = true;
        }

        private string GetAssemblyVersion()
        {
            return System.Reflection.Assembly.GetExecutingAssembly().GetName().Version?.ToString()
                ?? String.Empty;
        }

        [RelayCommand]
        private void OnChangeTheme(string parameter)
        {
            switch (parameter)
            {
                case "theme_light":
                    if (CurrentTheme == ApplicationTheme.Light)
                        break;

                    ApplicationThemeManager.Apply(ApplicationTheme.Light);
                    CurrentTheme = ApplicationTheme.Light;

                    break;

                default:
                    if (CurrentTheme == ApplicationTheme.Dark)
                        break;

                    ApplicationThemeManager.Apply(ApplicationTheme.Dark);
                    CurrentTheme = ApplicationTheme.Dark;

                    break;
            }
        }
    }
}

/// Pages End of SettingsViewModel.cs ///

/// Services Start of ApplicationHostService.cs ///
﻿using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using shlauncher.Views.Pages;
using shlauncher.Views.Windows;
using Wpf.Ui;

namespace shlauncher.Services
{
    /// <summary>
    /// Managed host of the application.
    /// </summary>
    public class ApplicationHostService : IHostedService
    {
        private readonly IServiceProvider _serviceProvider;

        private INavigationWindow _navigationWindow;

        public ApplicationHostService(IServiceProvider serviceProvider)
        {
            _serviceProvider = serviceProvider;
        }

        /// <summary>
        /// Triggered when the application host is ready to start the service.
        /// </summary>
        /// <param name="cancellationToken">Indicates that the start process has been aborted.</param>
        public async Task StartAsync(CancellationToken cancellationToken)
        {
            await HandleActivationAsync();
        }

        /// <summary>
        /// Triggered when the application host is performing a graceful shutdown.
        /// </summary>
        /// <param name="cancellationToken">Indicates that the shutdown process should no longer be graceful.</param>
        public async Task StopAsync(CancellationToken cancellationToken)
        {
            await Task.CompletedTask;
        }

        /// <summary>
        /// Creates main window during activation.
        /// </summary>
        private async Task HandleActivationAsync()
        {
            if (!Application.Current.Windows.OfType<MainWindow>().Any())
            {
                _navigationWindow = (
                    _serviceProvider.GetService(typeof(INavigationWindow)) as INavigationWindow
                )!;
                _navigationWindow!.ShowWindow();

                _navigationWindow.Navigate(typeof(Views.Pages.DashboardPage));
            }

            await Task.CompletedTask;
        }
    }
}

/// Services End of ApplicationHostService.cs ///

/// Resources Start of Translations.cs ///
namespace shlauncher.Resources
{
    public partial class Translations
    {
    }
}

/// Resources End of Translations.cs ///

/// Models Start of AppConfig.cs ///
﻿namespace shlauncher.Models
{
    public class AppConfig
    {
        public string ConfigurationsFolder { get; set; }

        public string AppPropertiesFileName { get; set; }
    }
}

/// Models End of AppConfig.cs ///

/// Models Start of DataColor.cs ///
﻿using System.Windows.Media;

namespace shlauncher.Models
{
    public struct DataColor
    {
        public Brush Color { get; set; }
    }
}

/// Models End of DataColor.cs ///

/// Helpers Start of EnumToBooleanConverter.cs ///
﻿using System.Globalization;
using System.Windows.Data;
using Wpf.Ui.Appearance;

namespace shlauncher.Helpers
{
    internal class EnumToBooleanConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (parameter is not String enumString)
            {
                throw new ArgumentException("ExceptionEnumToBooleanConverterParameterMustBeAnEnumName");
            }

            if (!Enum.IsDefined(typeof(ApplicationTheme), value))
            {
                throw new ArgumentException("ExceptionEnumToBooleanConverterValueMustBeAnEnum");
            }

            var enumValue = Enum.Parse(typeof(ApplicationTheme), enumString);

            return enumValue.Equals(value);
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (parameter is not String enumString)
            {
                throw new ArgumentException("ExceptionEnumToBooleanConverterParameterMustBeAnEnumName");
            }

            return Enum.Parse(typeof(ApplicationTheme), enumString);
        }
    }
}

/// Helpers End of EnumToBooleanConverter.cs ///

